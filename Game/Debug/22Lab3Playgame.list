
22Lab3Playgame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b50  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004d28  08004d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d68  08004d68  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d70  08004d70  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d74  08004d74  00014d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08004d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  200000d8  08004e50  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08004e50  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014916  00000000  00000000  0002014b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c0  00000000  00000000  00034a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00037128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6a  00000000  00000000  00038380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e75  00000000  00000000  000391ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015595  00000000  00000000  0005f05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa196  00000000  00000000  000745f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e94  00000000  00000000  0016e78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00173620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000d8 	.word	0x200000d8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004d10 	.word	0x08004d10

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000dc 	.word	0x200000dc
 8000214:	08004d10 	.word	0x08004d10

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fe9f 	bl	800125a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f818 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f9dc 	bl	80008dc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f860 	bl	80005e8 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000528:	f000 f93a 	bl	80007a0 <MX_TIM2_Init>
  MX_SPI3_Init();
 800052c:	f000 f8a6 	bl	800067c <MX_SPI3_Init>
  MX_TIM1_Init();
 8000530:	f000 f8e2 	bl	80006f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000534:	f000 f982 	bl	800083c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //  SPITxRx_Setup();//for mode 1,1
    IODIRB_Setup();
 8000538:	f000 fa60 	bl	80009fc <IODIRB_Setup>
    HAL_TIM_Base_Start_IT(&htim3);
 800053c:	4803      	ldr	r0, [pc, #12]	; (800054c <main+0x38>)
 800053e:	f003 f81b 	bl	8003578 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPITxRx_readIO();
 8000542:	f000 fa7b 	bl	8000a3c <SPITxRx_readIO>
	  //ReadSwitch();
	  Game();
 8000546:	f000 faad 	bl	8000aa4 <Game>
	  SPITxRx_readIO();
 800054a:	e7fa      	b.n	8000542 <main+0x2e>
 800054c:	20000284 	.word	0x20000284

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0318 	add.w	r3, r7, #24
 800055a:	2238      	movs	r2, #56	; 0x38
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f004 fbaa 	bl	8004cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000572:	2000      	movs	r0, #0
 8000574:	f001 fa50 	bl	8001a18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000578:	2302      	movs	r3, #2
 800057a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000582:	2340      	movs	r3, #64	; 0x40
 8000584:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800058e:	2304      	movs	r3, #4
 8000590:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000592:	2355      	movs	r3, #85	; 0x55
 8000594:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0318 	add.w	r3, r7, #24
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 faea 	bl	8001b80 <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005b2:	f000 fcb7 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2303      	movs	r3, #3
 80005bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2104      	movs	r1, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fde8 	bl	80021a4 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005da:	f000 fca3 	bl	8000f24 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 80005ee:	4a22      	ldr	r2, [pc, #136]	; (8000678 <MX_LPUART1_UART_Init+0x90>)
 80005f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005f2:	4b20      	ldr	r3, [pc, #128]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 80005f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 800061a:	2200      	movs	r2, #0
 800061c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000620:	2200      	movs	r2, #0
 8000622:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000626:	2200      	movs	r2, #0
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 800062c:	f003 fcd6 	bl	8003fdc <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000636:	f000 fc75 	bl	8000f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063a:	2100      	movs	r1, #0
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 800063e:	f004 fa71 	bl	8004b24 <HAL_UARTEx_SetTxFifoThreshold>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000648:	f000 fc6c 	bl	8000f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000650:	f004 faa6 	bl	8004ba0 <HAL_UARTEx_SetRxFifoThreshold>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800065a:	f000 fc63 	bl	8000f24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000660:	f004 fa27 	bl	8004ab2 <HAL_UARTEx_DisableFifoMode>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800066a:	f000 fc5b 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200000f4 	.word	0x200000f4
 8000678:	40008000 	.word	0x40008000

0800067c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_SPI3_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <MX_SPI3_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_SPI3_Init+0x74>)
 8000688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800068c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_SPI3_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_SPI3_Init+0x74>)
 8000696:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800069a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_SPI3_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006b2:	2238      	movs	r2, #56	; 0x38
 80006b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006ca:	2207      	movs	r2, #7
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006d6:	2208      	movs	r2, #8
 80006d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006dc:	f002 f9cc 	bl	8002a78 <HAL_SPI_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 fc1d 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000188 	.word	0x20000188
 80006f4:	40003c00 	.word	0x40003c00

080006f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_TIM1_Init+0xa0>)
 8000718:	4a20      	ldr	r2, [pc, #128]	; (800079c <MX_TIM1_Init+0xa4>)
 800071a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16999;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_TIM1_Init+0xa0>)
 800071e:	f244 2267 	movw	r2, #16999	; 0x4267
 8000722:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_TIM1_Init+0xa0>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_TIM1_Init+0xa0>)
 800072c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000730:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_TIM1_Init+0xa0>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_TIM1_Init+0xa0>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_TIM1_Init+0xa0>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000744:	4814      	ldr	r0, [pc, #80]	; (8000798 <MX_TIM1_Init+0xa0>)
 8000746:	f002 febf 	bl	80034c8 <HAL_TIM_Base_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000750:	f000 fbe8 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000758:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4619      	mov	r1, r3
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_TIM1_Init+0xa0>)
 8000762:	f003 f8d1 	bl	8003908 <HAL_TIM_ConfigClockSource>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800076c:	f000 fbda 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_TIM1_Init+0xa0>)
 8000782:	f003 fb4f 	bl	8003e24 <HAL_TIMEx_MasterConfigSynchronization>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800078c:	f000 fbca 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001ec 	.word	0x200001ec
 800079c:	40012c00 	.word	0x40012c00

080007a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_TIM2_Init+0x98>)
 80007c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1699;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_TIM2_Init+0x98>)
 80007c8:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80007cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_TIM2_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_TIM2_Init+0x98>)
 80007d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_TIM2_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_TIM2_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e8:	4813      	ldr	r0, [pc, #76]	; (8000838 <MX_TIM2_Init+0x98>)
 80007ea:	f002 fe6d 	bl	80034c8 <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80007f4:	f000 fb96 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	4619      	mov	r1, r3
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_TIM2_Init+0x98>)
 8000806:	f003 f87f 	bl	8003908 <HAL_TIM_ConfigClockSource>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000810:	f000 fb88 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_TIM2_Init+0x98>)
 8000822:	f003 faff 	bl	8003e24 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800082c:	f000 fb7a 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000238 	.word	0x20000238

0800083c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_TIM3_Init+0x98>)
 800085c:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <MX_TIM3_Init+0x9c>)
 800085e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 8000860:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_TIM3_Init+0x98>)
 8000862:	f244 2267 	movw	r2, #16999	; 0x4267
 8000866:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_TIM3_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_TIM3_Init+0x98>)
 8000870:	f242 720f 	movw	r2, #9999	; 0x270f
 8000874:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_TIM3_Init+0x98>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_TIM3_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000882:	4814      	ldr	r0, [pc, #80]	; (80008d4 <MX_TIM3_Init+0x98>)
 8000884:	f002 fe20 	bl	80034c8 <HAL_TIM_Base_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800088e:	f000 fb49 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000896:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4619      	mov	r1, r3
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_TIM3_Init+0x98>)
 80008a0:	f003 f832 	bl	8003908 <HAL_TIM_ConfigClockSource>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80008aa:	f000 fb3b 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_TIM3_Init+0x98>)
 80008bc:	f003 fab2 	bl	8003e24 <HAL_TIMEx_MasterConfigSynchronization>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80008c6:	f000 fb2d 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000284 	.word	0x20000284
 80008d8:	40000400 	.word	0x40000400

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b3f      	ldr	r3, [pc, #252]	; (80009f0 <MX_GPIO_Init+0x114>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a3e      	ldr	r2, [pc, #248]	; (80009f0 <MX_GPIO_Init+0x114>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b3c      	ldr	r3, [pc, #240]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090a:	4b39      	ldr	r3, [pc, #228]	; (80009f0 <MX_GPIO_Init+0x114>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a38      	ldr	r2, [pc, #224]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b36      	ldr	r3, [pc, #216]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0320 	and.w	r3, r3, #32
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4a32      	ldr	r2, [pc, #200]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <MX_GPIO_Init+0x114>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a2c      	ldr	r2, [pc, #176]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4a26      	ldr	r2, [pc, #152]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2120      	movs	r1, #32
 800096e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000972:	f001 f815 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2104      	movs	r1, #4
 800097a:	481e      	ldr	r0, [pc, #120]	; (80009f4 <MX_GPIO_Init+0x118>)
 800097c:	f001 f810 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000986:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	4818      	ldr	r0, [pc, #96]	; (80009f8 <MX_GPIO_Init+0x11c>)
 8000998:	f000 fe68 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800099c:	2320      	movs	r3, #32
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b6:	f000 fe59 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ba:	2304      	movs	r3, #4
 80009bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4808      	ldr	r0, [pc, #32]	; (80009f4 <MX_GPIO_Init+0x118>)
 80009d2:	f000 fe4b 	bl	800166c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2028      	movs	r0, #40	; 0x28
 80009dc:	f000 fdab 	bl	8001536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e0:	2028      	movs	r0, #40	; 0x28
 80009e2:	f000 fdc2 	bl	800156a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48000c00 	.word	0x48000c00
 80009f8:	48000800 	.word	0x48000800

080009fc <IODIRB_Setup>:
//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
//HAL_Delay(1);
//}

void IODIRB_Setup()//at BEGIN 2
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2104      	movs	r1, #4
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <IODIRB_Setup+0x30>)
 8000a06:	f000 ffcb 	bl	80019a0 <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000000;//write
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <IODIRB_Setup+0x34>)
 8000a0c:	2240      	movs	r2, #64	; 0x40
 8000a0e:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x01;//IODIRB
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <IODIRB_Setup+0x34>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0b00000000;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <IODIRB_Setup+0x34>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	709a      	strb	r2, [r3, #2]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <IODIRB_Setup+0x38>)
 8000a20:	4903      	ldr	r1, [pc, #12]	; (8000a30 <IODIRB_Setup+0x34>)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <IODIRB_Setup+0x3c>)
 8000a24:	f002 f8d4 	bl	8002bd0 <HAL_SPI_TransmitReceive_IT>
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	48000c00 	.word	0x48000c00
 8000a30:	200002dc 	.word	0x200002dc
 8000a34:	200002d0 	.word	0x200002d0
 8000a38:	20000188 	.word	0x20000188

08000a3c <SPITxRx_readIO>:

void SPITxRx_readIO()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 8000a40:	2104      	movs	r1, #4
 8000a42:	4813      	ldr	r0, [pc, #76]	; (8000a90 <SPITxRx_readIO+0x54>)
 8000a44:	f000 ff94 	bl	8001970 <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d01e      	beq.n	8000a8c <SPITxRx_readIO+0x50>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2104      	movs	r1, #4
 8000a52:	480f      	ldr	r0, [pc, #60]	; (8000a90 <SPITxRx_readIO+0x54>)
 8000a54:	f000 ffa4 	bl	80019a0 <HAL_GPIO_WritePin>
		if (Mode == 0)
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <SPITxRx_readIO+0x58>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d109      	bne.n	8000a74 <SPITxRx_readIO+0x38>
		{
			SPITx[0] = 0b01000001;//read
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <SPITxRx_readIO+0x5c>)
 8000a62:	2241      	movs	r2, #65	; 0x41
 8000a64:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x12;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <SPITxRx_readIO+0x5c>)
 8000a68:	2212      	movs	r2, #18
 8000a6a:	705a      	strb	r2, [r3, #1]
			SPITx[2] = 0;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <SPITxRx_readIO+0x5c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	709a      	strb	r2, [r3, #2]
 8000a72:	e005      	b.n	8000a80 <SPITxRx_readIO+0x44>
		}
		else if(Mode == 1)
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <SPITxRx_readIO+0x58>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d101      	bne.n	8000a80 <SPITxRx_readIO+0x44>
		{
			Game();
 8000a7c:	f000 f812 	bl	8000aa4 <Game>
		}
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000a80:	2303      	movs	r3, #3
 8000a82:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <SPITxRx_readIO+0x60>)
 8000a84:	4904      	ldr	r1, [pc, #16]	; (8000a98 <SPITxRx_readIO+0x5c>)
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <SPITxRx_readIO+0x64>)
 8000a88:	f002 f8a2 	bl	8002bd0 <HAL_SPI_TransmitReceive_IT>
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	48000c00 	.word	0x48000c00
 8000a94:	200002e6 	.word	0x200002e6
 8000a98:	200002dc 	.word	0x200002dc
 8000a9c:	200002d0 	.word	0x200002d0
 8000aa0:	20000188 	.word	0x20000188

08000aa4 <Game>:
	//				Switch = 4;
	//			}
//}

void Game()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	if (State == 1)
 8000aa8:	4b88      	ldr	r3, [pc, #544]	; (8000ccc <Game+0x228>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	f040 8190 	bne.w	8000dd2 <Game+0x32e>
		{
			if (SPIRx[2]==240)
 8000ab2:	4b87      	ldr	r3, [pc, #540]	; (8000cd0 <Game+0x22c>)
 8000ab4:	789b      	ldrb	r3, [r3, #2]
 8000ab6:	2bf0      	cmp	r3, #240	; 0xf0
 8000ab8:	d102      	bne.n	8000ac0 <Game+0x1c>
			{
				click = 0;
 8000aba:	4b86      	ldr	r3, [pc, #536]	; (8000cd4 <Game+0x230>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
			}
			if (SPIRx[2]==239 && click == 0)
 8000ac0:	4b83      	ldr	r3, [pc, #524]	; (8000cd0 <Game+0x22c>)
 8000ac2:	789b      	ldrb	r3, [r3, #2]
 8000ac4:	2bef      	cmp	r3, #239	; 0xef
 8000ac6:	d152      	bne.n	8000b6e <Game+0xca>
 8000ac8:	4b82      	ldr	r3, [pc, #520]	; (8000cd4 <Game+0x230>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <Game+0xca>
				{
				click = 1;
 8000ad0:	4b80      	ldr	r3, [pc, #512]	; (8000cd4 <Game+0x230>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	601a      	str	r2, [r3, #0]
				Pattern_Check[Nub] = 1;
 8000ad6:	4b80      	ldr	r3, [pc, #512]	; (8000cd8 <Game+0x234>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a80      	ldr	r2, [pc, #512]	; (8000cdc <Game+0x238>)
 8000adc:	2101      	movs	r1, #1
 8000ade:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000ae2:	4b7f      	ldr	r3, [pc, #508]	; (8000ce0 <Game+0x23c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	1e5a      	subs	r2, r3, #1
 8000ae8:	4b7d      	ldr	r3, [pc, #500]	; (8000ce0 <Game+0x23c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	497d      	ldr	r1, [pc, #500]	; (8000ce4 <Game+0x240>)
 8000af0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000af4:	497c      	ldr	r1, [pc, #496]	; (8000ce8 <Game+0x244>)
 8000af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 1;
 8000afa:	4b7c      	ldr	r3, [pc, #496]	; (8000cec <Game+0x248>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000b00:	4b75      	ldr	r3, [pc, #468]	; (8000cd8 <Game+0x234>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	4a74      	ldr	r2, [pc, #464]	; (8000cd8 <Game+0x234>)
 8000b08:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
 8000b0a:	2064      	movs	r0, #100	; 0x64
 8000b0c:	f000 fc16 	bl	800133c <HAL_Delay>
				if (Random_Number[Nub-1] != 2)
 8000b10:	4b71      	ldr	r3, [pc, #452]	; (8000cd8 <Game+0x234>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	4a73      	ldr	r2, [pc, #460]	; (8000ce4 <Game+0x240>)
 8000b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	f000 8143 	beq.w	8000da8 <Game+0x304>
					{
					wrong = 1;
 8000b22:	4b73      	ldr	r3, [pc, #460]	; (8000cf0 <Game+0x24c>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	601a      	str	r2, [r3, #0]
					//State = 0;
					//Nub = 0;
					//Numcheck_Count = 0;
					//i = 0;
					SPITx[0] = 0b01000000;//write
 8000b28:	4b72      	ldr	r3, [pc, #456]	; (8000cf4 <Game+0x250>)
 8000b2a:	2240      	movs	r2, #64	; 0x40
 8000b2c:	701a      	strb	r2, [r3, #0]
					SPITx[1] = 0x15;//OLATB
 8000b2e:	4b71      	ldr	r3, [pc, #452]	; (8000cf4 <Game+0x250>)
 8000b30:	2215      	movs	r2, #21
 8000b32:	705a      	strb	r2, [r3, #1]
					SPITx[2] = 0b11111111;
 8000b34:	4b6f      	ldr	r3, [pc, #444]	; (8000cf4 <Game+0x250>)
 8000b36:	22ff      	movs	r2, #255	; 0xff
 8000b38:	709a      	strb	r2, [r3, #2]
					HAL_Delay(800);
 8000b3a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b3e:	f000 fbfd 	bl	800133c <HAL_Delay>
					SPITx[2] = 0b00000000;
 8000b42:	4b6c      	ldr	r3, [pc, #432]	; (8000cf4 <Game+0x250>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	709a      	strb	r2, [r3, #2]
					HAL_Delay(500);
 8000b48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b4c:	f000 fbf6 	bl	800133c <HAL_Delay>
					SPITx[2] = 0b11111111;
 8000b50:	4b68      	ldr	r3, [pc, #416]	; (8000cf4 <Game+0x250>)
 8000b52:	22ff      	movs	r2, #255	; 0xff
 8000b54:	709a      	strb	r2, [r3, #2]
					HAL_Delay(800);
 8000b56:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b5a:	f000 fbef 	bl	800133c <HAL_Delay>
					SPITx[2] = 0b00000000;
 8000b5e:	4b65      	ldr	r3, [pc, #404]	; (8000cf4 <Game+0x250>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	709a      	strb	r2, [r3, #2]
					HAL_Delay(500);
 8000b64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b68:	f000 fbe8 	bl	800133c <HAL_Delay>
				if (Random_Number[Nub-1] != 2)
 8000b6c:	e11c      	b.n	8000da8 <Game+0x304>
					}
				}
			else if (SPIRx[2]==223 && click == 0)
 8000b6e:	4b58      	ldr	r3, [pc, #352]	; (8000cd0 <Game+0x22c>)
 8000b70:	789b      	ldrb	r3, [r3, #2]
 8000b72:	2bdf      	cmp	r3, #223	; 0xdf
 8000b74:	d152      	bne.n	8000c1c <Game+0x178>
 8000b76:	4b57      	ldr	r3, [pc, #348]	; (8000cd4 <Game+0x230>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14e      	bne.n	8000c1c <Game+0x178>
				{
				click = 1;
 8000b7e:	4b55      	ldr	r3, [pc, #340]	; (8000cd4 <Game+0x230>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	601a      	str	r2, [r3, #0]
				Pattern_Check[Nub] = 2;
 8000b84:	4b54      	ldr	r3, [pc, #336]	; (8000cd8 <Game+0x234>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a54      	ldr	r2, [pc, #336]	; (8000cdc <Game+0x238>)
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000b90:	4b53      	ldr	r3, [pc, #332]	; (8000ce0 <Game+0x23c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	1e5a      	subs	r2, r3, #1
 8000b96:	4b52      	ldr	r3, [pc, #328]	; (8000ce0 <Game+0x23c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	4951      	ldr	r1, [pc, #324]	; (8000ce4 <Game+0x240>)
 8000b9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ba2:	4951      	ldr	r1, [pc, #324]	; (8000ce8 <Game+0x244>)
 8000ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 2;
 8000ba8:	4b50      	ldr	r3, [pc, #320]	; (8000cec <Game+0x248>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000bae:	4b4a      	ldr	r3, [pc, #296]	; (8000cd8 <Game+0x234>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	4a48      	ldr	r2, [pc, #288]	; (8000cd8 <Game+0x234>)
 8000bb6:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
 8000bb8:	2064      	movs	r0, #100	; 0x64
 8000bba:	f000 fbbf 	bl	800133c <HAL_Delay>
				if (Random_Number[Nub-1] != 2)
 8000bbe:	4b46      	ldr	r3, [pc, #280]	; (8000cd8 <Game+0x234>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	4a47      	ldr	r2, [pc, #284]	; (8000ce4 <Game+0x240>)
 8000bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	f000 80ec 	beq.w	8000da8 <Game+0x304>
					{
					wrong = 1;
 8000bd0:	4b47      	ldr	r3, [pc, #284]	; (8000cf0 <Game+0x24c>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]
					//State = 0;
					//Nub = 0;
					//Numcheck_Count = 0;
					//i = 0;
					SPITx[0] = 0b01000000;//write
 8000bd6:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <Game+0x250>)
 8000bd8:	2240      	movs	r2, #64	; 0x40
 8000bda:	701a      	strb	r2, [r3, #0]
					SPITx[1] = 0x15;//OLATB
 8000bdc:	4b45      	ldr	r3, [pc, #276]	; (8000cf4 <Game+0x250>)
 8000bde:	2215      	movs	r2, #21
 8000be0:	705a      	strb	r2, [r3, #1]
					SPITx[2] = 0b11111111;
 8000be2:	4b44      	ldr	r3, [pc, #272]	; (8000cf4 <Game+0x250>)
 8000be4:	22ff      	movs	r2, #255	; 0xff
 8000be6:	709a      	strb	r2, [r3, #2]
					HAL_Delay(800);
 8000be8:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000bec:	f000 fba6 	bl	800133c <HAL_Delay>
					SPITx[2] = 0b00000000;
 8000bf0:	4b40      	ldr	r3, [pc, #256]	; (8000cf4 <Game+0x250>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	709a      	strb	r2, [r3, #2]
					HAL_Delay(500);
 8000bf6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bfa:	f000 fb9f 	bl	800133c <HAL_Delay>
					SPITx[2] = 0b11111111;
 8000bfe:	4b3d      	ldr	r3, [pc, #244]	; (8000cf4 <Game+0x250>)
 8000c00:	22ff      	movs	r2, #255	; 0xff
 8000c02:	709a      	strb	r2, [r3, #2]
					HAL_Delay(800);
 8000c04:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000c08:	f000 fb98 	bl	800133c <HAL_Delay>
					SPITx[2] = 0b00000000;
 8000c0c:	4b39      	ldr	r3, [pc, #228]	; (8000cf4 <Game+0x250>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	709a      	strb	r2, [r3, #2]
					HAL_Delay(500);
 8000c12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c16:	f000 fb91 	bl	800133c <HAL_Delay>
				if (Random_Number[Nub-1] != 2)
 8000c1a:	e0c5      	b.n	8000da8 <Game+0x304>
					}
				}
			else if (SPIRx[2]==176 && click == 0)
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <Game+0x22c>)
 8000c1e:	789b      	ldrb	r3, [r3, #2]
 8000c20:	2bb0      	cmp	r3, #176	; 0xb0
 8000c22:	d169      	bne.n	8000cf8 <Game+0x254>
 8000c24:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <Game+0x230>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d165      	bne.n	8000cf8 <Game+0x254>
				{
				click = 1;
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <Game+0x230>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
				Pattern_Check[Nub] = 3;
 8000c32:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <Game+0x234>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a29      	ldr	r2, [pc, #164]	; (8000cdc <Game+0x238>)
 8000c38:	2103      	movs	r1, #3
 8000c3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000c3e:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <Game+0x23c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <Game+0x23c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	4926      	ldr	r1, [pc, #152]	; (8000ce4 <Game+0x240>)
 8000c4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c50:	4925      	ldr	r1, [pc, #148]	; (8000ce8 <Game+0x244>)
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 3;
 8000c56:	4b25      	ldr	r3, [pc, #148]	; (8000cec <Game+0x248>)
 8000c58:	2203      	movs	r2, #3
 8000c5a:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <Game+0x234>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <Game+0x234>)
 8000c64:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
 8000c66:	2064      	movs	r0, #100	; 0x64
 8000c68:	f000 fb68 	bl	800133c <HAL_Delay>
				if (Random_Number[Nub-1] != 3)
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <Game+0x234>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <Game+0x240>)
 8000c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	f000 8095 	beq.w	8000da8 <Game+0x304>
					{
					wrong = 1;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <Game+0x24c>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
					//State = 0;
					//Nub = 0;
					//Numcheck_Count = 0;
					//i = 0;
					SPITx[0] = 0b01000000;//write
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <Game+0x250>)
 8000c86:	2240      	movs	r2, #64	; 0x40
 8000c88:	701a      	strb	r2, [r3, #0]
					SPITx[1] = 0x15;//OLATB
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <Game+0x250>)
 8000c8c:	2215      	movs	r2, #21
 8000c8e:	705a      	strb	r2, [r3, #1]
					SPITx[2] = 0b11111111;
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <Game+0x250>)
 8000c92:	22ff      	movs	r2, #255	; 0xff
 8000c94:	709a      	strb	r2, [r3, #2]
					HAL_Delay(800);
 8000c96:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000c9a:	f000 fb4f 	bl	800133c <HAL_Delay>
					SPITx[2] = 0b00000000;
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <Game+0x250>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	709a      	strb	r2, [r3, #2]
					HAL_Delay(500);
 8000ca4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca8:	f000 fb48 	bl	800133c <HAL_Delay>
					SPITx[2] = 0b11111111;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <Game+0x250>)
 8000cae:	22ff      	movs	r2, #255	; 0xff
 8000cb0:	709a      	strb	r2, [r3, #2]
					HAL_Delay(800);
 8000cb2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000cb6:	f000 fb41 	bl	800133c <HAL_Delay>
					SPITx[2] = 0b00000000;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <Game+0x250>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	709a      	strb	r2, [r3, #2]
					HAL_Delay(500);
 8000cc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc4:	f000 fb3a 	bl	800133c <HAL_Delay>
				if (Random_Number[Nub-1] != 3)
 8000cc8:	e06e      	b.n	8000da8 <Game+0x304>
 8000cca:	bf00      	nop
 8000ccc:	2000047c 	.word	0x2000047c
 8000cd0:	200002d0 	.word	0x200002d0
 8000cd4:	2000048c 	.word	0x2000048c
 8000cd8:	20000488 	.word	0x20000488
 8000cdc:	200003b4 	.word	0x200003b4
 8000ce0:	20000480 	.word	0x20000480
 8000ce4:	20000004 	.word	0x20000004
 8000ce8:	200002ec 	.word	0x200002ec
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000490 	.word	0x20000490
 8000cf4:	200002dc 	.word	0x200002dc
					}
				}
			else if (SPIRx[2]==127 && click == 0)
 8000cf8:	4b5c      	ldr	r3, [pc, #368]	; (8000e6c <Game+0x3c8>)
 8000cfa:	789b      	ldrb	r3, [r3, #2]
 8000cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8000cfe:	d153      	bne.n	8000da8 <Game+0x304>
 8000d00:	4b5b      	ldr	r3, [pc, #364]	; (8000e70 <Game+0x3cc>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14f      	bne.n	8000da8 <Game+0x304>
				{
				wrong = 1;
 8000d08:	4b5a      	ldr	r3, [pc, #360]	; (8000e74 <Game+0x3d0>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]
				click = 1;
 8000d0e:	4b58      	ldr	r3, [pc, #352]	; (8000e70 <Game+0x3cc>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	601a      	str	r2, [r3, #0]
				Pattern_Check[Nub] = 4;
 8000d14:	4b58      	ldr	r3, [pc, #352]	; (8000e78 <Game+0x3d4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a58      	ldr	r2, [pc, #352]	; (8000e7c <Game+0x3d8>)
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000d20:	4b57      	ldr	r3, [pc, #348]	; (8000e80 <Game+0x3dc>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	1e5a      	subs	r2, r3, #1
 8000d26:	4b56      	ldr	r3, [pc, #344]	; (8000e80 <Game+0x3dc>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	4955      	ldr	r1, [pc, #340]	; (8000e84 <Game+0x3e0>)
 8000d2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d32:	4955      	ldr	r1, [pc, #340]	; (8000e88 <Game+0x3e4>)
 8000d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 4;
 8000d38:	4b54      	ldr	r3, [pc, #336]	; (8000e8c <Game+0x3e8>)
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000d3e:	4b4e      	ldr	r3, [pc, #312]	; (8000e78 <Game+0x3d4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a4c      	ldr	r2, [pc, #304]	; (8000e78 <Game+0x3d4>)
 8000d46:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
 8000d48:	2064      	movs	r0, #100	; 0x64
 8000d4a:	f000 faf7 	bl	800133c <HAL_Delay>
				if (Random_Number[Nub-1] != 4)
 8000d4e:	4b4a      	ldr	r3, [pc, #296]	; (8000e78 <Game+0x3d4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	4a4b      	ldr	r2, [pc, #300]	; (8000e84 <Game+0x3e0>)
 8000d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	d024      	beq.n	8000da8 <Game+0x304>
					{
					wrong = 1;
 8000d5e:	4b45      	ldr	r3, [pc, #276]	; (8000e74 <Game+0x3d0>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	601a      	str	r2, [r3, #0]
					//State = 0;
					//Nub = 0;
					//Numcheck_Count = 0;
					//i = 0;
					SPITx[0] = 0b01000000;//write
 8000d64:	4b4a      	ldr	r3, [pc, #296]	; (8000e90 <Game+0x3ec>)
 8000d66:	2240      	movs	r2, #64	; 0x40
 8000d68:	701a      	strb	r2, [r3, #0]
					SPITx[1] = 0x15;//OLATB
 8000d6a:	4b49      	ldr	r3, [pc, #292]	; (8000e90 <Game+0x3ec>)
 8000d6c:	2215      	movs	r2, #21
 8000d6e:	705a      	strb	r2, [r3, #1]
					SPITx[2] = 0b11111111;
 8000d70:	4b47      	ldr	r3, [pc, #284]	; (8000e90 <Game+0x3ec>)
 8000d72:	22ff      	movs	r2, #255	; 0xff
 8000d74:	709a      	strb	r2, [r3, #2]
					HAL_Delay(800);
 8000d76:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000d7a:	f000 fadf 	bl	800133c <HAL_Delay>
					SPITx[2] = 0b00000000;
 8000d7e:	4b44      	ldr	r3, [pc, #272]	; (8000e90 <Game+0x3ec>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	709a      	strb	r2, [r3, #2]
					HAL_Delay(500);
 8000d84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d88:	f000 fad8 	bl	800133c <HAL_Delay>
					SPITx[2] = 0b11111111;
 8000d8c:	4b40      	ldr	r3, [pc, #256]	; (8000e90 <Game+0x3ec>)
 8000d8e:	22ff      	movs	r2, #255	; 0xff
 8000d90:	709a      	strb	r2, [r3, #2]
					HAL_Delay(800);
 8000d92:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000d96:	f000 fad1 	bl	800133c <HAL_Delay>
					SPITx[2] = 0b00000000;
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <Game+0x3ec>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	709a      	strb	r2, [r3, #2]
					HAL_Delay(500);
 8000da0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000da4:	f000 faca 	bl	800133c <HAL_Delay>
					}
				}
			if (Nub > Numcheck_Count)
 8000da8:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <Game+0x3d4>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <Game+0x3dc>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dd59      	ble.n	8000e68 <Game+0x3c4>
			{
				Nub = 0;
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <Game+0x3d4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
				State = 0;
 8000dba:	4b36      	ldr	r3, [pc, #216]	; (8000e94 <Game+0x3f0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
				i = 0;
 8000dc0:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <Game+0x3f4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
				Numcheck_Count = Numcheck_Count + 1;
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <Game+0x3dc>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	4a2c      	ldr	r2, [pc, #176]	; (8000e80 <Game+0x3dc>)
 8000dce:	6013      	str	r3, [r2, #0]
			if (i == Numcheck_Count + 1)
			{
				State = 1;
			}
		}
}
 8000dd0:	e04a      	b.n	8000e68 <Game+0x3c4>
	else if (State == 0)
 8000dd2:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <Game+0x3f0>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d146      	bne.n	8000e68 <Game+0x3c4>
			SPITx[0] = 0b01000000;//write
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <Game+0x3ec>)
 8000ddc:	2240      	movs	r2, #64	; 0x40
 8000dde:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15;//OLATB
 8000de0:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <Game+0x3ec>)
 8000de2:	2215      	movs	r2, #21
 8000de4:	705a      	strb	r2, [r3, #1]
			if (Random_Number[i] == 1)
 8000de6:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <Game+0x3f4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a26      	ldr	r2, [pc, #152]	; (8000e84 <Game+0x3e0>)
 8000dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d106      	bne.n	8000e02 <Game+0x35e>
				SPITx[2] = 0b00111111;
 8000df4:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <Game+0x3ec>)
 8000df6:	223f      	movs	r2, #63	; 0x3f
 8000df8:	709a      	strb	r2, [r3, #2]
				test =1;
 8000dfa:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <Game+0x3f8>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	e028      	b.n	8000e54 <Game+0x3b0>
			else if (Random_Number[i] == 2)
 8000e02:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <Game+0x3f4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <Game+0x3e0>)
 8000e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d106      	bne.n	8000e1e <Game+0x37a>
				SPITx[2] = 0b11001111;
 8000e10:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <Game+0x3ec>)
 8000e12:	22cf      	movs	r2, #207	; 0xcf
 8000e14:	709a      	strb	r2, [r3, #2]
				test =2;
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <Game+0x3f8>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e01a      	b.n	8000e54 <Game+0x3b0>
			else if (Random_Number[i] == 3)
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <Game+0x3f4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <Game+0x3e0>)
 8000e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d106      	bne.n	8000e3a <Game+0x396>
				SPITx[2] = 0b11110011;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <Game+0x3ec>)
 8000e2e:	22f3      	movs	r2, #243	; 0xf3
 8000e30:	709a      	strb	r2, [r3, #2]
				test =3;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <Game+0x3f8>)
 8000e34:	2203      	movs	r2, #3
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	e00c      	b.n	8000e54 <Game+0x3b0>
			else if (Random_Number[i] == 4)
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <Game+0x3f4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <Game+0x3e0>)
 8000e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d105      	bne.n	8000e54 <Game+0x3b0>
				SPITx[2] = 0b11111100;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <Game+0x3ec>)
 8000e4a:	22fc      	movs	r2, #252	; 0xfc
 8000e4c:	709a      	strb	r2, [r3, #2]
				test =4;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <Game+0x3f8>)
 8000e50:	2204      	movs	r2, #4
 8000e52:	601a      	str	r2, [r3, #0]
			if (i == Numcheck_Count + 1)
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <Game+0x3dc>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <Game+0x3f4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d102      	bne.n	8000e68 <Game+0x3c4>
				State = 1;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <Game+0x3f0>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200002d0 	.word	0x200002d0
 8000e70:	2000048c 	.word	0x2000048c
 8000e74:	20000490 	.word	0x20000490
 8000e78:	20000488 	.word	0x20000488
 8000e7c:	200003b4 	.word	0x200003b4
 8000e80:	20000480 	.word	0x20000480
 8000e84:	20000004 	.word	0x20000004
 8000e88:	200002ec 	.word	0x200002ec
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	200002dc 	.word	0x200002dc
 8000e94:	2000047c 	.word	0x2000047c
 8000e98:	200002e8 	.word	0x200002e8
 8000e9c:	20000484 	.word	0x20000484

08000ea0 <HAL_TIM_PeriodElapsedCallback>:
//
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d10e      	bne.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		i+=1;
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000eb8:	6013      	str	r3, [r2, #0]
		if (i > Numcheck_Count + 1)
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	da02      	bge.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			i=0;
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000284 	.word	0x20000284
 8000ee0:	200002e8 	.word	0x200002e8
 8000ee4:	20000480 	.word	0x20000480

08000ee8 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	Mode+=1;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_SPI_TxRxCpltCallback+0x34>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_SPI_TxRxCpltCallback+0x34>)
 8000efa:	701a      	strb	r2, [r3, #0]
	if (Mode>1)
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <HAL_SPI_TxRxCpltCallback+0x34>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d902      	bls.n	8000f0a <HAL_SPI_TxRxCpltCallback+0x22>
	{
		Mode = 0;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_SPI_TxRxCpltCallback+0x34>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000f10:	f000 fd46 	bl	80019a0 <HAL_GPIO_WritePin>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200002e6 	.word	0x200002e6
 8000f20:	48000c00 	.word	0x48000c00

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <Error_Handler+0x8>
	...

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_MspInit+0x44>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_MspInit+0x44>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6613      	str	r3, [r2, #96]	; 0x60
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_MspInit+0x44>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_MspInit+0x44>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_MspInit+0x44>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_MspInit+0x44>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f66:	f000 fdfb 	bl	8001b60 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000

08000f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b09e      	sub	sp, #120	; 0x78
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	2254      	movs	r2, #84	; 0x54
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 fe8d 	bl	8004cb8 <memset>
  if(huart->Instance==LPUART1)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <HAL_UART_MspInit+0xa8>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d136      	bne.n	8001016 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000fa8:	2320      	movs	r3, #32
 8000faa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 fb11 	bl	80025dc <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fc0:	f7ff ffb0 	bl	8000f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <HAL_UART_MspInit+0xac>)
 8000fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc8:	4a16      	ldr	r2, [pc, #88]	; (8001024 <HAL_UART_MspInit+0xac>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <HAL_UART_MspInit+0xac>)
 8000fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_UART_MspInit+0xac>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe0:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_UART_MspInit+0xac>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_UART_MspInit+0xac>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ff4:	230c      	movs	r3, #12
 8000ff6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001004:	230c      	movs	r3, #12
 8001006:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800100c:	4619      	mov	r1, r3
 800100e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001012:	f000 fb2b 	bl	800166c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3778      	adds	r7, #120	; 0x78
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40008000 	.word	0x40008000
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a1b      	ldr	r2, [pc, #108]	; (80010b4 <HAL_SPI_MspInit+0x8c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d130      	bne.n	80010ac <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <HAL_SPI_MspInit+0x90>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	4a1a      	ldr	r2, [pc, #104]	; (80010b8 <HAL_SPI_MspInit+0x90>)
 8001050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001054:	6593      	str	r3, [r2, #88]	; 0x58
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_SPI_MspInit+0x90>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_SPI_MspInit+0x90>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <HAL_SPI_MspInit+0x90>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_SPI_MspInit+0x90>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800107a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800107e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800108c:	2306      	movs	r3, #6
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4809      	ldr	r0, [pc, #36]	; (80010bc <HAL_SPI_MspInit+0x94>)
 8001098:	f000 fae8 	bl	800166c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	2033      	movs	r0, #51	; 0x33
 80010a2:	f000 fa48 	bl	8001536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80010a6:	2033      	movs	r0, #51	; 0x33
 80010a8:	f000 fa5f 	bl	800156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	; 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40003c00 	.word	0x40003c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48000800 	.word	0x48000800

080010c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1f      	ldr	r2, [pc, #124]	; (800114c <HAL_TIM_Base_MspInit+0x8c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d10c      	bne.n	80010ec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <HAL_TIM_Base_MspInit+0x90>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d6:	4a1e      	ldr	r2, [pc, #120]	; (8001150 <HAL_TIM_Base_MspInit+0x90>)
 80010d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010dc:	6613      	str	r3, [r2, #96]	; 0x60
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <HAL_TIM_Base_MspInit+0x90>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010ea:	e02a      	b.n	8001142 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f4:	d10c      	bne.n	8001110 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_TIM_Base_MspInit+0x90>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <HAL_TIM_Base_MspInit+0x90>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6593      	str	r3, [r2, #88]	; 0x58
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <HAL_TIM_Base_MspInit+0x90>)
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
}
 800110e:	e018      	b.n	8001142 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <HAL_TIM_Base_MspInit+0x94>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d113      	bne.n	8001142 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <HAL_TIM_Base_MspInit+0x90>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111e:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <HAL_TIM_Base_MspInit+0x90>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6593      	str	r3, [r2, #88]	; 0x58
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_TIM_Base_MspInit+0x90>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	201d      	movs	r0, #29
 8001138:	f000 f9fd 	bl	8001536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800113c:	201d      	movs	r0, #29
 800113e:	f000 fa14 	bl	800156a <HAL_NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40012c00 	.word	0x40012c00
 8001150:	40021000 	.word	0x40021000
 8001154:	40000400 	.word	0x40000400

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f8ac 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <TIM3_IRQHandler+0x10>)
 80011b2:	f002 fa59 	bl	8003668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000284 	.word	0x20000284

080011c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011c8:	f000 fc02 	bl	80019d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <SPI3_IRQHandler+0x10>)
 80011d6:	f001 fda9 	bl	8002d2c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000188 	.word	0x20000188

080011e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <SystemInit+0x20>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <SystemInit+0x20>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800120a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800120c:	f7ff ffea 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <LoopForever+0x6>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	; (8001248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <LoopForever+0xe>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	; (8001254 <LoopForever+0x16>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001236:	f003 fd47 	bl	8004cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800123a:	f7ff f96b 	bl	8000514 <main>

0800123e <LoopForever>:

LoopForever:
    b LoopForever
 800123e:	e7fe      	b.n	800123e <LoopForever>
  ldr   r0, =_estack
 8001240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 800124c:	08004d78 	.word	0x08004d78
  ldr r2, =_sbss
 8001250:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001254:	20000498 	.word	0x20000498

08001258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC1_2_IRQHandler>

0800125a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f000 f95b 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f80e 	bl	800128c <HAL_InitTick>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	e001      	b.n	8001280 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800127c:	f7ff fe58 	bl	8000f30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001280:	79fb      	ldrb	r3, [r7, #7]

}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_InitTick+0x68>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d022      	beq.n	80012e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_InitTick+0x6c>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_InitTick+0x68>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80012b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f966 	bl	8001586 <HAL_SYSTICK_Config>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10f      	bne.n	80012e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	d809      	bhi.n	80012da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c6:	2200      	movs	r2, #0
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	f04f 30ff 	mov.w	r0, #4294967295
 80012ce:	f000 f932 	bl	8001536 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <HAL_InitTick+0x70>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	e007      	b.n	80012ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e004      	b.n	80012ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e001      	b.n	80012ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200000d4 	.word	0x200000d4
 80012f8:	200000cc 	.word	0x200000cc
 80012fc:	200000d0 	.word	0x200000d0

08001300 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_IncTick+0x1c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_IncTick+0x20>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4413      	add	r3, r2
 800130e:	4a03      	ldr	r2, [pc, #12]	; (800131c <HAL_IncTick+0x1c>)
 8001310:	6013      	str	r3, [r2, #0]
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	20000494 	.word	0x20000494
 8001320:	200000d4 	.word	0x200000d4

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000494 	.word	0x20000494

0800133c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff ffee 	bl	8001324 <HAL_GetTick>
 8001348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d004      	beq.n	8001360 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_Delay+0x40>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	4413      	add	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001360:	bf00      	nop
 8001362:	f7ff ffdf 	bl	8001324 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	429a      	cmp	r2, r3
 8001370:	d8f7      	bhi.n	8001362 <HAL_Delay+0x26>
  {
  }
}
 8001372:	bf00      	nop
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200000d4 	.word	0x200000d4

08001380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	f003 0307 	and.w	r3, r3, #7
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db0b      	blt.n	800140e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	4907      	ldr	r1, [pc, #28]	; (800141c <__NVIC_EnableIRQ+0x38>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	2001      	movs	r0, #1
 8001406:	fa00 f202 	lsl.w	r2, r0, r2
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000e100 	.word	0xe000e100

08001420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	db0a      	blt.n	800144a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	b2da      	uxtb	r2, r3
 8001438:	490c      	ldr	r1, [pc, #48]	; (800146c <__NVIC_SetPriority+0x4c>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	0112      	lsls	r2, r2, #4
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	440b      	add	r3, r1
 8001444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001448:	e00a      	b.n	8001460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4908      	ldr	r1, [pc, #32]	; (8001470 <__NVIC_SetPriority+0x50>)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	3b04      	subs	r3, #4
 8001458:	0112      	lsls	r2, r2, #4
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	440b      	add	r3, r1
 800145e:	761a      	strb	r2, [r3, #24]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f1c3 0307 	rsb	r3, r3, #7
 800148e:	2b04      	cmp	r3, #4
 8001490:	bf28      	it	cs
 8001492:	2304      	movcs	r3, #4
 8001494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3304      	adds	r3, #4
 800149a:	2b06      	cmp	r3, #6
 800149c:	d902      	bls.n	80014a4 <NVIC_EncodePriority+0x30>
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3b03      	subs	r3, #3
 80014a2:	e000      	b.n	80014a6 <NVIC_EncodePriority+0x32>
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	401a      	ands	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	43d9      	mvns	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	4313      	orrs	r3, r2
         );
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ec:	d301      	bcc.n	80014f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00f      	b.n	8001512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <SysTick_Config+0x40>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fa:	210f      	movs	r1, #15
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f7ff ff8e 	bl	8001420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <SysTick_Config+0x40>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <SysTick_Config+0x40>)
 800150c:	2207      	movs	r2, #7
 800150e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	e000e010 	.word	0xe000e010

08001520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff29 	bl	8001380 <__NVIC_SetPriorityGrouping>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001544:	f7ff ff40 	bl	80013c8 <__NVIC_GetPriorityGrouping>
 8001548:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff ff90 	bl	8001474 <NVIC_EncodePriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff5f 	bl	8001420 <__NVIC_SetPriority>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff33 	bl	80013e4 <__NVIC_EnableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffa4 	bl	80014dc <SysTick_Config>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d00d      	beq.n	80015d2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2204      	movs	r2, #4
 80015ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e047      	b.n	8001662 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 020e 	bic.w	r2, r2, #14
 80015e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0201 	bic.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001600:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f003 021f 	and.w	r2, r3, #31
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	2101      	movs	r1, #1
 8001610:	fa01 f202 	lsl.w	r2, r1, r2
 8001614:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800161e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00c      	beq.n	8001642 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001636:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001640:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	4798      	blx	r3
    }
  }
  return status;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800167a:	e15a      	b.n	8001932 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2101      	movs	r1, #1
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 814c 	beq.w	800192c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d005      	beq.n	80016ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d130      	bne.n	800170e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016e2:	2201      	movs	r2, #1
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	f003 0201 	and.w	r2, r3, #1
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b03      	cmp	r3, #3
 8001718:	d017      	beq.n	800174a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2203      	movs	r2, #3
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d123      	bne.n	800179e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3208      	adds	r2, #8
 800175e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	08da      	lsrs	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3208      	adds	r2, #8
 8001798:	6939      	ldr	r1, [r7, #16]
 800179a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2203      	movs	r2, #3
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0203 	and.w	r2, r3, #3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80a6 	beq.w	800192c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e0:	4b5b      	ldr	r3, [pc, #364]	; (8001950 <HAL_GPIO_Init+0x2e4>)
 80017e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e4:	4a5a      	ldr	r2, [pc, #360]	; (8001950 <HAL_GPIO_Init+0x2e4>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6613      	str	r3, [r2, #96]	; 0x60
 80017ec:	4b58      	ldr	r3, [pc, #352]	; (8001950 <HAL_GPIO_Init+0x2e4>)
 80017ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f8:	4a56      	ldr	r2, [pc, #344]	; (8001954 <HAL_GPIO_Init+0x2e8>)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001822:	d01f      	beq.n	8001864 <HAL_GPIO_Init+0x1f8>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a4c      	ldr	r2, [pc, #304]	; (8001958 <HAL_GPIO_Init+0x2ec>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d019      	beq.n	8001860 <HAL_GPIO_Init+0x1f4>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a4b      	ldr	r2, [pc, #300]	; (800195c <HAL_GPIO_Init+0x2f0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d013      	beq.n	800185c <HAL_GPIO_Init+0x1f0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a4a      	ldr	r2, [pc, #296]	; (8001960 <HAL_GPIO_Init+0x2f4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00d      	beq.n	8001858 <HAL_GPIO_Init+0x1ec>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a49      	ldr	r2, [pc, #292]	; (8001964 <HAL_GPIO_Init+0x2f8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_Init+0x1e8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a48      	ldr	r2, [pc, #288]	; (8001968 <HAL_GPIO_Init+0x2fc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d101      	bne.n	8001850 <HAL_GPIO_Init+0x1e4>
 800184c:	2305      	movs	r3, #5
 800184e:	e00a      	b.n	8001866 <HAL_GPIO_Init+0x1fa>
 8001850:	2306      	movs	r3, #6
 8001852:	e008      	b.n	8001866 <HAL_GPIO_Init+0x1fa>
 8001854:	2304      	movs	r3, #4
 8001856:	e006      	b.n	8001866 <HAL_GPIO_Init+0x1fa>
 8001858:	2303      	movs	r3, #3
 800185a:	e004      	b.n	8001866 <HAL_GPIO_Init+0x1fa>
 800185c:	2302      	movs	r3, #2
 800185e:	e002      	b.n	8001866 <HAL_GPIO_Init+0x1fa>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_GPIO_Init+0x1fa>
 8001864:	2300      	movs	r3, #0
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	f002 0203 	and.w	r2, r2, #3
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	4093      	lsls	r3, r2
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001876:	4937      	ldr	r1, [pc, #220]	; (8001954 <HAL_GPIO_Init+0x2e8>)
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001884:	4b39      	ldr	r3, [pc, #228]	; (800196c <HAL_GPIO_Init+0x300>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018a8:	4a30      	ldr	r2, [pc, #192]	; (800196c <HAL_GPIO_Init+0x300>)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018ae:	4b2f      	ldr	r3, [pc, #188]	; (800196c <HAL_GPIO_Init+0x300>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018d2:	4a26      	ldr	r2, [pc, #152]	; (800196c <HAL_GPIO_Init+0x300>)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018d8:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_GPIO_Init+0x300>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018fc:	4a1b      	ldr	r2, [pc, #108]	; (800196c <HAL_GPIO_Init+0x300>)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_GPIO_Init+0x300>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	43db      	mvns	r3, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001926:	4a11      	ldr	r2, [pc, #68]	; (800196c <HAL_GPIO_Init+0x300>)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	3301      	adds	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	f47f ae9d 	bne.w	800167c <HAL_GPIO_Init+0x10>
  }
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	40021000 	.word	0x40021000
 8001954:	40010000 	.word	0x40010000
 8001958:	48000400 	.word	0x48000400
 800195c:	48000800 	.word	0x48000800
 8001960:	48000c00 	.word	0x48000c00
 8001964:	48001000 	.word	0x48001000
 8001968:	48001400 	.word	0x48001400
 800196c:	40010400 	.word	0x40010400

08001970 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	e001      	b.n	8001992 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b0:	787b      	ldrb	r3, [r7, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d006      	beq.n	80019f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f806 	bl	8001a00 <HAL_GPIO_EXTI_Callback>
  }
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40010400 	.word	0x40010400

08001a00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d141      	bne.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a26:	4b4b      	ldr	r3, [pc, #300]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a32:	d131      	bne.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a34:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a3a:	4a46      	ldr	r2, [pc, #280]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a44:	4b43      	ldr	r3, [pc, #268]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a4c:	4a41      	ldr	r2, [pc, #260]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a54:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2232      	movs	r2, #50	; 0x32
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	4a3f      	ldr	r2, [pc, #252]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	0c9b      	lsrs	r3, r3, #18
 8001a66:	3301      	adds	r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a6a:	e002      	b.n	8001a72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a72:	4b38      	ldr	r3, [pc, #224]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7e:	d102      	bne.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f2      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a86:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a92:	d158      	bne.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e057      	b.n	8001b48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a98:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a9e:	4a2d      	ldr	r2, [pc, #180]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001aa8:	e04d      	b.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab0:	d141      	bne.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ab2:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001abe:	d131      	bne.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ac0:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ac6:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad0:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ad8:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ade:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2232      	movs	r2, #50	; 0x32
 8001ae6:	fb02 f303 	mul.w	r3, r2, r3
 8001aea:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001aec:	fba2 2303 	umull	r2, r3, r2, r3
 8001af0:	0c9b      	lsrs	r3, r3, #18
 8001af2:	3301      	adds	r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001af6:	e002      	b.n	8001afe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b0a:	d102      	bne.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f2      	bne.n	8001af8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1e:	d112      	bne.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e011      	b.n	8001b48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b34:	e007      	b.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40007000 	.word	0x40007000
 8001b58:	200000cc 	.word	0x200000cc
 8001b5c:	431bde83 	.word	0x431bde83

08001b60 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6e:	6093      	str	r3, [r2, #8]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40007000 	.word	0x40007000

08001b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e2fe      	b.n	8002190 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d075      	beq.n	8001c8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9e:	4b97      	ldr	r3, [pc, #604]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba8:	4b94      	ldr	r3, [pc, #592]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b0c      	cmp	r3, #12
 8001bb6:	d102      	bne.n	8001bbe <HAL_RCC_OscConfig+0x3e>
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d002      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x44>
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d10b      	bne.n	8001bdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	4b8d      	ldr	r3, [pc, #564]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d05b      	beq.n	8001c88 <HAL_RCC_OscConfig+0x108>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d157      	bne.n	8001c88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e2d9      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be4:	d106      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x74>
 8001be6:	4b85      	ldr	r3, [pc, #532]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a84      	ldr	r2, [pc, #528]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e01d      	b.n	8001c30 <HAL_RCC_OscConfig+0xb0>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x98>
 8001bfe:	4b7f      	ldr	r3, [pc, #508]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a7e      	ldr	r2, [pc, #504]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b7c      	ldr	r3, [pc, #496]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a7b      	ldr	r2, [pc, #492]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_OscConfig+0xb0>
 8001c18:	4b78      	ldr	r3, [pc, #480]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a77      	ldr	r2, [pc, #476]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b75      	ldr	r3, [pc, #468]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a74      	ldr	r2, [pc, #464]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff fb74 	bl	8001324 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff fb70 	bl	8001324 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e29e      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c52:	4b6a      	ldr	r3, [pc, #424]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0xc0>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff fb60 	bl	8001324 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff fb5c 	bl	8001324 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	; 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e28a      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c7a:	4b60      	ldr	r3, [pc, #384]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0xe8>
 8001c86:	e000      	b.n	8001c8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d075      	beq.n	8001d82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c96:	4b59      	ldr	r3, [pc, #356]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca0:	4b56      	ldr	r3, [pc, #344]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b0c      	cmp	r3, #12
 8001cae:	d102      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x136>
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d002      	beq.n	8001cbc <HAL_RCC_OscConfig+0x13c>
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d11f      	bne.n	8001cfc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cbc:	4b4f      	ldr	r3, [pc, #316]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x154>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e25d      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	4946      	ldr	r1, [pc, #280]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ce8:	4b45      	ldr	r3, [pc, #276]	; (8001e00 <HAL_RCC_OscConfig+0x280>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff facd 	bl	800128c <HAL_InitTick>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d043      	beq.n	8001d80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e249      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d023      	beq.n	8001d4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d04:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a3c      	ldr	r2, [pc, #240]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff fb08 	bl	8001324 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d18:	f7ff fb04 	bl	8001324 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e232      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d2a:	4b34      	ldr	r3, [pc, #208]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	061b      	lsls	r3, r3, #24
 8001d44:	492d      	ldr	r1, [pc, #180]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]
 8001d4a:	e01a      	b.n	8001d82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4c:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a2a      	ldr	r2, [pc, #168]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001d52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff fae4 	bl	8001324 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d60:	f7ff fae0 	bl	8001324 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e20e      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d72:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1e0>
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d041      	beq.n	8001e12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d01c      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9c:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da6:	f7ff fabd 	bl	8001324 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dae:	f7ff fab9 	bl	8001324 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e1e7      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0ef      	beq.n	8001dae <HAL_RCC_OscConfig+0x22e>
 8001dce:	e020      	b.n	8001e12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd6:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <HAL_RCC_OscConfig+0x27c>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de0:	f7ff faa0 	bl	8001324 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de6:	e00d      	b.n	8001e04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de8:	f7ff fa9c 	bl	8001324 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d906      	bls.n	8001e04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1ca      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	200000d0 	.word	0x200000d0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e04:	4b8c      	ldr	r3, [pc, #560]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1ea      	bne.n	8001de8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80a6 	beq.w	8001f6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e24:	4b84      	ldr	r3, [pc, #528]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_OscConfig+0x2b4>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x2b6>
 8001e34:	2300      	movs	r3, #0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00d      	beq.n	8001e56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	4b7f      	ldr	r3, [pc, #508]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	4a7e      	ldr	r2, [pc, #504]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e44:	6593      	str	r3, [r2, #88]	; 0x58
 8001e46:	4b7c      	ldr	r3, [pc, #496]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e52:	2301      	movs	r3, #1
 8001e54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e56:	4b79      	ldr	r3, [pc, #484]	; (800203c <HAL_RCC_OscConfig+0x4bc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d118      	bne.n	8001e94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e62:	4b76      	ldr	r3, [pc, #472]	; (800203c <HAL_RCC_OscConfig+0x4bc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a75      	ldr	r2, [pc, #468]	; (800203c <HAL_RCC_OscConfig+0x4bc>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fa59 	bl	8001324 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e76:	f7ff fa55 	bl	8001324 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e183      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e88:	4b6c      	ldr	r3, [pc, #432]	; (800203c <HAL_RCC_OscConfig+0x4bc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d108      	bne.n	8001eae <HAL_RCC_OscConfig+0x32e>
 8001e9c:	4b66      	ldr	r3, [pc, #408]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea2:	4a65      	ldr	r2, [pc, #404]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eac:	e024      	b.n	8001ef8 <HAL_RCC_OscConfig+0x378>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d110      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x358>
 8001eb6:	4b60      	ldr	r3, [pc, #384]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebc:	4a5e      	ldr	r2, [pc, #376]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ec6:	4b5c      	ldr	r3, [pc, #368]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ecc:	4a5a      	ldr	r2, [pc, #360]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ed6:	e00f      	b.n	8001ef8 <HAL_RCC_OscConfig+0x378>
 8001ed8:	4b57      	ldr	r3, [pc, #348]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ede:	4a56      	ldr	r2, [pc, #344]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ee8:	4b53      	ldr	r3, [pc, #332]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eee:	4a52      	ldr	r2, [pc, #328]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d016      	beq.n	8001f2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7ff fa10 	bl	8001324 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f08:	f7ff fa0c 	bl	8001324 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e138      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f1e:	4b46      	ldr	r3, [pc, #280]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0ed      	beq.n	8001f08 <HAL_RCC_OscConfig+0x388>
 8001f2c:	e015      	b.n	8001f5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2e:	f7ff f9f9 	bl	8001324 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7ff f9f5 	bl	8001324 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e121      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f4c:	4b3a      	ldr	r3, [pc, #232]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1ed      	bne.n	8001f36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f5a:	7ffb      	ldrb	r3, [r7, #31]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d105      	bne.n	8001f6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f60:	4b35      	ldr	r3, [pc, #212]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	4a34      	ldr	r2, [pc, #208]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0320 	and.w	r3, r3, #32
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d03c      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01c      	beq.n	8001fba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f80:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001f82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f86:	4a2c      	ldr	r2, [pc, #176]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f90:	f7ff f9c8 	bl	8001324 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f98:	f7ff f9c4 	bl	8001324 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0f2      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001faa:	4b23      	ldr	r3, [pc, #140]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ef      	beq.n	8001f98 <HAL_RCC_OscConfig+0x418>
 8001fb8:	e01b      	b.n	8001ff2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fba:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fc0:	4a1d      	ldr	r2, [pc, #116]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fca:	f7ff f9ab 	bl	8001324 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fd2:	f7ff f9a7 	bl	8001324 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0d5      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fe4:	4b14      	ldr	r3, [pc, #80]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1ef      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80c9 	beq.w	800218e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b0c      	cmp	r3, #12
 8002006:	f000 8083 	beq.w	8002110 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d15e      	bne.n	80020d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <HAL_RCC_OscConfig+0x4b8>)
 8002018:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800201c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff f981 	bl	8001324 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002024:	e00c      	b.n	8002040 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff f97d 	bl	8001324 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d905      	bls.n	8002040 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e0ab      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
 8002038:	40021000 	.word	0x40021000
 800203c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002040:	4b55      	ldr	r3, [pc, #340]	; (8002198 <HAL_RCC_OscConfig+0x618>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ec      	bne.n	8002026 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204c:	4b52      	ldr	r3, [pc, #328]	; (8002198 <HAL_RCC_OscConfig+0x618>)
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	4b52      	ldr	r3, [pc, #328]	; (800219c <HAL_RCC_OscConfig+0x61c>)
 8002052:	4013      	ands	r3, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6a11      	ldr	r1, [r2, #32]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800205c:	3a01      	subs	r2, #1
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	4311      	orrs	r1, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002066:	0212      	lsls	r2, r2, #8
 8002068:	4311      	orrs	r1, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800206e:	0852      	lsrs	r2, r2, #1
 8002070:	3a01      	subs	r2, #1
 8002072:	0552      	lsls	r2, r2, #21
 8002074:	4311      	orrs	r1, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800207a:	0852      	lsrs	r2, r2, #1
 800207c:	3a01      	subs	r2, #1
 800207e:	0652      	lsls	r2, r2, #25
 8002080:	4311      	orrs	r1, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002086:	06d2      	lsls	r2, r2, #27
 8002088:	430a      	orrs	r2, r1
 800208a:	4943      	ldr	r1, [pc, #268]	; (8002198 <HAL_RCC_OscConfig+0x618>)
 800208c:	4313      	orrs	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002090:	4b41      	ldr	r3, [pc, #260]	; (8002198 <HAL_RCC_OscConfig+0x618>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a40      	ldr	r2, [pc, #256]	; (8002198 <HAL_RCC_OscConfig+0x618>)
 8002096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800209a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800209c:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <HAL_RCC_OscConfig+0x618>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a3d      	ldr	r2, [pc, #244]	; (8002198 <HAL_RCC_OscConfig+0x618>)
 80020a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7ff f93c 	bl	8001324 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b0:	f7ff f938 	bl	8001324 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e066      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c2:	4b35      	ldr	r3, [pc, #212]	; (8002198 <HAL_RCC_OscConfig+0x618>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x530>
 80020ce:	e05e      	b.n	800218e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d0:	4b31      	ldr	r3, [pc, #196]	; (8002198 <HAL_RCC_OscConfig+0x618>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a30      	ldr	r2, [pc, #192]	; (8002198 <HAL_RCC_OscConfig+0x618>)
 80020d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7ff f922 	bl	8001324 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e4:	f7ff f91e 	bl	8001324 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e04c      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f6:	4b28      	ldr	r3, [pc, #160]	; (8002198 <HAL_RCC_OscConfig+0x618>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <HAL_RCC_OscConfig+0x618>)
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	4924      	ldr	r1, [pc, #144]	; (8002198 <HAL_RCC_OscConfig+0x618>)
 8002108:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <HAL_RCC_OscConfig+0x620>)
 800210a:	4013      	ands	r3, r2
 800210c:	60cb      	str	r3, [r1, #12]
 800210e:	e03e      	b.n	800218e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e039      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800211c:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <HAL_RCC_OscConfig+0x618>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f003 0203 	and.w	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	429a      	cmp	r2, r3
 800212e:	d12c      	bne.n	800218a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	3b01      	subs	r3, #1
 800213c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d123      	bne.n	800218a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d11b      	bne.n	800218a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800215e:	429a      	cmp	r2, r3
 8002160:	d113      	bne.n	800218a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	085b      	lsrs	r3, r3, #1
 800216e:	3b01      	subs	r3, #1
 8002170:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d109      	bne.n	800218a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	3b01      	subs	r3, #1
 8002184:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3720      	adds	r7, #32
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	019f800c 	.word	0x019f800c
 80021a0:	feeefffc 	.word	0xfeeefffc

080021a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e11e      	b.n	80023fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021bc:	4b91      	ldr	r3, [pc, #580]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d910      	bls.n	80021ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b8e      	ldr	r3, [pc, #568]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 020f 	bic.w	r2, r3, #15
 80021d2:	498c      	ldr	r1, [pc, #560]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b8a      	ldr	r3, [pc, #552]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e106      	b.n	80023fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d073      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d129      	bne.n	8002254 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002200:	4b81      	ldr	r3, [pc, #516]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0f4      	b.n	80023fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002210:	f000 f99e 	bl	8002550 <RCC_GetSysClockFreqFromPLLSource>
 8002214:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4a7c      	ldr	r2, [pc, #496]	; (800240c <HAL_RCC_ClockConfig+0x268>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d93f      	bls.n	800229e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800221e:	4b7a      	ldr	r3, [pc, #488]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d009      	beq.n	800223e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002232:	2b00      	cmp	r3, #0
 8002234:	d033      	beq.n	800229e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800223a:	2b00      	cmp	r3, #0
 800223c:	d12f      	bne.n	800229e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800223e:	4b72      	ldr	r3, [pc, #456]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002246:	4a70      	ldr	r2, [pc, #448]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 8002248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	e024      	b.n	800229e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d107      	bne.n	800226c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800225c:	4b6a      	ldr	r3, [pc, #424]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d109      	bne.n	800227c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0c6      	b.n	80023fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800226c:	4b66      	ldr	r3, [pc, #408]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0be      	b.n	80023fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800227c:	f000 f8ce 	bl	800241c <HAL_RCC_GetSysClockFreq>
 8002280:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4a61      	ldr	r2, [pc, #388]	; (800240c <HAL_RCC_ClockConfig+0x268>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d909      	bls.n	800229e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800228a:	4b5f      	ldr	r3, [pc, #380]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002292:	4a5d      	ldr	r2, [pc, #372]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 8002294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002298:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800229e:	4b5a      	ldr	r3, [pc, #360]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f023 0203 	bic.w	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4957      	ldr	r1, [pc, #348]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b0:	f7ff f838 	bl	8001324 <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b8:	f7ff f834 	bl	8001324 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e095      	b.n	80023fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	4b4e      	ldr	r3, [pc, #312]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 020c 	and.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1eb      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d023      	beq.n	8002334 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f8:	4b43      	ldr	r3, [pc, #268]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a42      	ldr	r2, [pc, #264]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 80022fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002302:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002310:	4b3d      	ldr	r3, [pc, #244]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002318:	4a3b      	ldr	r2, [pc, #236]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 800231a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800231e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002320:	4b39      	ldr	r3, [pc, #228]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4936      	ldr	r1, [pc, #216]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
 8002332:	e008      	b.n	8002346 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2b80      	cmp	r3, #128	; 0x80
 8002338:	d105      	bne.n	8002346 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800233a:	4b33      	ldr	r3, [pc, #204]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	4a32      	ldr	r2, [pc, #200]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 8002340:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002344:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002346:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d21d      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f023 020f 	bic.w	r2, r3, #15
 800235c:	4929      	ldr	r1, [pc, #164]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	4313      	orrs	r3, r2
 8002362:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002364:	f7fe ffde 	bl	8001324 <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7fe ffda 	bl	8001324 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e03b      	b.n	80023fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <HAL_RCC_ClockConfig+0x260>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d1ed      	bne.n	800236c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4917      	ldr	r1, [pc, #92]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	490f      	ldr	r1, [pc, #60]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ce:	f000 f825 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_RCC_ClockConfig+0x264>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	490c      	ldr	r1, [pc, #48]	; (8002410 <HAL_RCC_ClockConfig+0x26c>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	f003 031f 	and.w	r3, r3, #31
 80023e6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_RCC_ClockConfig+0x270>)
 80023ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_RCC_ClockConfig+0x274>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe ff4a 	bl	800128c <HAL_InitTick>
 80023f8:	4603      	mov	r3, r0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40022000 	.word	0x40022000
 8002408:	40021000 	.word	0x40021000
 800240c:	04c4b400 	.word	0x04c4b400
 8002410:	08004d28 	.word	0x08004d28
 8002414:	200000cc 	.word	0x200000cc
 8002418:	200000d0 	.word	0x200000d0

0800241c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002422:	4b2c      	ldr	r3, [pc, #176]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b04      	cmp	r3, #4
 800242c:	d102      	bne.n	8002434 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800242e:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	e047      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002434:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b08      	cmp	r3, #8
 800243e:	d102      	bne.n	8002446 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002440:	4b26      	ldr	r3, [pc, #152]	; (80024dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	e03e      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002446:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b0c      	cmp	r3, #12
 8002450:	d136      	bne.n	80024c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800245c:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	3301      	adds	r3, #1
 8002468:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b03      	cmp	r3, #3
 800246e:	d10c      	bne.n	800248a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002470:	4a1a      	ldr	r2, [pc, #104]	; (80024dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	4a16      	ldr	r2, [pc, #88]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800247a:	68d2      	ldr	r2, [r2, #12]
 800247c:	0a12      	lsrs	r2, r2, #8
 800247e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	617b      	str	r3, [r7, #20]
      break;
 8002488:	e00c      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800248a:	4a13      	ldr	r2, [pc, #76]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002492:	4a10      	ldr	r2, [pc, #64]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002494:	68d2      	ldr	r2, [r2, #12]
 8002496:	0a12      	lsrs	r2, r2, #8
 8002498:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800249c:	fb02 f303 	mul.w	r3, r2, r3
 80024a0:	617b      	str	r3, [r7, #20]
      break;
 80024a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0e5b      	lsrs	r3, r3, #25
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	3301      	adds	r3, #1
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	e001      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024c4:	693b      	ldr	r3, [r7, #16]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	00f42400 	.word	0x00f42400
 80024dc:	016e3600 	.word	0x016e3600

080024e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	200000cc 	.word	0x200000cc

080024f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024fc:	f7ff fff0 	bl	80024e0 <HAL_RCC_GetHCLKFreq>
 8002500:	4602      	mov	r2, r0
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	4904      	ldr	r1, [pc, #16]	; (8002520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	08004d38 	.word	0x08004d38

08002524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002528:	f7ff ffda 	bl	80024e0 <HAL_RCC_GetHCLKFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	0adb      	lsrs	r3, r3, #11
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4904      	ldr	r1, [pc, #16]	; (800254c <HAL_RCC_GetPCLK2Freq+0x28>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000
 800254c:	08004d38 	.word	0x08004d38

08002550 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002556:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3301      	adds	r3, #1
 800256c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d10c      	bne.n	800258e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002574:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800257e:	68d2      	ldr	r2, [r2, #12]
 8002580:	0a12      	lsrs	r2, r2, #8
 8002582:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	617b      	str	r3, [r7, #20]
    break;
 800258c:	e00c      	b.n	80025a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800258e:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002598:	68d2      	ldr	r2, [r2, #12]
 800259a:	0a12      	lsrs	r2, r2, #8
 800259c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]
    break;
 80025a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0e5b      	lsrs	r3, r3, #25
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	3301      	adds	r3, #1
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025c2:	687b      	ldr	r3, [r7, #4]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40021000 	.word	0x40021000
 80025d4:	016e3600 	.word	0x016e3600
 80025d8:	00f42400 	.word	0x00f42400

080025dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025e4:	2300      	movs	r3, #0
 80025e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025e8:	2300      	movs	r3, #0
 80025ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8098 	beq.w	800272a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fe:	4b43      	ldr	r3, [pc, #268]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10d      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	4b40      	ldr	r3, [pc, #256]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	4a3f      	ldr	r2, [pc, #252]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002614:	6593      	str	r3, [r2, #88]	; 0x58
 8002616:	4b3d      	ldr	r3, [pc, #244]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002622:	2301      	movs	r3, #1
 8002624:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002626:	4b3a      	ldr	r3, [pc, #232]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a39      	ldr	r2, [pc, #228]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800262c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002630:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002632:	f7fe fe77 	bl	8001324 <HAL_GetTick>
 8002636:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002638:	e009      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263a:	f7fe fe73 	bl	8001324 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d902      	bls.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	74fb      	strb	r3, [r7, #19]
        break;
 800264c:	e005      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800264e:	4b30      	ldr	r3, [pc, #192]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0ef      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800265a:	7cfb      	ldrb	r3, [r7, #19]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d159      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002660:	4b2a      	ldr	r3, [pc, #168]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d01e      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	d019      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800267c:	4b23      	ldr	r3, [pc, #140]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002686:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002688:	4b20      	ldr	r3, [pc, #128]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	4a1f      	ldr	r2, [pc, #124]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002698:	4b1c      	ldr	r3, [pc, #112]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	4a1b      	ldr	r2, [pc, #108]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026a8:	4a18      	ldr	r2, [pc, #96]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7fe fe33 	bl	8001324 <HAL_GetTick>
 80026be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c0:	e00b      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c2:	f7fe fe2f 	bl	8001324 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d902      	bls.n	80026da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	74fb      	strb	r3, [r7, #19]
            break;
 80026d8:	e006      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ec      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10b      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fc:	4903      	ldr	r1, [pc, #12]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002704:	e008      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	74bb      	strb	r3, [r7, #18]
 800270a:	e005      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800270c:	40021000 	.word	0x40021000
 8002710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002718:	7c7b      	ldrb	r3, [r7, #17]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d105      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271e:	4ba7      	ldr	r3, [pc, #668]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	4aa6      	ldr	r2, [pc, #664]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002728:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002736:	4ba1      	ldr	r3, [pc, #644]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273c:	f023 0203 	bic.w	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	499d      	ldr	r1, [pc, #628]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002758:	4b98      	ldr	r3, [pc, #608]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	f023 020c 	bic.w	r2, r3, #12
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	4995      	ldr	r1, [pc, #596]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800277a:	4b90      	ldr	r3, [pc, #576]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002780:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	498c      	ldr	r1, [pc, #560]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800279c:	4b87      	ldr	r3, [pc, #540]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	4984      	ldr	r1, [pc, #528]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027be:	4b7f      	ldr	r3, [pc, #508]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	497b      	ldr	r1, [pc, #492]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027e0:	4b76      	ldr	r3, [pc, #472]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	4973      	ldr	r1, [pc, #460]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002802:	4b6e      	ldr	r3, [pc, #440]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002808:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	496a      	ldr	r1, [pc, #424]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002824:	4b65      	ldr	r3, [pc, #404]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	4962      	ldr	r1, [pc, #392]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002846:	4b5d      	ldr	r3, [pc, #372]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	4959      	ldr	r1, [pc, #356]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002868:	4b54      	ldr	r3, [pc, #336]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	4951      	ldr	r1, [pc, #324]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800288a:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002890:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	4948      	ldr	r1, [pc, #288]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d015      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028ac:	4b43      	ldr	r3, [pc, #268]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4940      	ldr	r1, [pc, #256]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ca:	d105      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028cc:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a3a      	ldr	r2, [pc, #232]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d015      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028e4:	4b35      	ldr	r3, [pc, #212]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f2:	4932      	ldr	r1, [pc, #200]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002902:	d105      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002904:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4a2c      	ldr	r2, [pc, #176]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800290e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d015      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800291c:	4b27      	ldr	r3, [pc, #156]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	4924      	ldr	r1, [pc, #144]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800293a:	d105      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800293c:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4a1e      	ldr	r2, [pc, #120]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002946:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d015      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	4916      	ldr	r1, [pc, #88]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002972:	d105      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800297e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d019      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029aa:	d109      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a02      	ldr	r2, [pc, #8]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b6:	60d3      	str	r3, [r2, #12]
 80029b8:	e002      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d015      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029cc:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	4926      	ldr	r1, [pc, #152]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ea:	d105      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029ec:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d015      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002a04:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	4918      	ldr	r1, [pc, #96]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a22:	d105      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a24:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d015      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a3c:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	490a      	ldr	r1, [pc, #40]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a5a:	d105      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a68:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000

08002a78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e09d      	b.n	8002bc6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d108      	bne.n	8002aa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a9a:	d009      	beq.n	8002ab0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	61da      	str	r2, [r3, #28]
 8002aa2:	e005      	b.n	8002ab0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe faac 	bl	8001028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002af0:	d902      	bls.n	8002af8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	e002      	b.n	8002afe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b06:	d007      	beq.n	8002b18 <HAL_SPI_Init+0xa0>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b10:	d002      	beq.n	8002b18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	ea42 0103 	orr.w	r1, r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	0c1b      	lsrs	r3, r3, #16
 8002b74:	f003 0204 	and.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b94:	ea42 0103 	orr.w	r1, r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002be8:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bf0:	7dbb      	ldrb	r3, [r7, #22]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d00d      	beq.n	8002c12 <HAL_SPI_TransmitReceive_IT+0x42>
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bfc:	d106      	bne.n	8002c0c <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <HAL_SPI_TransmitReceive_IT+0x3c>
 8002c06:	7dbb      	ldrb	r3, [r7, #22]
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d002      	beq.n	8002c12 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c10:	e07d      	b.n	8002d0e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_SPI_TransmitReceive_IT+0x54>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_SPI_TransmitReceive_IT+0x54>
 8002c1e:	887b      	ldrh	r3, [r7, #2]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d102      	bne.n	8002c2a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c28:	e071      	b.n	8002d0e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_SPI_TransmitReceive_IT+0x68>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e06b      	b.n	8002d10 <HAL_SPI_TransmitReceive_IT+0x140>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d003      	beq.n	8002c54 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2205      	movs	r2, #5
 8002c50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	887a      	ldrh	r2, [r7, #2]
 8002c64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	887a      	ldrh	r2, [r7, #2]
 8002c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	887a      	ldrh	r2, [r7, #2]
 8002c76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	887a      	ldrh	r2, [r7, #2]
 8002c7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c8a:	d906      	bls.n	8002c9a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a23      	ldr	r2, [pc, #140]	; (8002d1c <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002c90:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002c96:	651a      	str	r2, [r3, #80]	; 0x50
 8002c98:	e005      	b.n	8002ca6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4a21      	ldr	r2, [pc, #132]	; (8002d24 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002c9e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <HAL_SPI_TransmitReceive_IT+0x158>)
 8002ca4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cae:	d802      	bhi.n	8002cb6 <HAL_SPI_TransmitReceive_IT+0xe6>
 8002cb0:	887b      	ldrh	r3, [r7, #2]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d908      	bls.n	8002cc8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	e007      	b.n	8002cd8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cd6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d007      	beq.n	8002cf6 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cf4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002d0c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	080030b7 	.word	0x080030b7
 8002d20:	0800311d 	.word	0x0800311d
 8002d24:	08002f67 	.word	0x08002f67
 8002d28:	08003025 	.word	0x08003025

08002d2c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10e      	bne.n	8002d6c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d009      	beq.n	8002d6c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4798      	blx	r3
    return;
 8002d6a:	e0ce      	b.n	8002f0a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_SPI_IRQHandler+0x5e>
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d004      	beq.n	8002d8a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
    return;
 8002d88:	e0bf      	b.n	8002f0a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <HAL_SPI_IRQHandler+0x7e>
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d105      	bne.n	8002daa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80b0 	beq.w	8002f0a <HAL_SPI_IRQHandler+0x1de>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80aa 	beq.w	8002f0a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d023      	beq.n	8002e08 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d011      	beq.n	8002df0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd0:	f043 0204 	orr.w	r2, r3, #4
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	e00b      	b.n	8002e08 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	693b      	ldr	r3, [r7, #16]
        return;
 8002e06:	e080      	b.n	8002f0a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d014      	beq.n	8002e3c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4a:	f043 0208 	orr.w	r2, r3, #8
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d04f      	beq.n	8002f08 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e76:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d104      	bne.n	8002e94 <HAL_SPI_IRQHandler+0x168>
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d034      	beq.n	8002efe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0203 	bic.w	r2, r2, #3
 8002ea2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d011      	beq.n	8002ed0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb0:	4a17      	ldr	r2, [pc, #92]	; (8002f10 <HAL_SPI_IRQHandler+0x1e4>)
 8002eb2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe fb70 	bl	800159e <HAL_DMA_Abort_IT>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d016      	beq.n	8002f06 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	4a0c      	ldr	r2, [pc, #48]	; (8002f10 <HAL_SPI_IRQHandler+0x1e4>)
 8002ede:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe fb5a 	bl	800159e <HAL_DMA_Abort_IT>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002efc:	e003      	b.n	8002f06 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f812 	bl	8002f28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002f04:	e000      	b.n	8002f08 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002f06:	bf00      	nop
    return;
 8002f08:	bf00      	nop
  }
}
 8002f0a:	3720      	adds	r7, #32
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	08002f3d 	.word	0x08002f3d

08002f14 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f7ff ffe5 	bl	8002f28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d923      	bls.n	8002fc2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	b292      	uxth	r2, r2
 8002f86:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	1c9a      	adds	r2, r3, #2
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b02      	subs	r3, #2
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d11f      	bne.n	8002ff0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	e016      	b.n	8002ff0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f103 020c 	add.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	7812      	ldrb	r2, [r2, #0]
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10f      	bne.n	800301c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800300a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fa14 	bl	8003444 <SPI_CloseRxTx_ISR>
    }
  }
}
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d912      	bls.n	800305c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	881a      	ldrh	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	1c9a      	adds	r2, r3, #2
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b02      	subs	r3, #2
 8003054:	b29a      	uxth	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	87da      	strh	r2, [r3, #62]	; 0x3e
 800305a:	e012      	b.n	8003082 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	330c      	adds	r3, #12
 8003066:	7812      	ldrb	r2, [r2, #0]
 8003068:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d110      	bne.n	80030ae <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800309a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d102      	bne.n	80030ae <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f9cb 	bl	8003444 <SPI_CloseRxTx_ISR>
    }
  }
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	b292      	uxth	r2, r2
 80030ca:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	1c9a      	adds	r2, r3, #2
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10f      	bne.n	8003114 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003102:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f998 	bl	8003444 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	881a      	ldrh	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	1c9a      	adds	r2, r3, #2
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d110      	bne.n	8003174 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003160:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d102      	bne.n	8003174 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f968 	bl	8003444 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800318c:	f7fe f8ca 	bl	8001324 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	4413      	add	r3, r2
 800319a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800319c:	f7fe f8c2 	bl	8001324 <HAL_GetTick>
 80031a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031a2:	4b39      	ldr	r3, [pc, #228]	; (8003288 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	015b      	lsls	r3, r3, #5
 80031a8:	0d1b      	lsrs	r3, r3, #20
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	fb02 f303 	mul.w	r3, r2, r3
 80031b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031b2:	e054      	b.n	800325e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ba:	d050      	beq.n	800325e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031bc:	f7fe f8b2 	bl	8001324 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d902      	bls.n	80031d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d13d      	bne.n	800324e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ea:	d111      	bne.n	8003210 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f4:	d004      	beq.n	8003200 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fe:	d107      	bne.n	8003210 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800320e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003218:	d10f      	bne.n	800323a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003238:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e017      	b.n	800327e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	3b01      	subs	r3, #1
 800325c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4013      	ands	r3, r2
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	429a      	cmp	r2, r3
 800326c:	bf0c      	ite	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	2300      	movne	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	429a      	cmp	r2, r3
 800327a:	d19b      	bne.n	80031b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	200000cc 	.word	0x200000cc

0800328c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	; 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800329e:	f7fe f841 	bl	8001324 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80032ae:	f7fe f839 	bl	8001324 <HAL_GetTick>
 80032b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	330c      	adds	r3, #12
 80032ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032bc:	4b3d      	ldr	r3, [pc, #244]	; (80033b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00da      	lsls	r2, r3, #3
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	0d1b      	lsrs	r3, r3, #20
 80032cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ce:	fb02 f303 	mul.w	r3, r2, r3
 80032d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032d4:	e060      	b.n	8003398 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80032dc:	d107      	bne.n	80032ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d050      	beq.n	8003398 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032f6:	f7fe f815 	bl	8001324 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003302:	429a      	cmp	r2, r3
 8003304:	d902      	bls.n	800330c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	2b00      	cmp	r3, #0
 800330a:	d13d      	bne.n	8003388 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800331a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003324:	d111      	bne.n	800334a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800332e:	d004      	beq.n	800333a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003338:	d107      	bne.n	800334a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003348:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003352:	d10f      	bne.n	8003374 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003372:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e010      	b.n	80033aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	3b01      	subs	r3, #1
 8003396:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4013      	ands	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d196      	bne.n	80032d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3728      	adds	r7, #40	; 0x28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	200000cc 	.word	0x200000cc

080033b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f7ff ff5b 	bl	800328c <SPI_WaitFifoStateUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d007      	beq.n	80033ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e0:	f043 0220 	orr.w	r2, r3, #32
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e027      	b.n	800343c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2200      	movs	r2, #0
 80033f4:	2180      	movs	r1, #128	; 0x80
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f7ff fec0 	bl	800317c <SPI_WaitFlagStateUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d007      	beq.n	8003412 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003406:	f043 0220 	orr.w	r2, r3, #32
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e014      	b.n	800343c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2200      	movs	r2, #0
 800341a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f7ff ff34 	bl	800328c <SPI_WaitFifoStateUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d007      	beq.n	800343a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342e:	f043 0220 	orr.w	r2, r3, #32
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e000      	b.n	800343c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800344c:	f7fd ff6a 	bl	8001324 <HAL_GetTick>
 8003450:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0220 	bic.w	r2, r2, #32
 8003460:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	2164      	movs	r1, #100	; 0x64
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff ffa6 	bl	80033b8 <SPI_EndRxTxTransaction>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003476:	f043 0220 	orr.w	r2, r3, #32
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003482:	2b00      	cmp	r3, #0
 8003484:	d115      	bne.n	80034b2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b04      	cmp	r3, #4
 8003490:	d107      	bne.n	80034a2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff fd3a 	bl	8002f14 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80034a0:	e00e      	b.n	80034c0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd fd1c 	bl	8000ee8 <HAL_SPI_TxRxCpltCallback>
}
 80034b0:	e006      	b.n	80034c0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff fd34 	bl	8002f28 <HAL_SPI_ErrorCallback>
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e049      	b.n	800356e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd fde6 	bl	80010c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f000 fb3c 	bl	8003b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	d001      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e054      	b.n	800363a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a26      	ldr	r2, [pc, #152]	; (8003648 <HAL_TIM_Base_Start_IT+0xd0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d022      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x80>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ba:	d01d      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x80>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a22      	ldr	r2, [pc, #136]	; (800364c <HAL_TIM_Base_Start_IT+0xd4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d018      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x80>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a21      	ldr	r2, [pc, #132]	; (8003650 <HAL_TIM_Base_Start_IT+0xd8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d013      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x80>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a1f      	ldr	r2, [pc, #124]	; (8003654 <HAL_TIM_Base_Start_IT+0xdc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00e      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x80>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1e      	ldr	r2, [pc, #120]	; (8003658 <HAL_TIM_Base_Start_IT+0xe0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d009      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x80>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1c      	ldr	r2, [pc, #112]	; (800365c <HAL_TIM_Base_Start_IT+0xe4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x80>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1b      	ldr	r2, [pc, #108]	; (8003660 <HAL_TIM_Base_Start_IT+0xe8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d115      	bne.n	8003624 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	4b19      	ldr	r3, [pc, #100]	; (8003664 <HAL_TIM_Base_Start_IT+0xec>)
 8003600:	4013      	ands	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b06      	cmp	r3, #6
 8003608:	d015      	beq.n	8003636 <HAL_TIM_Base_Start_IT+0xbe>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003610:	d011      	beq.n	8003636 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0201 	orr.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003622:	e008      	b.n	8003636 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	e000      	b.n	8003638 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003636:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40012c00 	.word	0x40012c00
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40013400 	.word	0x40013400
 800365c:	40014000 	.word	0x40014000
 8003660:	40015000 	.word	0x40015000
 8003664:	00010007 	.word	0x00010007

08003668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d020      	beq.n	80036cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01b      	beq.n	80036cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0202 	mvn.w	r2, #2
 800369c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fa48 	bl	8003b48 <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fa3a 	bl	8003b34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fa4b 	bl	8003b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d020      	beq.n	8003718 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01b      	beq.n	8003718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0204 	mvn.w	r2, #4
 80036e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2202      	movs	r2, #2
 80036ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fa22 	bl	8003b48 <HAL_TIM_IC_CaptureCallback>
 8003704:	e005      	b.n	8003712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fa14 	bl	8003b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fa25 	bl	8003b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d020      	beq.n	8003764 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0208 	mvn.w	r2, #8
 8003734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2204      	movs	r2, #4
 800373a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f9fc 	bl	8003b48 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f9ee 	bl	8003b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f9ff 	bl	8003b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b00      	cmp	r3, #0
 800376c:	d020      	beq.n	80037b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0210 	mvn.w	r2, #16
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2208      	movs	r2, #8
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f9d6 	bl	8003b48 <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f9c8 	bl	8003b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f9d9 	bl	8003b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00c      	beq.n	80037d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0201 	mvn.w	r2, #1
 80037cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd fb66 	bl	8000ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d104      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00c      	beq.n	8003802 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80037fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fbb1 	bl	8003f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00c      	beq.n	8003826 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800381e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fba9 	bl	8003f78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00c      	beq.n	800384a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f993 	bl	8003b70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00c      	beq.n	800386e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f06f 0220 	mvn.w	r2, #32
 8003866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fb71 	bl	8003f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00c      	beq.n	8003892 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800388a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fb7d 	bl	8003f8c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00c      	beq.n	80038b6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80038ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fb75 	bl	8003fa0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00c      	beq.n	80038da <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80038d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fb6d 	bl	8003fb4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00c      	beq.n	80038fe <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80038f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fb65 	bl	8003fc8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_TIM_ConfigClockSource+0x1c>
 8003920:	2302      	movs	r3, #2
 8003922:	e0f6      	b.n	8003b12 <HAL_TIM_ConfigClockSource+0x20a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003942:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800394e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a6f      	ldr	r2, [pc, #444]	; (8003b1c <HAL_TIM_ConfigClockSource+0x214>)
 800395e:	4293      	cmp	r3, r2
 8003960:	f000 80c1 	beq.w	8003ae6 <HAL_TIM_ConfigClockSource+0x1de>
 8003964:	4a6d      	ldr	r2, [pc, #436]	; (8003b1c <HAL_TIM_ConfigClockSource+0x214>)
 8003966:	4293      	cmp	r3, r2
 8003968:	f200 80c6 	bhi.w	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 800396c:	4a6c      	ldr	r2, [pc, #432]	; (8003b20 <HAL_TIM_ConfigClockSource+0x218>)
 800396e:	4293      	cmp	r3, r2
 8003970:	f000 80b9 	beq.w	8003ae6 <HAL_TIM_ConfigClockSource+0x1de>
 8003974:	4a6a      	ldr	r2, [pc, #424]	; (8003b20 <HAL_TIM_ConfigClockSource+0x218>)
 8003976:	4293      	cmp	r3, r2
 8003978:	f200 80be 	bhi.w	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 800397c:	4a69      	ldr	r2, [pc, #420]	; (8003b24 <HAL_TIM_ConfigClockSource+0x21c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	f000 80b1 	beq.w	8003ae6 <HAL_TIM_ConfigClockSource+0x1de>
 8003984:	4a67      	ldr	r2, [pc, #412]	; (8003b24 <HAL_TIM_ConfigClockSource+0x21c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	f200 80b6 	bhi.w	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 800398c:	4a66      	ldr	r2, [pc, #408]	; (8003b28 <HAL_TIM_ConfigClockSource+0x220>)
 800398e:	4293      	cmp	r3, r2
 8003990:	f000 80a9 	beq.w	8003ae6 <HAL_TIM_ConfigClockSource+0x1de>
 8003994:	4a64      	ldr	r2, [pc, #400]	; (8003b28 <HAL_TIM_ConfigClockSource+0x220>)
 8003996:	4293      	cmp	r3, r2
 8003998:	f200 80ae 	bhi.w	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 800399c:	4a63      	ldr	r2, [pc, #396]	; (8003b2c <HAL_TIM_ConfigClockSource+0x224>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	f000 80a1 	beq.w	8003ae6 <HAL_TIM_ConfigClockSource+0x1de>
 80039a4:	4a61      	ldr	r2, [pc, #388]	; (8003b2c <HAL_TIM_ConfigClockSource+0x224>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	f200 80a6 	bhi.w	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 80039ac:	4a60      	ldr	r2, [pc, #384]	; (8003b30 <HAL_TIM_ConfigClockSource+0x228>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	f000 8099 	beq.w	8003ae6 <HAL_TIM_ConfigClockSource+0x1de>
 80039b4:	4a5e      	ldr	r2, [pc, #376]	; (8003b30 <HAL_TIM_ConfigClockSource+0x228>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	f200 809e 	bhi.w	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 80039bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80039c0:	f000 8091 	beq.w	8003ae6 <HAL_TIM_ConfigClockSource+0x1de>
 80039c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80039c8:	f200 8096 	bhi.w	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 80039cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d0:	f000 8089 	beq.w	8003ae6 <HAL_TIM_ConfigClockSource+0x1de>
 80039d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d8:	f200 808e 	bhi.w	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 80039dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e0:	d03e      	beq.n	8003a60 <HAL_TIM_ConfigClockSource+0x158>
 80039e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e6:	f200 8087 	bhi.w	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 80039ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ee:	f000 8086 	beq.w	8003afe <HAL_TIM_ConfigClockSource+0x1f6>
 80039f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f6:	d87f      	bhi.n	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 80039f8:	2b70      	cmp	r3, #112	; 0x70
 80039fa:	d01a      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x12a>
 80039fc:	2b70      	cmp	r3, #112	; 0x70
 80039fe:	d87b      	bhi.n	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a00:	2b60      	cmp	r3, #96	; 0x60
 8003a02:	d050      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0x19e>
 8003a04:	2b60      	cmp	r3, #96	; 0x60
 8003a06:	d877      	bhi.n	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a08:	2b50      	cmp	r3, #80	; 0x50
 8003a0a:	d03c      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0x17e>
 8003a0c:	2b50      	cmp	r3, #80	; 0x50
 8003a0e:	d873      	bhi.n	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	d058      	beq.n	8003ac6 <HAL_TIM_ConfigClockSource+0x1be>
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d86f      	bhi.n	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a18:	2b30      	cmp	r3, #48	; 0x30
 8003a1a:	d064      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0x1de>
 8003a1c:	2b30      	cmp	r3, #48	; 0x30
 8003a1e:	d86b      	bhi.n	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d060      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0x1de>
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d867      	bhi.n	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d05c      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0x1de>
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d05a      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0x1de>
 8003a30:	e062      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a42:	f000 f9cf 	bl	8003de4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	609a      	str	r2, [r3, #8]
      break;
 8003a5e:	e04f      	b.n	8003b00 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a70:	f000 f9b8 	bl	8003de4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a82:	609a      	str	r2, [r3, #8]
      break;
 8003a84:	e03c      	b.n	8003b00 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a92:	461a      	mov	r2, r3
 8003a94:	f000 f92a 	bl	8003cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2150      	movs	r1, #80	; 0x50
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 f983 	bl	8003daa <TIM_ITRx_SetConfig>
      break;
 8003aa4:	e02c      	b.n	8003b00 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f000 f949 	bl	8003d4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2160      	movs	r1, #96	; 0x60
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f973 	bl	8003daa <TIM_ITRx_SetConfig>
      break;
 8003ac4:	e01c      	b.n	8003b00 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f000 f90a 	bl	8003cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2140      	movs	r1, #64	; 0x40
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 f963 	bl	8003daa <TIM_ITRx_SetConfig>
      break;
 8003ae4:	e00c      	b.n	8003b00 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f000 f95a 	bl	8003daa <TIM_ITRx_SetConfig>
      break;
 8003af6:	e003      	b.n	8003b00 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
      break;
 8003afc:	e000      	b.n	8003b00 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003afe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	00100070 	.word	0x00100070
 8003b20:	00100060 	.word	0x00100060
 8003b24:	00100050 	.word	0x00100050
 8003b28:	00100040 	.word	0x00100040
 8003b2c:	00100030 	.word	0x00100030
 8003b30:	00100020 	.word	0x00100020

08003b34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a4c      	ldr	r2, [pc, #304]	; (8003cc8 <TIM_Base_SetConfig+0x144>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d017      	beq.n	8003bcc <TIM_Base_SetConfig+0x48>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba2:	d013      	beq.n	8003bcc <TIM_Base_SetConfig+0x48>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a49      	ldr	r2, [pc, #292]	; (8003ccc <TIM_Base_SetConfig+0x148>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00f      	beq.n	8003bcc <TIM_Base_SetConfig+0x48>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a48      	ldr	r2, [pc, #288]	; (8003cd0 <TIM_Base_SetConfig+0x14c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00b      	beq.n	8003bcc <TIM_Base_SetConfig+0x48>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a47      	ldr	r2, [pc, #284]	; (8003cd4 <TIM_Base_SetConfig+0x150>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d007      	beq.n	8003bcc <TIM_Base_SetConfig+0x48>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a46      	ldr	r2, [pc, #280]	; (8003cd8 <TIM_Base_SetConfig+0x154>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_Base_SetConfig+0x48>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a45      	ldr	r2, [pc, #276]	; (8003cdc <TIM_Base_SetConfig+0x158>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d108      	bne.n	8003bde <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a39      	ldr	r2, [pc, #228]	; (8003cc8 <TIM_Base_SetConfig+0x144>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d023      	beq.n	8003c2e <TIM_Base_SetConfig+0xaa>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bec:	d01f      	beq.n	8003c2e <TIM_Base_SetConfig+0xaa>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a36      	ldr	r2, [pc, #216]	; (8003ccc <TIM_Base_SetConfig+0x148>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01b      	beq.n	8003c2e <TIM_Base_SetConfig+0xaa>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a35      	ldr	r2, [pc, #212]	; (8003cd0 <TIM_Base_SetConfig+0x14c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d017      	beq.n	8003c2e <TIM_Base_SetConfig+0xaa>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a34      	ldr	r2, [pc, #208]	; (8003cd4 <TIM_Base_SetConfig+0x150>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <TIM_Base_SetConfig+0xaa>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a33      	ldr	r2, [pc, #204]	; (8003cd8 <TIM_Base_SetConfig+0x154>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00f      	beq.n	8003c2e <TIM_Base_SetConfig+0xaa>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a33      	ldr	r2, [pc, #204]	; (8003ce0 <TIM_Base_SetConfig+0x15c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00b      	beq.n	8003c2e <TIM_Base_SetConfig+0xaa>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a32      	ldr	r2, [pc, #200]	; (8003ce4 <TIM_Base_SetConfig+0x160>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <TIM_Base_SetConfig+0xaa>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a31      	ldr	r2, [pc, #196]	; (8003ce8 <TIM_Base_SetConfig+0x164>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_Base_SetConfig+0xaa>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a2c      	ldr	r2, [pc, #176]	; (8003cdc <TIM_Base_SetConfig+0x158>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d108      	bne.n	8003c40 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <TIM_Base_SetConfig+0x144>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d013      	beq.n	8003c94 <TIM_Base_SetConfig+0x110>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a1a      	ldr	r2, [pc, #104]	; (8003cd8 <TIM_Base_SetConfig+0x154>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00f      	beq.n	8003c94 <TIM_Base_SetConfig+0x110>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a1a      	ldr	r2, [pc, #104]	; (8003ce0 <TIM_Base_SetConfig+0x15c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00b      	beq.n	8003c94 <TIM_Base_SetConfig+0x110>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a19      	ldr	r2, [pc, #100]	; (8003ce4 <TIM_Base_SetConfig+0x160>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d007      	beq.n	8003c94 <TIM_Base_SetConfig+0x110>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a18      	ldr	r2, [pc, #96]	; (8003ce8 <TIM_Base_SetConfig+0x164>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d003      	beq.n	8003c94 <TIM_Base_SetConfig+0x110>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <TIM_Base_SetConfig+0x158>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d103      	bne.n	8003c9c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d105      	bne.n	8003cba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f023 0201 	bic.w	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	611a      	str	r2, [r3, #16]
  }
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40012c00 	.word	0x40012c00
 8003ccc:	40000400 	.word	0x40000400
 8003cd0:	40000800 	.word	0x40000800
 8003cd4:	40000c00 	.word	0x40000c00
 8003cd8:	40013400 	.word	0x40013400
 8003cdc:	40015000 	.word	0x40015000
 8003ce0:	40014000 	.word	0x40014000
 8003ce4:	40014400 	.word	0x40014400
 8003ce8:	40014800 	.word	0x40014800

08003cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f023 0201 	bic.w	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f023 030a 	bic.w	r3, r3, #10
 8003d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	621a      	str	r2, [r3, #32]
}
 8003d3e:	bf00      	nop
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b087      	sub	sp, #28
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f023 0210 	bic.w	r2, r3, #16
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	031b      	lsls	r3, r3, #12
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f043 0307 	orr.w	r3, r3, #7
 8003dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	609a      	str	r2, [r3, #8]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	021a      	lsls	r2, r3, #8
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	609a      	str	r2, [r3, #8]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e074      	b.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a34      	ldr	r2, [pc, #208]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a33      	ldr	r2, [pc, #204]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a31      	ldr	r2, [pc, #196]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d108      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a21      	ldr	r2, [pc, #132]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d022      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebc:	d01d      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d018      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d013      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1c      	ldr	r2, [pc, #112]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00e      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d009      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d004      	beq.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a11      	ldr	r2, [pc, #68]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d10c      	bne.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40012c00 	.word	0x40012c00
 8003f38:	40013400 	.word	0x40013400
 8003f3c:	40015000 	.word	0x40015000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40014000 	.word	0x40014000

08003f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e042      	b.n	8004074 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d106      	bne.n	8004006 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7fc ffb9 	bl	8000f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2224      	movs	r2, #36	; 0x24
 800400a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fb24 	bl	8004674 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f825 	bl	800407c <UART_SetConfig>
 8004032:	4603      	mov	r3, r0
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e01b      	b.n	8004074 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800404a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800405a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fba3 	bl	80047b8 <UART_CheckIdleState>
 8004072:	4603      	mov	r3, r0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800407c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004080:	b08c      	sub	sp, #48	; 0x30
 8004082:	af00      	add	r7, sp, #0
 8004084:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	431a      	orrs	r2, r3
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	431a      	orrs	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4baa      	ldr	r3, [pc, #680]	; (8004354 <UART_SetConfig+0x2d8>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a9f      	ldr	r2, [pc, #636]	; (8004358 <UART_SetConfig+0x2dc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e4:	4313      	orrs	r3, r2
 80040e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80040f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	f023 010f 	bic.w	r1, r3, #15
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a90      	ldr	r2, [pc, #576]	; (800435c <UART_SetConfig+0x2e0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d125      	bne.n	800416c <UART_SetConfig+0xf0>
 8004120:	4b8f      	ldr	r3, [pc, #572]	; (8004360 <UART_SetConfig+0x2e4>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	2b03      	cmp	r3, #3
 800412c:	d81a      	bhi.n	8004164 <UART_SetConfig+0xe8>
 800412e:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <UART_SetConfig+0xb8>)
 8004130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004134:	08004145 	.word	0x08004145
 8004138:	08004155 	.word	0x08004155
 800413c:	0800414d 	.word	0x0800414d
 8004140:	0800415d 	.word	0x0800415d
 8004144:	2301      	movs	r3, #1
 8004146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800414a:	e116      	b.n	800437a <UART_SetConfig+0x2fe>
 800414c:	2302      	movs	r3, #2
 800414e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004152:	e112      	b.n	800437a <UART_SetConfig+0x2fe>
 8004154:	2304      	movs	r3, #4
 8004156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800415a:	e10e      	b.n	800437a <UART_SetConfig+0x2fe>
 800415c:	2308      	movs	r3, #8
 800415e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004162:	e10a      	b.n	800437a <UART_SetConfig+0x2fe>
 8004164:	2310      	movs	r3, #16
 8004166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800416a:	e106      	b.n	800437a <UART_SetConfig+0x2fe>
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a7c      	ldr	r2, [pc, #496]	; (8004364 <UART_SetConfig+0x2e8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d138      	bne.n	80041e8 <UART_SetConfig+0x16c>
 8004176:	4b7a      	ldr	r3, [pc, #488]	; (8004360 <UART_SetConfig+0x2e4>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b0c      	cmp	r3, #12
 8004182:	d82d      	bhi.n	80041e0 <UART_SetConfig+0x164>
 8004184:	a201      	add	r2, pc, #4	; (adr r2, 800418c <UART_SetConfig+0x110>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	080041c1 	.word	0x080041c1
 8004190:	080041e1 	.word	0x080041e1
 8004194:	080041e1 	.word	0x080041e1
 8004198:	080041e1 	.word	0x080041e1
 800419c:	080041d1 	.word	0x080041d1
 80041a0:	080041e1 	.word	0x080041e1
 80041a4:	080041e1 	.word	0x080041e1
 80041a8:	080041e1 	.word	0x080041e1
 80041ac:	080041c9 	.word	0x080041c9
 80041b0:	080041e1 	.word	0x080041e1
 80041b4:	080041e1 	.word	0x080041e1
 80041b8:	080041e1 	.word	0x080041e1
 80041bc:	080041d9 	.word	0x080041d9
 80041c0:	2300      	movs	r3, #0
 80041c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041c6:	e0d8      	b.n	800437a <UART_SetConfig+0x2fe>
 80041c8:	2302      	movs	r3, #2
 80041ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ce:	e0d4      	b.n	800437a <UART_SetConfig+0x2fe>
 80041d0:	2304      	movs	r3, #4
 80041d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041d6:	e0d0      	b.n	800437a <UART_SetConfig+0x2fe>
 80041d8:	2308      	movs	r3, #8
 80041da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041de:	e0cc      	b.n	800437a <UART_SetConfig+0x2fe>
 80041e0:	2310      	movs	r3, #16
 80041e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041e6:	e0c8      	b.n	800437a <UART_SetConfig+0x2fe>
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a5e      	ldr	r2, [pc, #376]	; (8004368 <UART_SetConfig+0x2ec>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d125      	bne.n	800423e <UART_SetConfig+0x1c2>
 80041f2:	4b5b      	ldr	r3, [pc, #364]	; (8004360 <UART_SetConfig+0x2e4>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041fc:	2b30      	cmp	r3, #48	; 0x30
 80041fe:	d016      	beq.n	800422e <UART_SetConfig+0x1b2>
 8004200:	2b30      	cmp	r3, #48	; 0x30
 8004202:	d818      	bhi.n	8004236 <UART_SetConfig+0x1ba>
 8004204:	2b20      	cmp	r3, #32
 8004206:	d00a      	beq.n	800421e <UART_SetConfig+0x1a2>
 8004208:	2b20      	cmp	r3, #32
 800420a:	d814      	bhi.n	8004236 <UART_SetConfig+0x1ba>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <UART_SetConfig+0x19a>
 8004210:	2b10      	cmp	r3, #16
 8004212:	d008      	beq.n	8004226 <UART_SetConfig+0x1aa>
 8004214:	e00f      	b.n	8004236 <UART_SetConfig+0x1ba>
 8004216:	2300      	movs	r3, #0
 8004218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800421c:	e0ad      	b.n	800437a <UART_SetConfig+0x2fe>
 800421e:	2302      	movs	r3, #2
 8004220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004224:	e0a9      	b.n	800437a <UART_SetConfig+0x2fe>
 8004226:	2304      	movs	r3, #4
 8004228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800422c:	e0a5      	b.n	800437a <UART_SetConfig+0x2fe>
 800422e:	2308      	movs	r3, #8
 8004230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004234:	e0a1      	b.n	800437a <UART_SetConfig+0x2fe>
 8004236:	2310      	movs	r3, #16
 8004238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800423c:	e09d      	b.n	800437a <UART_SetConfig+0x2fe>
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a4a      	ldr	r2, [pc, #296]	; (800436c <UART_SetConfig+0x2f0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d125      	bne.n	8004294 <UART_SetConfig+0x218>
 8004248:	4b45      	ldr	r3, [pc, #276]	; (8004360 <UART_SetConfig+0x2e4>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004252:	2bc0      	cmp	r3, #192	; 0xc0
 8004254:	d016      	beq.n	8004284 <UART_SetConfig+0x208>
 8004256:	2bc0      	cmp	r3, #192	; 0xc0
 8004258:	d818      	bhi.n	800428c <UART_SetConfig+0x210>
 800425a:	2b80      	cmp	r3, #128	; 0x80
 800425c:	d00a      	beq.n	8004274 <UART_SetConfig+0x1f8>
 800425e:	2b80      	cmp	r3, #128	; 0x80
 8004260:	d814      	bhi.n	800428c <UART_SetConfig+0x210>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <UART_SetConfig+0x1f0>
 8004266:	2b40      	cmp	r3, #64	; 0x40
 8004268:	d008      	beq.n	800427c <UART_SetConfig+0x200>
 800426a:	e00f      	b.n	800428c <UART_SetConfig+0x210>
 800426c:	2300      	movs	r3, #0
 800426e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004272:	e082      	b.n	800437a <UART_SetConfig+0x2fe>
 8004274:	2302      	movs	r3, #2
 8004276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800427a:	e07e      	b.n	800437a <UART_SetConfig+0x2fe>
 800427c:	2304      	movs	r3, #4
 800427e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004282:	e07a      	b.n	800437a <UART_SetConfig+0x2fe>
 8004284:	2308      	movs	r3, #8
 8004286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800428a:	e076      	b.n	800437a <UART_SetConfig+0x2fe>
 800428c:	2310      	movs	r3, #16
 800428e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004292:	e072      	b.n	800437a <UART_SetConfig+0x2fe>
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a35      	ldr	r2, [pc, #212]	; (8004370 <UART_SetConfig+0x2f4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d12a      	bne.n	80042f4 <UART_SetConfig+0x278>
 800429e:	4b30      	ldr	r3, [pc, #192]	; (8004360 <UART_SetConfig+0x2e4>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ac:	d01a      	beq.n	80042e4 <UART_SetConfig+0x268>
 80042ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042b2:	d81b      	bhi.n	80042ec <UART_SetConfig+0x270>
 80042b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b8:	d00c      	beq.n	80042d4 <UART_SetConfig+0x258>
 80042ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042be:	d815      	bhi.n	80042ec <UART_SetConfig+0x270>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <UART_SetConfig+0x250>
 80042c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c8:	d008      	beq.n	80042dc <UART_SetConfig+0x260>
 80042ca:	e00f      	b.n	80042ec <UART_SetConfig+0x270>
 80042cc:	2300      	movs	r3, #0
 80042ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042d2:	e052      	b.n	800437a <UART_SetConfig+0x2fe>
 80042d4:	2302      	movs	r3, #2
 80042d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042da:	e04e      	b.n	800437a <UART_SetConfig+0x2fe>
 80042dc:	2304      	movs	r3, #4
 80042de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042e2:	e04a      	b.n	800437a <UART_SetConfig+0x2fe>
 80042e4:	2308      	movs	r3, #8
 80042e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ea:	e046      	b.n	800437a <UART_SetConfig+0x2fe>
 80042ec:	2310      	movs	r3, #16
 80042ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042f2:	e042      	b.n	800437a <UART_SetConfig+0x2fe>
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a17      	ldr	r2, [pc, #92]	; (8004358 <UART_SetConfig+0x2dc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d13a      	bne.n	8004374 <UART_SetConfig+0x2f8>
 80042fe:	4b18      	ldr	r3, [pc, #96]	; (8004360 <UART_SetConfig+0x2e4>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004308:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800430c:	d01a      	beq.n	8004344 <UART_SetConfig+0x2c8>
 800430e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004312:	d81b      	bhi.n	800434c <UART_SetConfig+0x2d0>
 8004314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004318:	d00c      	beq.n	8004334 <UART_SetConfig+0x2b8>
 800431a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800431e:	d815      	bhi.n	800434c <UART_SetConfig+0x2d0>
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <UART_SetConfig+0x2b0>
 8004324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004328:	d008      	beq.n	800433c <UART_SetConfig+0x2c0>
 800432a:	e00f      	b.n	800434c <UART_SetConfig+0x2d0>
 800432c:	2300      	movs	r3, #0
 800432e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004332:	e022      	b.n	800437a <UART_SetConfig+0x2fe>
 8004334:	2302      	movs	r3, #2
 8004336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800433a:	e01e      	b.n	800437a <UART_SetConfig+0x2fe>
 800433c:	2304      	movs	r3, #4
 800433e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004342:	e01a      	b.n	800437a <UART_SetConfig+0x2fe>
 8004344:	2308      	movs	r3, #8
 8004346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800434a:	e016      	b.n	800437a <UART_SetConfig+0x2fe>
 800434c:	2310      	movs	r3, #16
 800434e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004352:	e012      	b.n	800437a <UART_SetConfig+0x2fe>
 8004354:	cfff69f3 	.word	0xcfff69f3
 8004358:	40008000 	.word	0x40008000
 800435c:	40013800 	.word	0x40013800
 8004360:	40021000 	.word	0x40021000
 8004364:	40004400 	.word	0x40004400
 8004368:	40004800 	.word	0x40004800
 800436c:	40004c00 	.word	0x40004c00
 8004370:	40005000 	.word	0x40005000
 8004374:	2310      	movs	r3, #16
 8004376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4aae      	ldr	r2, [pc, #696]	; (8004638 <UART_SetConfig+0x5bc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	f040 8097 	bne.w	80044b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800438a:	2b08      	cmp	r3, #8
 800438c:	d823      	bhi.n	80043d6 <UART_SetConfig+0x35a>
 800438e:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <UART_SetConfig+0x318>)
 8004390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004394:	080043b9 	.word	0x080043b9
 8004398:	080043d7 	.word	0x080043d7
 800439c:	080043c1 	.word	0x080043c1
 80043a0:	080043d7 	.word	0x080043d7
 80043a4:	080043c7 	.word	0x080043c7
 80043a8:	080043d7 	.word	0x080043d7
 80043ac:	080043d7 	.word	0x080043d7
 80043b0:	080043d7 	.word	0x080043d7
 80043b4:	080043cf 	.word	0x080043cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b8:	f7fe f89e 	bl	80024f8 <HAL_RCC_GetPCLK1Freq>
 80043bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043be:	e010      	b.n	80043e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c0:	4b9e      	ldr	r3, [pc, #632]	; (800463c <UART_SetConfig+0x5c0>)
 80043c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043c4:	e00d      	b.n	80043e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c6:	f7fe f829 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80043ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043cc:	e009      	b.n	80043e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043d4:	e005      	b.n	80043e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80043e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8130 	beq.w	800464a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	4a94      	ldr	r2, [pc, #592]	; (8004640 <UART_SetConfig+0x5c4>)
 80043f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043f4:	461a      	mov	r2, r3
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	429a      	cmp	r2, r3
 800440c:	d305      	bcc.n	800441a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	429a      	cmp	r2, r3
 8004418:	d903      	bls.n	8004422 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004420:	e113      	b.n	800464a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	2200      	movs	r2, #0
 8004426:	60bb      	str	r3, [r7, #8]
 8004428:	60fa      	str	r2, [r7, #12]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	4a84      	ldr	r2, [pc, #528]	; (8004640 <UART_SetConfig+0x5c4>)
 8004430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004434:	b29b      	uxth	r3, r3
 8004436:	2200      	movs	r2, #0
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004440:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004444:	f7fb fee8 	bl	8000218 <__aeabi_uldivmod>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4610      	mov	r0, r2
 800444e:	4619      	mov	r1, r3
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	020b      	lsls	r3, r1, #8
 800445a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800445e:	0202      	lsls	r2, r0, #8
 8004460:	6979      	ldr	r1, [r7, #20]
 8004462:	6849      	ldr	r1, [r1, #4]
 8004464:	0849      	lsrs	r1, r1, #1
 8004466:	2000      	movs	r0, #0
 8004468:	460c      	mov	r4, r1
 800446a:	4605      	mov	r5, r0
 800446c:	eb12 0804 	adds.w	r8, r2, r4
 8004470:	eb43 0905 	adc.w	r9, r3, r5
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	469a      	mov	sl, r3
 800447c:	4693      	mov	fp, r2
 800447e:	4652      	mov	r2, sl
 8004480:	465b      	mov	r3, fp
 8004482:	4640      	mov	r0, r8
 8004484:	4649      	mov	r1, r9
 8004486:	f7fb fec7 	bl	8000218 <__aeabi_uldivmod>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4613      	mov	r3, r2
 8004490:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004498:	d308      	bcc.n	80044ac <UART_SetConfig+0x430>
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a0:	d204      	bcs.n	80044ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6a3a      	ldr	r2, [r7, #32]
 80044a8:	60da      	str	r2, [r3, #12]
 80044aa:	e0ce      	b.n	800464a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80044b2:	e0ca      	b.n	800464a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044bc:	d166      	bne.n	800458c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80044be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d827      	bhi.n	8004516 <UART_SetConfig+0x49a>
 80044c6:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <UART_SetConfig+0x450>)
 80044c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	080044f9 	.word	0x080044f9
 80044d4:	08004501 	.word	0x08004501
 80044d8:	08004517 	.word	0x08004517
 80044dc:	08004507 	.word	0x08004507
 80044e0:	08004517 	.word	0x08004517
 80044e4:	08004517 	.word	0x08004517
 80044e8:	08004517 	.word	0x08004517
 80044ec:	0800450f 	.word	0x0800450f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f0:	f7fe f802 	bl	80024f8 <HAL_RCC_GetPCLK1Freq>
 80044f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044f6:	e014      	b.n	8004522 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f8:	f7fe f814 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
 80044fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044fe:	e010      	b.n	8004522 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004500:	4b4e      	ldr	r3, [pc, #312]	; (800463c <UART_SetConfig+0x5c0>)
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004504:	e00d      	b.n	8004522 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004506:	f7fd ff89 	bl	800241c <HAL_RCC_GetSysClockFreq>
 800450a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800450c:	e009      	b.n	8004522 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800450e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004514:	e005      	b.n	8004522 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004520:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8090 	beq.w	800464a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	4a44      	ldr	r2, [pc, #272]	; (8004640 <UART_SetConfig+0x5c4>)
 8004530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004534:	461a      	mov	r2, r3
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	fbb3 f3f2 	udiv	r3, r3, r2
 800453c:	005a      	lsls	r2, r3, #1
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	441a      	add	r2, r3
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	fbb2 f3f3 	udiv	r3, r2, r3
 800454e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	2b0f      	cmp	r3, #15
 8004554:	d916      	bls.n	8004584 <UART_SetConfig+0x508>
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455c:	d212      	bcs.n	8004584 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	b29b      	uxth	r3, r3
 8004562:	f023 030f 	bic.w	r3, r3, #15
 8004566:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	085b      	lsrs	r3, r3, #1
 800456c:	b29b      	uxth	r3, r3
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	b29a      	uxth	r2, r3
 8004574:	8bfb      	ldrh	r3, [r7, #30]
 8004576:	4313      	orrs	r3, r2
 8004578:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	8bfa      	ldrh	r2, [r7, #30]
 8004580:	60da      	str	r2, [r3, #12]
 8004582:	e062      	b.n	800464a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800458a:	e05e      	b.n	800464a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800458c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004590:	2b08      	cmp	r3, #8
 8004592:	d828      	bhi.n	80045e6 <UART_SetConfig+0x56a>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <UART_SetConfig+0x520>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045c9 	.word	0x080045c9
 80045a4:	080045d1 	.word	0x080045d1
 80045a8:	080045e7 	.word	0x080045e7
 80045ac:	080045d7 	.word	0x080045d7
 80045b0:	080045e7 	.word	0x080045e7
 80045b4:	080045e7 	.word	0x080045e7
 80045b8:	080045e7 	.word	0x080045e7
 80045bc:	080045df 	.word	0x080045df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c0:	f7fd ff9a 	bl	80024f8 <HAL_RCC_GetPCLK1Freq>
 80045c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045c6:	e014      	b.n	80045f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c8:	f7fd ffac 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
 80045cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045ce:	e010      	b.n	80045f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d0:	4b1a      	ldr	r3, [pc, #104]	; (800463c <UART_SetConfig+0x5c0>)
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045d4:	e00d      	b.n	80045f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d6:	f7fd ff21 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80045da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045dc:	e009      	b.n	80045f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045e4:	e005      	b.n	80045f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80045f0:	bf00      	nop
    }

    if (pclk != 0U)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d028      	beq.n	800464a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	4a10      	ldr	r2, [pc, #64]	; (8004640 <UART_SetConfig+0x5c4>)
 80045fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004602:	461a      	mov	r2, r3
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	fbb3 f2f2 	udiv	r2, r3, r2
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	085b      	lsrs	r3, r3, #1
 8004610:	441a      	add	r2, r3
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	fbb2 f3f3 	udiv	r3, r2, r3
 800461a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	2b0f      	cmp	r3, #15
 8004620:	d910      	bls.n	8004644 <UART_SetConfig+0x5c8>
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004628:	d20c      	bcs.n	8004644 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	b29a      	uxth	r2, r3
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60da      	str	r2, [r3, #12]
 8004634:	e009      	b.n	800464a <UART_SetConfig+0x5ce>
 8004636:	bf00      	nop
 8004638:	40008000 	.word	0x40008000
 800463c:	00f42400 	.word	0x00f42400
 8004640:	08004d40 	.word	0x08004d40
      }
      else
      {
        ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2201      	movs	r2, #1
 800464e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2201      	movs	r2, #1
 8004656:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2200      	movs	r2, #0
 800465e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2200      	movs	r2, #0
 8004664:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004666:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800466a:	4618      	mov	r0, r3
 800466c:	3730      	adds	r7, #48	; 0x30
 800466e:	46bd      	mov	sp, r7
 8004670:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01a      	beq.n	800478a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004772:	d10a      	bne.n	800478a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]
  }
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b098      	sub	sp, #96	; 0x60
 80047bc:	af02      	add	r7, sp, #8
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047c8:	f7fc fdac 	bl	8001324 <HAL_GetTick>
 80047cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d12f      	bne.n	800483c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e4:	2200      	movs	r2, #0
 80047e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f88e 	bl	800490c <UART_WaitOnFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d022      	beq.n	800483c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	e853 3f00 	ldrex	r3, [r3]
 8004802:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800480a:	653b      	str	r3, [r7, #80]	; 0x50
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004814:	647b      	str	r3, [r7, #68]	; 0x44
 8004816:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800481a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e6      	bne.n	80047f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e063      	b.n	8004904 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b04      	cmp	r3, #4
 8004848:	d149      	bne.n	80048de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800484a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004852:	2200      	movs	r2, #0
 8004854:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f857 	bl	800490c <UART_WaitOnFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d03c      	beq.n	80048de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	623b      	str	r3, [r7, #32]
   return(result);
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004878:	64fb      	str	r3, [r7, #76]	; 0x4c
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004882:	633b      	str	r3, [r7, #48]	; 0x30
 8004884:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e6      	bne.n	8004864 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3308      	adds	r3, #8
 800489c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3308      	adds	r3, #8
 80048b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048b6:	61fa      	str	r2, [r7, #28]
 80048b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	69b9      	ldr	r1, [r7, #24]
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	617b      	str	r3, [r7, #20]
   return(result);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e5      	bne.n	8004896 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e012      	b.n	8004904 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3758      	adds	r7, #88	; 0x58
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	4613      	mov	r3, r2
 800491a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800491c:	e04f      	b.n	80049be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004924:	d04b      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004926:	f7fc fcfd 	bl	8001324 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	429a      	cmp	r2, r3
 8004934:	d302      	bcc.n	800493c <UART_WaitOnFlagUntilTimeout+0x30>
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e04e      	b.n	80049de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	d037      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0xb2>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b80      	cmp	r3, #128	; 0x80
 8004952:	d034      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0xb2>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b40      	cmp	r3, #64	; 0x40
 8004958:	d031      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b08      	cmp	r3, #8
 8004966:	d110      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2208      	movs	r2, #8
 800496e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f838 	bl	80049e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2208      	movs	r2, #8
 800497a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e029      	b.n	80049de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004998:	d111      	bne.n	80049be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f81e 	bl	80049e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e00f      	b.n	80049de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69da      	ldr	r2, [r3, #28]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4013      	ands	r3, r2
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	bf0c      	ite	eq
 80049ce:	2301      	moveq	r3, #1
 80049d0:	2300      	movne	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d0a0      	beq.n	800491e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b095      	sub	sp, #84	; 0x54
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e6      	bne.n	80049ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3308      	adds	r3, #8
 8004a26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a36:	f023 0301 	bic.w	r3, r3, #1
 8004a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3308      	adds	r3, #8
 8004a42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e3      	bne.n	8004a20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d118      	bne.n	8004a92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	e853 3f00 	ldrex	r3, [r3]
 8004a6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f023 0310 	bic.w	r3, r3, #16
 8004a74:	647b      	str	r3, [r7, #68]	; 0x44
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7e:	61bb      	str	r3, [r7, #24]
 8004a80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a82:	6979      	ldr	r1, [r7, #20]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	e841 2300 	strex	r3, r2, [r1]
 8004a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1e6      	bne.n	8004a60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004aa6:	bf00      	nop
 8004aa8:	3754      	adds	r7, #84	; 0x54
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e027      	b.n	8004b18 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2224      	movs	r2, #36	; 0x24
 8004ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0201 	bic.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004af6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e02d      	b.n	8004b98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2224      	movs	r2, #36	; 0x24
 8004b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f84f 	bl	8004c1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e02d      	b.n	8004c14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2224      	movs	r2, #36	; 0x24
 8004bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0201 	bic.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f811 	bl	8004c1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d108      	bne.n	8004c3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c3c:	e031      	b.n	8004ca2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c3e:	2308      	movs	r3, #8
 8004c40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c42:	2308      	movs	r3, #8
 8004c44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	0e5b      	lsrs	r3, r3, #25
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	0f5b      	lsrs	r3, r3, #29
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c66:	7bbb      	ldrb	r3, [r7, #14]
 8004c68:	7b3a      	ldrb	r2, [r7, #12]
 8004c6a:	4911      	ldr	r1, [pc, #68]	; (8004cb0 <UARTEx_SetNbDataToProcess+0x94>)
 8004c6c:	5c8a      	ldrb	r2, [r1, r2]
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c72:	7b3a      	ldrb	r2, [r7, #12]
 8004c74:	490f      	ldr	r1, [pc, #60]	; (8004cb4 <UARTEx_SetNbDataToProcess+0x98>)
 8004c76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c78:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	7b7a      	ldrb	r2, [r7, #13]
 8004c88:	4909      	ldr	r1, [pc, #36]	; (8004cb0 <UARTEx_SetNbDataToProcess+0x94>)
 8004c8a:	5c8a      	ldrb	r2, [r1, r2]
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c90:	7b7a      	ldrb	r2, [r7, #13]
 8004c92:	4908      	ldr	r1, [pc, #32]	; (8004cb4 <UARTEx_SetNbDataToProcess+0x98>)
 8004c94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c96:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	08004d58 	.word	0x08004d58
 8004cb4:	08004d60 	.word	0x08004d60

08004cb8 <memset>:
 8004cb8:	4402      	add	r2, r0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d100      	bne.n	8004cc2 <memset+0xa>
 8004cc0:	4770      	bx	lr
 8004cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc6:	e7f9      	b.n	8004cbc <memset+0x4>

08004cc8 <__libc_init_array>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4d0d      	ldr	r5, [pc, #52]	; (8004d00 <__libc_init_array+0x38>)
 8004ccc:	4c0d      	ldr	r4, [pc, #52]	; (8004d04 <__libc_init_array+0x3c>)
 8004cce:	1b64      	subs	r4, r4, r5
 8004cd0:	10a4      	asrs	r4, r4, #2
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	42a6      	cmp	r6, r4
 8004cd6:	d109      	bne.n	8004cec <__libc_init_array+0x24>
 8004cd8:	4d0b      	ldr	r5, [pc, #44]	; (8004d08 <__libc_init_array+0x40>)
 8004cda:	4c0c      	ldr	r4, [pc, #48]	; (8004d0c <__libc_init_array+0x44>)
 8004cdc:	f000 f818 	bl	8004d10 <_init>
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	d105      	bne.n	8004cf6 <__libc_init_array+0x2e>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf0:	4798      	blx	r3
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__libc_init_array+0xc>
 8004cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfa:	4798      	blx	r3
 8004cfc:	3601      	adds	r6, #1
 8004cfe:	e7f2      	b.n	8004ce6 <__libc_init_array+0x1e>
 8004d00:	08004d70 	.word	0x08004d70
 8004d04:	08004d70 	.word	0x08004d70
 8004d08:	08004d70 	.word	0x08004d70
 8004d0c:	08004d74 	.word	0x08004d74

08004d10 <_init>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	bf00      	nop
 8004d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d16:	bc08      	pop	{r3}
 8004d18:	469e      	mov	lr, r3
 8004d1a:	4770      	bx	lr

08004d1c <_fini>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	bf00      	nop
 8004d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d22:	bc08      	pop	{r3}
 8004d24:	469e      	mov	lr, r3
 8004d26:	4770      	bx	lr
