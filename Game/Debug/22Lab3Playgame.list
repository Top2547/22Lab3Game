
22Lab3Playgame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006fa8  08006fa8  00016fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fe8  08006fe8  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ff0  08006ff0  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ff0  08006ff0  00016ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ff4  08006ff4  00016ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08006ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000e0  080070d8  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  080070d8  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018200  00000000  00000000  00020153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b8d  00000000  00000000  00038353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  0003aee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001105  00000000  00000000  0003c470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026807  00000000  00000000  0003d575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e29  00000000  00000000  00063d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd19d  00000000  00000000  0007dba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d10  00000000  00000000  0017ad44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00180a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000e0 	.word	0x200000e0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006f90 	.word	0x08006f90

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000e4 	.word	0x200000e4
 8000214:	08006f90 	.word	0x08006f90

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 ffe5 	bl	80014e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f828 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fa5e 	bl	80009e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fa2a 	bl	800097c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f8ae 	bl	8000688 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f988 	bl	8000840 <MX_TIM2_Init>
  MX_SPI3_Init();
 8000530:	f000 f8f4 	bl	800071c <MX_SPI3_Init>
  MX_TIM1_Init();
 8000534:	f000 f930 	bl	8000798 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000538:	f000 f9d0 	bl	80008dc <MX_TIM3_Init>
  MX_I2C1_Init();
 800053c:	f000 f864 	bl	8000608 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //  SPITxRx_Setup();//for mode 1,1
    IODIRB_Setup();
 8000540:	f000 fb28 	bl	8000b94 <IODIRB_Setup>
    HAL_TIM_Base_Start_IT(&htim3);
 8000544:	4807      	ldr	r0, [pc, #28]	; (8000564 <main+0x50>)
 8000546:	f005 f957 	bl	80057f8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPITxRx_readIO();
 800054a:	f000 fb43 	bl	8000bd4 <SPITxRx_readIO>
	  Game();
 800054e:	f000 fb75 	bl	8000c3c <Game>
	  //Time = HAL_GetTick();

	  eepromExampleReadFlag = 1;
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <main+0x54>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
	  EEPROMReadExample(eepromDataReadBack, 5);
 8000558:	2105      	movs	r1, #5
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <main+0x58>)
 800055c:	f000 faf4 	bl	8000b48 <EEPROMReadExample>
  {
 8000560:	e7f3      	b.n	800054a <main+0x36>
 8000562:	bf00      	nop
 8000564:	200003a0 	.word	0x200003a0
 8000568:	200003ed 	.word	0x200003ed
 800056c:	200003f0 	.word	0x200003f0

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0318 	add.w	r3, r7, #24
 800057a:	2238      	movs	r2, #56	; 0x38
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f006 fcda 	bl	8006f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000592:	2000      	movs	r0, #0
 8000594:	f003 fb80 	bl	8003c98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a2:	2340      	movs	r3, #64	; 0x40
 80005a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005aa:	2302      	movs	r3, #2
 80005ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005b2:	2355      	movs	r3, #85	; 0x55
 80005b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fc1a 	bl	8003e00 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005d2:	f000 fd01 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2303      	movs	r3, #3
 80005dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2104      	movs	r1, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 ff18 	bl	8004424 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005fa:	f000 fced 	bl	8000fd8 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	; 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MX_I2C1_Init+0x74>)
 800060e:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <MX_I2C1_Init+0x78>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_I2C1_Init+0x74>)
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <MX_I2C1_Init+0x7c>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_I2C1_Init+0x74>)
 8000620:	2201      	movs	r2, #1
 8000622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_I2C1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000642:	480e      	ldr	r0, [pc, #56]	; (800067c <MX_I2C1_Init+0x74>)
 8000644:	f001 fcf5 	bl	8002032 <HAL_I2C_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800064e:	f000 fcc3 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000652:	2100      	movs	r1, #0
 8000654:	4809      	ldr	r0, [pc, #36]	; (800067c <MX_I2C1_Init+0x74>)
 8000656:	f003 fa87 	bl	8003b68 <HAL_I2CEx_ConfigAnalogFilter>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000660:	f000 fcba 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000664:	2100      	movs	r1, #0
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_I2C1_Init+0x74>)
 8000668:	f003 fac9 	bl	8003bfe <HAL_I2CEx_ConfigDigitalFilter>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000672:	f000 fcb1 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000fc 	.word	0x200000fc
 8000680:	40005400 	.word	0x40005400
 8000684:	30a0a7fb 	.word	0x30a0a7fb

08000688 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 800068e:	4a22      	ldr	r2, [pc, #136]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 8000690:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006cc:	f005 fdc6 	bl	800625c <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006d6:	f000 fc7f 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006da:	2100      	movs	r1, #0
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006de:	f006 fb61 	bl	8006da4 <HAL_UARTEx_SetTxFifoThreshold>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006e8:	f000 fc76 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ec:	2100      	movs	r1, #0
 80006ee:	4809      	ldr	r0, [pc, #36]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	f006 fb96 	bl	8006e20 <HAL_UARTEx_SetRxFifoThreshold>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006fa:	f000 fc6d 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_LPUART1_UART_Init+0x8c>)
 8000700:	f006 fb17 	bl	8006d32 <HAL_UARTEx_DisableFifoMode>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800070a:	f000 fc65 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000210 	.word	0x20000210
 8000718:	40008000 	.word	0x40008000

0800071c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_SPI3_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_SPI3_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_SPI3_Init+0x74>)
 8000728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_SPI3_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_SPI3_Init+0x74>)
 8000736:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800073a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_SPI3_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_SPI3_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_SPI3_Init+0x74>)
 800074a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_SPI3_Init+0x74>)
 8000752:	2238      	movs	r2, #56	; 0x38
 8000754:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_SPI3_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_SPI3_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_SPI3_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_SPI3_Init+0x74>)
 800076a:	2207      	movs	r2, #7
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_SPI3_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_SPI3_Init+0x74>)
 8000776:	2208      	movs	r2, #8
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_SPI3_Init+0x74>)
 800077c:	f004 fabc 	bl	8004cf8 <HAL_SPI_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 fc27 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200002a4 	.word	0x200002a4
 8000794:	40003c00 	.word	0x40003c00

08000798 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007b8:	4a20      	ldr	r2, [pc, #128]	; (800083c <MX_TIM1_Init+0xa4>)
 80007ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16999;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007be:	f244 2267 	movw	r2, #16999	; 0x4267
 80007c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007cc:	f240 12f3 	movw	r2, #499	; 0x1f3
 80007d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e4:	4814      	ldr	r0, [pc, #80]	; (8000838 <MX_TIM1_Init+0xa0>)
 80007e6:	f004 ffaf 	bl	8005748 <HAL_TIM_Base_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80007f0:	f000 fbf2 	bl	8000fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	4619      	mov	r1, r3
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_TIM1_Init+0xa0>)
 8000802:	f005 f9c1 	bl	8005b88 <HAL_TIM_ConfigClockSource>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800080c:	f000 fbe4 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_TIM1_Init+0xa0>)
 8000822:	f005 fc3f 	bl	80060a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800082c:	f000 fbd4 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000308 	.word	0x20000308
 800083c:	40012c00 	.word	0x40012c00

08000840 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800085e:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_TIM2_Init+0x98>)
 8000860:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000864:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1699;
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_TIM2_Init+0x98>)
 8000868:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800086c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_TIM2_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_TIM2_Init+0x98>)
 8000876:	f240 32e7 	movw	r2, #999	; 0x3e7
 800087a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_TIM2_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_TIM2_Init+0x98>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000888:	4813      	ldr	r0, [pc, #76]	; (80008d8 <MX_TIM2_Init+0x98>)
 800088a:	f004 ff5d 	bl	8005748 <HAL_TIM_Base_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000894:	f000 fba0 	bl	8000fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	4619      	mov	r1, r3
 80008a4:	480c      	ldr	r0, [pc, #48]	; (80008d8 <MX_TIM2_Init+0x98>)
 80008a6:	f005 f96f 	bl	8005b88 <HAL_TIM_ConfigClockSource>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80008b0:	f000 fb92 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_TIM2_Init+0x98>)
 80008c2:	f005 fbef 	bl	80060a4 <HAL_TIMEx_MasterConfigSynchronization>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80008cc:	f000 fb84 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000354 	.word	0x20000354

080008dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <MX_TIM3_Init+0x98>)
 80008fc:	4a1e      	ldr	r2, [pc, #120]	; (8000978 <MX_TIM3_Init+0x9c>)
 80008fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_TIM3_Init+0x98>)
 8000902:	f244 2267 	movw	r2, #16999	; 0x4267
 8000906:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_TIM3_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_TIM3_Init+0x98>)
 8000910:	f242 720f 	movw	r2, #9999	; 0x270f
 8000914:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_TIM3_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_TIM3_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000922:	4814      	ldr	r0, [pc, #80]	; (8000974 <MX_TIM3_Init+0x98>)
 8000924:	f004 ff10 	bl	8005748 <HAL_TIM_Base_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800092e:	f000 fb53 	bl	8000fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000936:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_TIM3_Init+0x98>)
 8000940:	f005 f922 	bl	8005b88 <HAL_TIM_ConfigClockSource>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800094a:	f000 fb45 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <MX_TIM3_Init+0x98>)
 800095c:	f005 fba2 	bl	80060a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000966:	f000 fb37 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	3720      	adds	r7, #32
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200003a0 	.word	0x200003a0
 8000978:	40000400 	.word	0x40000400

0800097c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_DMA_Init+0x60>)
 8000984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000986:	4a15      	ldr	r2, [pc, #84]	; (80009dc <MX_DMA_Init+0x60>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6493      	str	r3, [r2, #72]	; 0x48
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_DMA_Init+0x60>)
 8000990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_DMA_Init+0x60>)
 800099c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <MX_DMA_Init+0x60>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6493      	str	r3, [r2, #72]	; 0x48
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <MX_DMA_Init+0x60>)
 80009a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	200b      	movs	r0, #11
 80009b8:	f000 ff03 	bl	80017c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009bc:	200b      	movs	r0, #11
 80009be:	f000 ff1a 	bl	80017f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	200c      	movs	r0, #12
 80009c8:	f000 fefb 	bl	80017c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009cc:	200c      	movs	r0, #12
 80009ce:	f000 ff12 	bl	80017f6 <HAL_NVIC_EnableIRQ>

}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	4b3f      	ldr	r3, [pc, #252]	; (8000af4 <MX_GPIO_Init+0x114>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	4a3e      	ldr	r2, [pc, #248]	; (8000af4 <MX_GPIO_Init+0x114>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a02:	4b3c      	ldr	r3, [pc, #240]	; (8000af4 <MX_GPIO_Init+0x114>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0e:	4b39      	ldr	r3, [pc, #228]	; (8000af4 <MX_GPIO_Init+0x114>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4a38      	ldr	r2, [pc, #224]	; (8000af4 <MX_GPIO_Init+0x114>)
 8000a14:	f043 0320 	orr.w	r3, r3, #32
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1a:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <MX_GPIO_Init+0x114>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f003 0320 	and.w	r3, r3, #32
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <MX_GPIO_Init+0x114>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a32      	ldr	r2, [pc, #200]	; (8000af4 <MX_GPIO_Init+0x114>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <MX_GPIO_Init+0x114>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <MX_GPIO_Init+0x114>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a2c      	ldr	r2, [pc, #176]	; (8000af4 <MX_GPIO_Init+0x114>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <MX_GPIO_Init+0x114>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <MX_GPIO_Init+0x114>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <MX_GPIO_Init+0x114>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <MX_GPIO_Init+0x114>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2120      	movs	r1, #32
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f001 faa1 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	481e      	ldr	r0, [pc, #120]	; (8000af8 <MX_GPIO_Init+0x118>)
 8000a80:	f001 fa9c 	bl	8001fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4818      	ldr	r0, [pc, #96]	; (8000afc <MX_GPIO_Init+0x11c>)
 8000a9c:	f001 f8f4 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aa0:	2320      	movs	r3, #32
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aba:	f001 f8e5 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4808      	ldr	r0, [pc, #32]	; (8000af8 <MX_GPIO_Init+0x118>)
 8000ad6:	f001 f8d7 	bl	8001c88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2028      	movs	r0, #40	; 0x28
 8000ae0:	f000 fe6f 	bl	80017c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ae4:	2028      	movs	r0, #40	; 0x28
 8000ae6:	f000 fe86 	bl	80017f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000c00 	.word	0x48000c00
 8000afc:	48000800 	.word	0x48000800

08000b00 <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */
void EEPROMWriteExample() {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af02      	add	r7, sp, #8
if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <EEPROMWriteExample+0x3c>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d012      	beq.n	8000b34 <EEPROMWriteExample+0x34>
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <EEPROMWriteExample+0x40>)
 8000b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b20      	cmp	r3, #32
 8000b18:	d10c      	bne.n	8000b34 <EEPROMWriteExample+0x34>
//static uint8_t data[5] = { 0x67, 0x62, 0x5F, 0x4E, 0x57 };
static uint8_t data[5] = { 0x50, 0x4F, 0x4E, 0x31,0x31};
HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 4);
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	9301      	str	r3, [sp, #4]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <EEPROMWriteExample+0x44>)
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2302      	movs	r3, #2
 8000b24:	222c      	movs	r2, #44	; 0x2c
 8000b26:	21a0      	movs	r1, #160	; 0xa0
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <EEPROMWriteExample+0x40>)
 8000b2a:	f001 fb1d 	bl	8002168 <HAL_I2C_Mem_Write_IT>
eepromExampleWriteFlag = 0;
 8000b2e:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <EEPROMWriteExample+0x3c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
	}
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200003ec 	.word	0x200003ec
 8000b40:	200000fc 	.word	0x200000fc
 8000b44:	200000cc 	.word	0x200000cc

08000b48 <EEPROMReadExample>:

void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
if (eepromExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <EEPROMReadExample+0x44>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d012      	beq.n	8000b82 <EEPROMReadExample+0x3a>
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <EEPROMReadExample+0x48>)
 8000b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b20      	cmp	r3, #32
 8000b66:	d10c      	bne.n	8000b82 <EEPROMReadExample+0x3a>
HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 8000b68:	887b      	ldrh	r3, [r7, #2]
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2302      	movs	r3, #2
 8000b72:	222c      	movs	r2, #44	; 0x2c
 8000b74:	21a0      	movs	r1, #160	; 0xa0
 8000b76:	4806      	ldr	r0, [pc, #24]	; (8000b90 <EEPROMReadExample+0x48>)
 8000b78:	f001 fb80 	bl	800227c <HAL_I2C_Mem_Read_IT>
eepromExampleReadFlag = 0;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <EEPROMReadExample+0x44>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
	}
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200003ed 	.word	0x200003ed
 8000b90:	200000fc 	.word	0x200000fc

08000b94 <IODIRB_Setup>:
//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
//HAL_Delay(1);
//}

void IODIRB_Setup()//at BEGIN 2
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <IODIRB_Setup+0x30>)
 8000b9e:	f001 fa0d 	bl	8001fbc <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000000;//write
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <IODIRB_Setup+0x34>)
 8000ba4:	2240      	movs	r2, #64	; 0x40
 8000ba6:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x01;//IODIRB
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <IODIRB_Setup+0x34>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0b00000000;
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <IODIRB_Setup+0x34>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	709a      	strb	r2, [r3, #2]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <IODIRB_Setup+0x38>)
 8000bb8:	4903      	ldr	r1, [pc, #12]	; (8000bc8 <IODIRB_Setup+0x34>)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <IODIRB_Setup+0x3c>)
 8000bbc:	f004 f948 	bl	8004e50 <HAL_SPI_TransmitReceive_IT>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	48000c00 	.word	0x48000c00
 8000bc8:	20000404 	.word	0x20000404
 8000bcc:	200003f8 	.word	0x200003f8
 8000bd0:	200002a4 	.word	0x200002a4

08000bd4 <SPITxRx_readIO>:

void SPITxRx_readIO()
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 8000bd8:	2104      	movs	r1, #4
 8000bda:	4813      	ldr	r0, [pc, #76]	; (8000c28 <SPITxRx_readIO+0x54>)
 8000bdc:	f001 f9d6 	bl	8001f8c <HAL_GPIO_ReadPin>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d01e      	beq.n	8000c24 <SPITxRx_readIO+0x50>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000be6:	2200      	movs	r2, #0
 8000be8:	2104      	movs	r1, #4
 8000bea:	480f      	ldr	r0, [pc, #60]	; (8000c28 <SPITxRx_readIO+0x54>)
 8000bec:	f001 f9e6 	bl	8001fbc <HAL_GPIO_WritePin>
		if (Mode == 0)
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <SPITxRx_readIO+0x58>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d109      	bne.n	8000c0c <SPITxRx_readIO+0x38>
		{
			SPITx[0] = 0b01000001;//read
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <SPITxRx_readIO+0x5c>)
 8000bfa:	2241      	movs	r2, #65	; 0x41
 8000bfc:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x12;
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <SPITxRx_readIO+0x5c>)
 8000c00:	2212      	movs	r2, #18
 8000c02:	705a      	strb	r2, [r3, #1]
			SPITx[2] = 0;
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <SPITxRx_readIO+0x5c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	709a      	strb	r2, [r3, #2]
 8000c0a:	e005      	b.n	8000c18 <SPITxRx_readIO+0x44>
		}
		else if(Mode == 1)
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <SPITxRx_readIO+0x58>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d101      	bne.n	8000c18 <SPITxRx_readIO+0x44>
		{
			Game();
 8000c14:	f000 f812 	bl	8000c3c <Game>
		}
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000c18:	2303      	movs	r3, #3
 8000c1a:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <SPITxRx_readIO+0x60>)
 8000c1c:	4904      	ldr	r1, [pc, #16]	; (8000c30 <SPITxRx_readIO+0x5c>)
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <SPITxRx_readIO+0x64>)
 8000c20:	f004 f916 	bl	8004e50 <HAL_SPI_TransmitReceive_IT>
	}
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	48000c00 	.word	0x48000c00
 8000c2c:	2000040e 	.word	0x2000040e
 8000c30:	20000404 	.word	0x20000404
 8000c34:	200003f8 	.word	0x200003f8
 8000c38:	200002a4 	.word	0x200002a4

08000c3c <Game>:


void Game()
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	if (State == 3)
 8000c40:	4b9c      	ldr	r3, [pc, #624]	; (8000eb4 <Game+0x278>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d111      	bne.n	8000c6c <Game+0x30>
	{
		SPITx[0] = 0b01000000;//write
 8000c48:	4b9b      	ldr	r3, [pc, #620]	; (8000eb8 <Game+0x27c>)
 8000c4a:	2240      	movs	r2, #64	; 0x40
 8000c4c:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x15;//OLATB
 8000c4e:	4b9a      	ldr	r3, [pc, #616]	; (8000eb8 <Game+0x27c>)
 8000c50:	2215      	movs	r2, #21
 8000c52:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b00000000;
 8000c54:	4b98      	ldr	r3, [pc, #608]	; (8000eb8 <Game+0x27c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	709a      	strb	r2, [r3, #2]
		HAL_Delay(1000);
 8000c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c5e:	f000 fcb3 	bl	80015c8 <HAL_Delay>
		eepromExampleWriteFlag = 1;
 8000c62:	4b96      	ldr	r3, [pc, #600]	; (8000ebc <Game+0x280>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
		EEPROMWriteExample();
 8000c68:	f7ff ff4a 	bl	8000b00 <EEPROMWriteExample>
	}
	if (State == 1)
 8000c6c:	4b91      	ldr	r3, [pc, #580]	; (8000eb4 <Game+0x278>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	f040 80f8 	bne.w	8000e66 <Game+0x22a>
		{
			if (SPIRx[2]==240)
 8000c76:	4b92      	ldr	r3, [pc, #584]	; (8000ec0 <Game+0x284>)
 8000c78:	789b      	ldrb	r3, [r3, #2]
 8000c7a:	2bf0      	cmp	r3, #240	; 0xf0
 8000c7c:	d102      	bne.n	8000c84 <Game+0x48>
			{
				click = 0;
 8000c7e:	4b91      	ldr	r3, [pc, #580]	; (8000ec4 <Game+0x288>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
			}
			if (SPIRx[2]==239 && click == 0)
 8000c84:	4b8e      	ldr	r3, [pc, #568]	; (8000ec0 <Game+0x284>)
 8000c86:	789b      	ldrb	r3, [r3, #2]
 8000c88:	2bef      	cmp	r3, #239	; 0xef
 8000c8a:	d133      	bne.n	8000cf4 <Game+0xb8>
 8000c8c:	4b8d      	ldr	r3, [pc, #564]	; (8000ec4 <Game+0x288>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d12f      	bne.n	8000cf4 <Game+0xb8>
				{
				click = 1;
 8000c94:	4b8b      	ldr	r3, [pc, #556]	; (8000ec4 <Game+0x288>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
				Pattern_Check[Nub] = 1;
 8000c9a:	4b8b      	ldr	r3, [pc, #556]	; (8000ec8 <Game+0x28c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a8b      	ldr	r2, [pc, #556]	; (8000ecc <Game+0x290>)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000ca6:	4b8a      	ldr	r3, [pc, #552]	; (8000ed0 <Game+0x294>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	1e5a      	subs	r2, r3, #1
 8000cac:	4b88      	ldr	r3, [pc, #544]	; (8000ed0 <Game+0x294>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	4988      	ldr	r1, [pc, #544]	; (8000ed4 <Game+0x298>)
 8000cb4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000cb8:	4987      	ldr	r1, [pc, #540]	; (8000ed8 <Game+0x29c>)
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 1;
 8000cbe:	4b87      	ldr	r3, [pc, #540]	; (8000edc <Game+0x2a0>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000cc4:	4b80      	ldr	r3, [pc, #512]	; (8000ec8 <Game+0x28c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a7f      	ldr	r2, [pc, #508]	; (8000ec8 <Game+0x28c>)
 8000ccc:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
 8000cce:	2064      	movs	r0, #100	; 0x64
 8000cd0:	f000 fc7a 	bl	80015c8 <HAL_Delay>
				if (Random_Number[Nub-1] != 2)
 8000cd4:	4b7c      	ldr	r3, [pc, #496]	; (8000ec8 <Game+0x28c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	4a7e      	ldr	r2, [pc, #504]	; (8000ed4 <Game+0x298>)
 8000cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	f000 80ab 	beq.w	8000e3c <Game+0x200>
					{
					wrong = 1;
 8000ce6:	4b7e      	ldr	r3, [pc, #504]	; (8000ee0 <Game+0x2a4>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	601a      	str	r2, [r3, #0]
					State = 3;
 8000cec:	4b71      	ldr	r3, [pc, #452]	; (8000eb4 <Game+0x278>)
 8000cee:	2203      	movs	r2, #3
 8000cf0:	601a      	str	r2, [r3, #0]
				if (Random_Number[Nub-1] != 2)
 8000cf2:	e0a3      	b.n	8000e3c <Game+0x200>
					//Nub = 0;
					//Numcheck_Count = 0;
					//i = 0;
					}
				}
			else if (SPIRx[2]==223 && click == 0)
 8000cf4:	4b72      	ldr	r3, [pc, #456]	; (8000ec0 <Game+0x284>)
 8000cf6:	789b      	ldrb	r3, [r3, #2]
 8000cf8:	2bdf      	cmp	r3, #223	; 0xdf
 8000cfa:	d132      	bne.n	8000d62 <Game+0x126>
 8000cfc:	4b71      	ldr	r3, [pc, #452]	; (8000ec4 <Game+0x288>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d12e      	bne.n	8000d62 <Game+0x126>
				{
				click = 1;
 8000d04:	4b6f      	ldr	r3, [pc, #444]	; (8000ec4 <Game+0x288>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	601a      	str	r2, [r3, #0]
				Pattern_Check[Nub] = 2;
 8000d0a:	4b6f      	ldr	r3, [pc, #444]	; (8000ec8 <Game+0x28c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a6f      	ldr	r2, [pc, #444]	; (8000ecc <Game+0x290>)
 8000d10:	2102      	movs	r1, #2
 8000d12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000d16:	4b6e      	ldr	r3, [pc, #440]	; (8000ed0 <Game+0x294>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	1e5a      	subs	r2, r3, #1
 8000d1c:	4b6c      	ldr	r3, [pc, #432]	; (8000ed0 <Game+0x294>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	496c      	ldr	r1, [pc, #432]	; (8000ed4 <Game+0x298>)
 8000d24:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d28:	496b      	ldr	r1, [pc, #428]	; (8000ed8 <Game+0x29c>)
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 2;
 8000d2e:	4b6b      	ldr	r3, [pc, #428]	; (8000edc <Game+0x2a0>)
 8000d30:	2202      	movs	r2, #2
 8000d32:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000d34:	4b64      	ldr	r3, [pc, #400]	; (8000ec8 <Game+0x28c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	4a63      	ldr	r2, [pc, #396]	; (8000ec8 <Game+0x28c>)
 8000d3c:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
 8000d3e:	2064      	movs	r0, #100	; 0x64
 8000d40:	f000 fc42 	bl	80015c8 <HAL_Delay>
				if (Random_Number[Nub-1] != 2)
 8000d44:	4b60      	ldr	r3, [pc, #384]	; (8000ec8 <Game+0x28c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	4a62      	ldr	r2, [pc, #392]	; (8000ed4 <Game+0x298>)
 8000d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d073      	beq.n	8000e3c <Game+0x200>
					{
					wrong = 1;
 8000d54:	4b62      	ldr	r3, [pc, #392]	; (8000ee0 <Game+0x2a4>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	601a      	str	r2, [r3, #0]
					State = 3;
 8000d5a:	4b56      	ldr	r3, [pc, #344]	; (8000eb4 <Game+0x278>)
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	601a      	str	r2, [r3, #0]
				if (Random_Number[Nub-1] != 2)
 8000d60:	e06c      	b.n	8000e3c <Game+0x200>
					//Nub = 0;
					//Numcheck_Count = 0;
					//i = 0;
					}
				}
			else if (SPIRx[2]==176 && click == 0)
 8000d62:	4b57      	ldr	r3, [pc, #348]	; (8000ec0 <Game+0x284>)
 8000d64:	789b      	ldrb	r3, [r3, #2]
 8000d66:	2bb0      	cmp	r3, #176	; 0xb0
 8000d68:	d132      	bne.n	8000dd0 <Game+0x194>
 8000d6a:	4b56      	ldr	r3, [pc, #344]	; (8000ec4 <Game+0x288>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d12e      	bne.n	8000dd0 <Game+0x194>
				{
				click = 1;
 8000d72:	4b54      	ldr	r3, [pc, #336]	; (8000ec4 <Game+0x288>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	601a      	str	r2, [r3, #0]
				Pattern_Check[Nub] = 3;
 8000d78:	4b53      	ldr	r3, [pc, #332]	; (8000ec8 <Game+0x28c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a53      	ldr	r2, [pc, #332]	; (8000ecc <Game+0x290>)
 8000d7e:	2103      	movs	r1, #3
 8000d80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000d84:	4b52      	ldr	r3, [pc, #328]	; (8000ed0 <Game+0x294>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	1e5a      	subs	r2, r3, #1
 8000d8a:	4b51      	ldr	r3, [pc, #324]	; (8000ed0 <Game+0x294>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	4950      	ldr	r1, [pc, #320]	; (8000ed4 <Game+0x298>)
 8000d92:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d96:	4950      	ldr	r1, [pc, #320]	; (8000ed8 <Game+0x29c>)
 8000d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 3;
 8000d9c:	4b4f      	ldr	r3, [pc, #316]	; (8000edc <Game+0x2a0>)
 8000d9e:	2203      	movs	r2, #3
 8000da0:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000da2:	4b49      	ldr	r3, [pc, #292]	; (8000ec8 <Game+0x28c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a47      	ldr	r2, [pc, #284]	; (8000ec8 <Game+0x28c>)
 8000daa:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
 8000dac:	2064      	movs	r0, #100	; 0x64
 8000dae:	f000 fc0b 	bl	80015c8 <HAL_Delay>
				if (Random_Number[Nub-1] != 3)
 8000db2:	4b45      	ldr	r3, [pc, #276]	; (8000ec8 <Game+0x28c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	4a46      	ldr	r2, [pc, #280]	; (8000ed4 <Game+0x298>)
 8000dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d03c      	beq.n	8000e3c <Game+0x200>
					{
					wrong = 1;
 8000dc2:	4b47      	ldr	r3, [pc, #284]	; (8000ee0 <Game+0x2a4>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]
					State = 3;
 8000dc8:	4b3a      	ldr	r3, [pc, #232]	; (8000eb4 <Game+0x278>)
 8000dca:	2203      	movs	r2, #3
 8000dcc:	601a      	str	r2, [r3, #0]
				if (Random_Number[Nub-1] != 3)
 8000dce:	e035      	b.n	8000e3c <Game+0x200>
					//Nub = 0;
					//Numcheck_Count = 0;
					//i = 0;
					}
				}
			else if (SPIRx[2]==127 && click == 0)
 8000dd0:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <Game+0x284>)
 8000dd2:	789b      	ldrb	r3, [r3, #2]
 8000dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8000dd6:	d131      	bne.n	8000e3c <Game+0x200>
 8000dd8:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <Game+0x288>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d12d      	bne.n	8000e3c <Game+0x200>
				{
				click = 1;
 8000de0:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <Game+0x288>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
				Pattern_Check[Nub] = 4;
 8000de6:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <Game+0x28c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a38      	ldr	r2, [pc, #224]	; (8000ecc <Game+0x290>)
 8000dec:	2104      	movs	r1, #4
 8000dee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000df2:	4b37      	ldr	r3, [pc, #220]	; (8000ed0 <Game+0x294>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	1e5a      	subs	r2, r3, #1
 8000df8:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <Game+0x294>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	4935      	ldr	r1, [pc, #212]	; (8000ed4 <Game+0x298>)
 8000e00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e04:	4934      	ldr	r1, [pc, #208]	; (8000ed8 <Game+0x29c>)
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 4;
 8000e0a:	4b34      	ldr	r3, [pc, #208]	; (8000edc <Game+0x2a0>)
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000e10:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <Game+0x28c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	4a2c      	ldr	r2, [pc, #176]	; (8000ec8 <Game+0x28c>)
 8000e18:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
 8000e1a:	2064      	movs	r0, #100	; 0x64
 8000e1c:	f000 fbd4 	bl	80015c8 <HAL_Delay>
				if (Random_Number[Nub-1] != 4)
 8000e20:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <Game+0x28c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	4a2b      	ldr	r2, [pc, #172]	; (8000ed4 <Game+0x298>)
 8000e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d005      	beq.n	8000e3c <Game+0x200>
					{
					wrong = 1;
 8000e30:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <Game+0x2a4>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	601a      	str	r2, [r3, #0]
					State = 3;
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <Game+0x278>)
 8000e38:	2203      	movs	r2, #3
 8000e3a:	601a      	str	r2, [r3, #0]
					//Nub = 0;
					//Numcheck_Count = 0;
					//i = 0;
					}
				}
			if (Nub > Numcheck_Count)
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <Game+0x28c>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <Game+0x294>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dd76      	ble.n	8000f36 <Game+0x2fa>
			{
				Nub = 0;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <Game+0x28c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
				State = 0;
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <Game+0x278>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
				i = 0;
 8000e54:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <Game+0x2a8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
				Numcheck_Count = Numcheck_Count + 1;
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <Game+0x294>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <Game+0x294>)
 8000e62:	6013      	str	r3, [r2, #0]
			if (i == Numcheck_Count+1)
			{
				State = 1;
			}
		}
}
 8000e64:	e067      	b.n	8000f36 <Game+0x2fa>
	else if (State == 0)
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <Game+0x278>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d163      	bne.n	8000f36 <Game+0x2fa>
			SPITx[0] = 0b01000000;//write
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <Game+0x27c>)
 8000e70:	2240      	movs	r2, #64	; 0x40
 8000e72:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15;//OLATB
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <Game+0x27c>)
 8000e76:	2215      	movs	r2, #21
 8000e78:	705a      	strb	r2, [r3, #1]
			if (Random_Number[i] == 1)
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <Game+0x2a8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a15      	ldr	r2, [pc, #84]	; (8000ed4 <Game+0x298>)
 8000e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d106      	bne.n	8000e96 <Game+0x25a>
				SPITx[2] = 0b00111111;
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <Game+0x27c>)
 8000e8a:	223f      	movs	r2, #63	; 0x3f
 8000e8c:	709a      	strb	r2, [r3, #2]
				test =1;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <Game+0x2ac>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	e045      	b.n	8000f22 <Game+0x2e6>
			else if (Random_Number[i] == 2)
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <Game+0x2a8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <Game+0x298>)
 8000e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d123      	bne.n	8000eec <Game+0x2b0>
				SPITx[2] = 0b11001111;
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <Game+0x27c>)
 8000ea6:	22cf      	movs	r2, #207	; 0xcf
 8000ea8:	709a      	strb	r2, [r3, #2]
				test =2;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <Game+0x2ac>)
 8000eac:	2202      	movs	r2, #2
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	e037      	b.n	8000f22 <Game+0x2e6>
 8000eb2:	bf00      	nop
 8000eb4:	200005a4 	.word	0x200005a4
 8000eb8:	20000404 	.word	0x20000404
 8000ebc:	200003ec 	.word	0x200003ec
 8000ec0:	200003f8 	.word	0x200003f8
 8000ec4:	200005b4 	.word	0x200005b4
 8000ec8:	200005b0 	.word	0x200005b0
 8000ecc:	200004dc 	.word	0x200004dc
 8000ed0:	200005a8 	.word	0x200005a8
 8000ed4:	20000004 	.word	0x20000004
 8000ed8:	20000414 	.word	0x20000414
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	200005b8 	.word	0x200005b8
 8000ee4:	20000410 	.word	0x20000410
 8000ee8:	200005ac 	.word	0x200005ac
			else if (Random_Number[i] == 3)
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <Game+0x300>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <Game+0x304>)
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d106      	bne.n	8000f08 <Game+0x2cc>
				SPITx[2] = 0b11110011;
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <Game+0x308>)
 8000efc:	22f3      	movs	r2, #243	; 0xf3
 8000efe:	709a      	strb	r2, [r3, #2]
				test =3;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <Game+0x30c>)
 8000f02:	2203      	movs	r2, #3
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	e00c      	b.n	8000f22 <Game+0x2e6>
			else if (Random_Number[i] == 4)
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <Game+0x300>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <Game+0x304>)
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d105      	bne.n	8000f22 <Game+0x2e6>
				SPITx[2] = 0b11111100;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <Game+0x308>)
 8000f18:	22fc      	movs	r2, #252	; 0xfc
 8000f1a:	709a      	strb	r2, [r3, #2]
				test =4;
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <Game+0x30c>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	601a      	str	r2, [r3, #0]
			if (i == Numcheck_Count+1)
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <Game+0x310>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <Game+0x300>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d102      	bne.n	8000f36 <Game+0x2fa>
				State = 1;
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <Game+0x314>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000410 	.word	0x20000410
 8000f40:	20000004 	.word	0x20000004
 8000f44:	20000404 	.word	0x20000404
 8000f48:	200005ac 	.word	0x200005ac
 8000f4c:	200005a8 	.word	0x200005a8
 8000f50:	200005a4 	.word	0x200005a4

08000f54 <HAL_TIM_PeriodElapsedCallback>:
//
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d10e      	bne.n	8000f82 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		i+=1;
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f6c:	6013      	str	r3, [r2, #0]
		if (i > Numcheck_Count + 1)
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	1c5a      	adds	r2, r3, #1
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	da02      	bge.n	8000f82 <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			i=0;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	200003a0 	.word	0x200003a0
 8000f94:	20000410 	.word	0x20000410
 8000f98:	200005a8 	.word	0x200005a8

08000f9c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	Mode+=1;
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000fae:	701a      	strb	r2, [r3, #0]
	if (Mode>1)
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d902      	bls.n	8000fbe <HAL_SPI_TxRxCpltCallback+0x22>
	{
		Mode = 0;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000fc4:	f000 fffa 	bl	8001fbc <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2000040e 	.word	0x2000040e
 8000fd4:	48000c00 	.word	0x48000c00

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <Error_Handler+0x8>
	...

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <HAL_MspInit+0x44>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <HAL_MspInit+0x44>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_MspInit+0x44>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_MspInit+0x44>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_MspInit+0x44>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	6593      	str	r3, [r2, #88]	; 0x58
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_MspInit+0x44>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800101a:	f002 fee1 	bl	8003de0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000

0800102c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b09e      	sub	sp, #120	; 0x78
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	2254      	movs	r2, #84	; 0x54
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f005 ff73 	bl	8006f38 <memset>
  if(hi2c->Instance==I2C1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a50      	ldr	r2, [pc, #320]	; (8001198 <HAL_I2C_MspInit+0x16c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	f040 8099 	bne.w	8001190 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800105e:	2340      	movs	r3, #64	; 0x40
 8001060:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4618      	mov	r0, r3
 800106c:	f003 fbf6 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001076:	f7ff ffaf 	bl	8000fd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b48      	ldr	r3, [pc, #288]	; (800119c <HAL_I2C_MspInit+0x170>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a47      	ldr	r2, [pc, #284]	; (800119c <HAL_I2C_MspInit+0x170>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b45      	ldr	r3, [pc, #276]	; (800119c <HAL_I2C_MspInit+0x170>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001092:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001096:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001098:	2312      	movs	r3, #18
 800109a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a4:	2304      	movs	r3, #4
 80010a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010ac:	4619      	mov	r1, r3
 80010ae:	483c      	ldr	r0, [pc, #240]	; (80011a0 <HAL_I2C_MspInit+0x174>)
 80010b0:	f000 fdea 	bl	8001c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b4:	4b39      	ldr	r3, [pc, #228]	; (800119c <HAL_I2C_MspInit+0x170>)
 80010b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b8:	4a38      	ldr	r2, [pc, #224]	; (800119c <HAL_I2C_MspInit+0x170>)
 80010ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010be:	6593      	str	r3, [r2, #88]	; 0x58
 80010c0:	4b36      	ldr	r3, [pc, #216]	; (800119c <HAL_I2C_MspInit+0x170>)
 80010c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 80010cc:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <HAL_I2C_MspInit+0x178>)
 80010ce:	4a36      	ldr	r2, [pc, #216]	; (80011a8 <HAL_I2C_MspInit+0x17c>)
 80010d0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80010d2:	4b34      	ldr	r3, [pc, #208]	; (80011a4 <HAL_I2C_MspInit+0x178>)
 80010d4:	2210      	movs	r2, #16
 80010d6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d8:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <HAL_I2C_MspInit+0x178>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010de:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <HAL_I2C_MspInit+0x178>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010e4:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <HAL_I2C_MspInit+0x178>)
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ea:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <HAL_I2C_MspInit+0x178>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f0:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <HAL_I2C_MspInit+0x178>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80010f6:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <HAL_I2C_MspInit+0x178>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010fc:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <HAL_I2C_MspInit+0x178>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001102:	4828      	ldr	r0, [pc, #160]	; (80011a4 <HAL_I2C_MspInit+0x178>)
 8001104:	f000 fb92 	bl	800182c <HAL_DMA_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 800110e:	f7ff ff63 	bl	8000fd8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a23      	ldr	r2, [pc, #140]	; (80011a4 <HAL_I2C_MspInit+0x178>)
 8001116:	63da      	str	r2, [r3, #60]	; 0x3c
 8001118:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <HAL_I2C_MspInit+0x178>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <HAL_I2C_MspInit+0x180>)
 8001120:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <HAL_I2C_MspInit+0x184>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_I2C_MspInit+0x180>)
 8001126:	2211      	movs	r2, #17
 8001128:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <HAL_I2C_MspInit+0x180>)
 800112c:	2210      	movs	r2, #16
 800112e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <HAL_I2C_MspInit+0x180>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_I2C_MspInit+0x180>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <HAL_I2C_MspInit+0x180>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <HAL_I2C_MspInit+0x180>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_I2C_MspInit+0x180>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <HAL_I2C_MspInit+0x180>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001154:	4815      	ldr	r0, [pc, #84]	; (80011ac <HAL_I2C_MspInit+0x180>)
 8001156:	f000 fb69 	bl	800182c <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8001160:	f7ff ff3a 	bl	8000fd8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a11      	ldr	r2, [pc, #68]	; (80011ac <HAL_I2C_MspInit+0x180>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
 800116a:	4a10      	ldr	r2, [pc, #64]	; (80011ac <HAL_I2C_MspInit+0x180>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	201f      	movs	r0, #31
 8001176:	f000 fb24 	bl	80017c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800117a:	201f      	movs	r0, #31
 800117c:	f000 fb3b 	bl	80017f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2020      	movs	r0, #32
 8001186:	f000 fb1c 	bl	80017c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800118a:	2020      	movs	r0, #32
 800118c:	f000 fb33 	bl	80017f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3778      	adds	r7, #120	; 0x78
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40005400 	.word	0x40005400
 800119c:	40021000 	.word	0x40021000
 80011a0:	48000400 	.word	0x48000400
 80011a4:	20000150 	.word	0x20000150
 80011a8:	40020008 	.word	0x40020008
 80011ac:	200001b0 	.word	0x200001b0
 80011b0:	4002001c 	.word	0x4002001c

080011b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b09e      	sub	sp, #120	; 0x78
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	2254      	movs	r2, #84	; 0x54
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f005 feaf 	bl	8006f38 <memset>
  if(huart->Instance==LPUART1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a1f      	ldr	r2, [pc, #124]	; (800125c <HAL_UART_MspInit+0xa8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d136      	bne.n	8001252 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80011e4:	2320      	movs	r3, #32
 80011e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fb33 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011fc:	f7ff feec 	bl	8000fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_UART_MspInit+0xac>)
 8001202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001204:	4a16      	ldr	r2, [pc, #88]	; (8001260 <HAL_UART_MspInit+0xac>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_UART_MspInit+0xac>)
 800120e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_UART_MspInit+0xac>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121c:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_UART_MspInit+0xac>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_UART_MspInit+0xac>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001230:	230c      	movs	r3, #12
 8001232:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001240:	230c      	movs	r3, #12
 8001242:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124e:	f000 fd1b 	bl	8001c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	3778      	adds	r7, #120	; 0x78
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40008000 	.word	0x40008000
 8001260:	40021000 	.word	0x40021000

08001264 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <HAL_SPI_MspInit+0x8c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d130      	bne.n	80012e8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <HAL_SPI_MspInit+0x90>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <HAL_SPI_MspInit+0x90>)
 800128c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001290:	6593      	str	r3, [r2, #88]	; 0x58
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_SPI_MspInit+0x90>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_SPI_MspInit+0x90>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <HAL_SPI_MspInit+0x90>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_SPI_MspInit+0x90>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012c8:	2306      	movs	r3, #6
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	4809      	ldr	r0, [pc, #36]	; (80012f8 <HAL_SPI_MspInit+0x94>)
 80012d4:	f000 fcd8 	bl	8001c88 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	2033      	movs	r0, #51	; 0x33
 80012de:	f000 fa70 	bl	80017c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80012e2:	2033      	movs	r0, #51	; 0x33
 80012e4:	f000 fa87 	bl	80017f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40003c00 	.word	0x40003c00
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48000800 	.word	0x48000800

080012fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a1f      	ldr	r2, [pc, #124]	; (8001388 <HAL_TIM_Base_MspInit+0x8c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d10c      	bne.n	8001328 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800130e:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_TIM_Base_MspInit+0x90>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	4a1e      	ldr	r2, [pc, #120]	; (800138c <HAL_TIM_Base_MspInit+0x90>)
 8001314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001318:	6613      	str	r3, [r2, #96]	; 0x60
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_TIM_Base_MspInit+0x90>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001326:	e02a      	b.n	800137e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001330:	d10c      	bne.n	800134c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <HAL_TIM_Base_MspInit+0x90>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	4a15      	ldr	r2, [pc, #84]	; (800138c <HAL_TIM_Base_MspInit+0x90>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6593      	str	r3, [r2, #88]	; 0x58
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_TIM_Base_MspInit+0x90>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
}
 800134a:	e018      	b.n	800137e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <HAL_TIM_Base_MspInit+0x94>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d113      	bne.n	800137e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_TIM_Base_MspInit+0x90>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	4a0c      	ldr	r2, [pc, #48]	; (800138c <HAL_TIM_Base_MspInit+0x90>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	6593      	str	r3, [r2, #88]	; 0x58
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_TIM_Base_MspInit+0x90>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	201d      	movs	r0, #29
 8001374:	f000 fa25 	bl	80017c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001378:	201d      	movs	r0, #29
 800137a:	f000 fa3c 	bl	80017f6 <HAL_NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40012c00 	.word	0x40012c00
 800138c:	40021000 	.word	0x40021000
 8001390:	40000400 	.word	0x40000400

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001398:	e7fe      	b.n	8001398 <NMI_Handler+0x4>

0800139a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <MemManage_Handler+0x4>

080013a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <BusFault_Handler+0x4>

080013ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <UsageFault_Handler+0x4>

080013b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e0:	f000 f8d4 	bl	800158c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <DMA1_Channel1_IRQHandler+0x10>)
 80013ee:	f000 fb2c 	bl	8001a4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000150 	.word	0x20000150

080013fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <DMA1_Channel2_IRQHandler+0x10>)
 8001402:	f000 fb22 	bl	8001a4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200001b0 	.word	0x200001b0

08001410 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM3_IRQHandler+0x10>)
 8001416:	f004 fa67 	bl	80058e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200003a0 	.word	0x200003a0

08001424 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <I2C1_EV_IRQHandler+0x10>)
 800142a:	f000 ffad 	bl	8002388 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200000fc 	.word	0x200000fc

08001438 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <I2C1_ER_IRQHandler+0x10>)
 800143e:	f000 ffbd 	bl	80023bc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200000fc 	.word	0x200000fc

0800144c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001450:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001454:	f000 fdca 	bl	8001fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <SPI3_IRQHandler+0x10>)
 8001462:	f003 fda3 	bl	8004fac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200002a4 	.word	0x200002a4

08001470 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <SystemInit+0x20>)
 8001476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <SystemInit+0x20>)
 800147c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001496:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001498:	f7ff ffea 	bl	8001470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800149c:	480c      	ldr	r0, [pc, #48]	; (80014d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800149e:	490d      	ldr	r1, [pc, #52]	; (80014d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014a0:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <LoopForever+0xe>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014b4:	4c0a      	ldr	r4, [pc, #40]	; (80014e0 <LoopForever+0x16>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c2:	f005 fd41 	bl	8006f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014c6:	f7ff f825 	bl	8000514 <main>

080014ca <LoopForever>:

LoopForever:
    b LoopForever
 80014ca:	e7fe      	b.n	80014ca <LoopForever>
  ldr   r0, =_estack
 80014cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d4:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80014d8:	08006ff8 	.word	0x08006ff8
  ldr r2, =_sbss
 80014dc:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80014e0:	200005c0 	.word	0x200005c0

080014e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC1_2_IRQHandler>

080014e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 f95b 	bl	80017ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014f6:	2000      	movs	r0, #0
 80014f8:	f000 f80e 	bl	8001518 <HAL_InitTick>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d002      	beq.n	8001508 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	71fb      	strb	r3, [r7, #7]
 8001506:	e001      	b.n	800150c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001508:	f7ff fd6c 	bl	8000fe4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800150c:	79fb      	ldrb	r3, [r7, #7]

}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_InitTick+0x68>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d022      	beq.n	8001572 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_InitTick+0x6c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_InitTick+0x68>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001538:	fbb1 f3f3 	udiv	r3, r1, r3
 800153c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f966 	bl	8001812 <HAL_SYSTICK_Config>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10f      	bne.n	800156c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	d809      	bhi.n	8001566 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001552:	2200      	movs	r2, #0
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	f04f 30ff 	mov.w	r0, #4294967295
 800155a:	f000 f932 	bl	80017c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_InitTick+0x70>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	e007      	b.n	8001576 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	e004      	b.n	8001576 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	e001      	b.n	8001576 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200000dc 	.word	0x200000dc
 8001584:	200000d4 	.word	0x200000d4
 8001588:	200000d8 	.word	0x200000d8

0800158c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_IncTick+0x1c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_IncTick+0x20>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4413      	add	r3, r2
 800159a:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <HAL_IncTick+0x1c>)
 800159c:	6013      	str	r3, [r2, #0]
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	200005bc 	.word	0x200005bc
 80015ac:	200000dc 	.word	0x200000dc

080015b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_GetTick+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200005bc 	.word	0x200005bc

080015c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff ffee 	bl	80015b0 <HAL_GetTick>
 80015d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d004      	beq.n	80015ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_Delay+0x40>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ec:	bf00      	nop
 80015ee:	f7ff ffdf 	bl	80015b0 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d8f7      	bhi.n	80015ee <HAL_Delay+0x26>
  {
  }
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200000dc 	.word	0x200000dc

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db0b      	blt.n	800169a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	4907      	ldr	r1, [pc, #28]	; (80016a8 <__NVIC_EnableIRQ+0x38>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e100 	.word	0xe000e100

080016ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	6039      	str	r1, [r7, #0]
 80016b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	db0a      	blt.n	80016d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	490c      	ldr	r1, [pc, #48]	; (80016f8 <__NVIC_SetPriority+0x4c>)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	0112      	lsls	r2, r2, #4
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	440b      	add	r3, r1
 80016d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d4:	e00a      	b.n	80016ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4908      	ldr	r1, [pc, #32]	; (80016fc <__NVIC_SetPriority+0x50>)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	3b04      	subs	r3, #4
 80016e4:	0112      	lsls	r2, r2, #4
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	440b      	add	r3, r1
 80016ea:	761a      	strb	r2, [r3, #24]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000e100 	.word	0xe000e100
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f1c3 0307 	rsb	r3, r3, #7
 800171a:	2b04      	cmp	r3, #4
 800171c:	bf28      	it	cs
 800171e:	2304      	movcs	r3, #4
 8001720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3304      	adds	r3, #4
 8001726:	2b06      	cmp	r3, #6
 8001728:	d902      	bls.n	8001730 <NVIC_EncodePriority+0x30>
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3b03      	subs	r3, #3
 800172e:	e000      	b.n	8001732 <NVIC_EncodePriority+0x32>
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	f04f 32ff 	mov.w	r2, #4294967295
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	401a      	ands	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001748:	f04f 31ff 	mov.w	r1, #4294967295
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	43d9      	mvns	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	4313      	orrs	r3, r2
         );
}
 800175a:	4618      	mov	r0, r3
 800175c:	3724      	adds	r7, #36	; 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001778:	d301      	bcc.n	800177e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177a:	2301      	movs	r3, #1
 800177c:	e00f      	b.n	800179e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <SysTick_Config+0x40>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001786:	210f      	movs	r1, #15
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f7ff ff8e 	bl	80016ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <SysTick_Config+0x40>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <SysTick_Config+0x40>)
 8001798:	2207      	movs	r2, #7
 800179a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	e000e010 	.word	0xe000e010

080017ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ff29 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017d0:	f7ff ff40 	bl	8001654 <__NVIC_GetPriorityGrouping>
 80017d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f7ff ff90 	bl	8001700 <NVIC_EncodePriority>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff5f 	bl	80016ac <__NVIC_SetPriority>
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff33 	bl	8001670 <__NVIC_EnableIRQ>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffa4 	bl	8001768 <SysTick_Config>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e08d      	b.n	800195a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_DMA_Init+0x138>)
 8001846:	429a      	cmp	r2, r3
 8001848:	d80f      	bhi.n	800186a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	4b45      	ldr	r3, [pc, #276]	; (8001968 <HAL_DMA_Init+0x13c>)
 8001852:	4413      	add	r3, r2
 8001854:	4a45      	ldr	r2, [pc, #276]	; (800196c <HAL_DMA_Init+0x140>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	009a      	lsls	r2, r3, #2
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a42      	ldr	r2, [pc, #264]	; (8001970 <HAL_DMA_Init+0x144>)
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
 8001868:	e00e      	b.n	8001888 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	4b40      	ldr	r3, [pc, #256]	; (8001974 <HAL_DMA_Init+0x148>)
 8001872:	4413      	add	r3, r2
 8001874:	4a3d      	ldr	r2, [pc, #244]	; (800196c <HAL_DMA_Init+0x140>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	009a      	lsls	r2, r3, #2
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a3c      	ldr	r2, [pc, #240]	; (8001978 <HAL_DMA_Init+0x14c>)
 8001886:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2202      	movs	r2, #2
 800188c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800189e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f972 	bl	8001bc4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018e8:	d102      	bne.n	80018f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001904:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d010      	beq.n	8001930 <HAL_DMA_Init+0x104>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b04      	cmp	r3, #4
 8001914:	d80c      	bhi.n	8001930 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f992 	bl	8001c40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	e008      	b.n	8001942 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40020407 	.word	0x40020407
 8001968:	bffdfff8 	.word	0xbffdfff8
 800196c:	cccccccd 	.word	0xcccccccd
 8001970:	40020000 	.word	0x40020000
 8001974:	bffdfbf8 	.word	0xbffdfbf8
 8001978:	40020400 	.word	0x40020400

0800197c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d00d      	beq.n	80019b0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2204      	movs	r2, #4
 8001998:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	e047      	b.n	8001a40 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 020e 	bic.w	r2, r2, #14
 80019be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	f003 021f 	and.w	r2, r3, #31
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	2101      	movs	r1, #1
 80019ee:	fa01 f202 	lsl.w	r2, r1, r2
 80019f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00c      	beq.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a1e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	4798      	blx	r3
    }
  }
  return status;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f003 031f 	and.w	r3, r3, #31
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d026      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x7a>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d021      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d107      	bne.n	8001a9e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0204 	bic.w	r2, r2, #4
 8001a9c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f003 021f 	and.w	r2, r3, #31
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	2104      	movs	r1, #4
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d071      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ac2:	e06c      	b.n	8001b9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	2202      	movs	r2, #2
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d02e      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d029      	beq.n	8001b36 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0320 	and.w	r3, r3, #32
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10b      	bne.n	8001b08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 020a 	bic.w	r2, r2, #10
 8001afe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	f003 021f 	and.w	r2, r3, #31
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	2102      	movs	r1, #2
 8001b16:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d038      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b34:	e033      	b.n	8001b9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	2208      	movs	r2, #8
 8001b40:	409a      	lsls	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d02a      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d025      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 020e 	bic.w	r2, r2, #14
 8001b62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	f003 021f 	and.w	r2, r3, #31
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	2101      	movs	r1, #1
 8001b72:	fa01 f202 	lsl.w	r2, r1, r2
 8001b76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b9e:	bf00      	nop
 8001ba0:	bf00      	nop
}
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bb6:	b2db      	uxtb	r3, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d802      	bhi.n	8001bde <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001bd8:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e001      	b.n	8001be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001be0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	3b08      	subs	r3, #8
 8001bee:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	009a      	lsls	r2, r3, #2
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4413      	add	r3, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	2201      	movs	r2, #1
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c1e:	bf00      	nop
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40020407 	.word	0x40020407
 8001c30:	40020800 	.word	0x40020800
 8001c34:	40020820 	.word	0x40020820
 8001c38:	cccccccd 	.word	0xcccccccd
 8001c3c:	40020880 	.word	0x40020880

08001c40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c62:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	1000823f 	.word	0x1000823f
 8001c84:	40020940 	.word	0x40020940

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c96:	e15a      	b.n	8001f4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 814c 	beq.w	8001f48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d005      	beq.n	8001cc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d130      	bne.n	8001d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cfe:	2201      	movs	r2, #1
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	f003 0201 	and.w	r2, r3, #1
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d017      	beq.n	8001d66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d123      	bne.n	8001dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	08da      	lsrs	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3208      	adds	r2, #8
 8001d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	220f      	movs	r2, #15
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	6939      	ldr	r1, [r7, #16]
 8001db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0203 	and.w	r2, r3, #3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80a6 	beq.w	8001f48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfc:	4b5b      	ldr	r3, [pc, #364]	; (8001f6c <HAL_GPIO_Init+0x2e4>)
 8001dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e00:	4a5a      	ldr	r2, [pc, #360]	; (8001f6c <HAL_GPIO_Init+0x2e4>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6613      	str	r3, [r2, #96]	; 0x60
 8001e08:	4b58      	ldr	r3, [pc, #352]	; (8001f6c <HAL_GPIO_Init+0x2e4>)
 8001e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e14:	4a56      	ldr	r2, [pc, #344]	; (8001f70 <HAL_GPIO_Init+0x2e8>)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e3e:	d01f      	beq.n	8001e80 <HAL_GPIO_Init+0x1f8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a4c      	ldr	r2, [pc, #304]	; (8001f74 <HAL_GPIO_Init+0x2ec>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d019      	beq.n	8001e7c <HAL_GPIO_Init+0x1f4>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a4b      	ldr	r2, [pc, #300]	; (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d013      	beq.n	8001e78 <HAL_GPIO_Init+0x1f0>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a4a      	ldr	r2, [pc, #296]	; (8001f7c <HAL_GPIO_Init+0x2f4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d00d      	beq.n	8001e74 <HAL_GPIO_Init+0x1ec>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a49      	ldr	r2, [pc, #292]	; (8001f80 <HAL_GPIO_Init+0x2f8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d007      	beq.n	8001e70 <HAL_GPIO_Init+0x1e8>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a48      	ldr	r2, [pc, #288]	; (8001f84 <HAL_GPIO_Init+0x2fc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d101      	bne.n	8001e6c <HAL_GPIO_Init+0x1e4>
 8001e68:	2305      	movs	r3, #5
 8001e6a:	e00a      	b.n	8001e82 <HAL_GPIO_Init+0x1fa>
 8001e6c:	2306      	movs	r3, #6
 8001e6e:	e008      	b.n	8001e82 <HAL_GPIO_Init+0x1fa>
 8001e70:	2304      	movs	r3, #4
 8001e72:	e006      	b.n	8001e82 <HAL_GPIO_Init+0x1fa>
 8001e74:	2303      	movs	r3, #3
 8001e76:	e004      	b.n	8001e82 <HAL_GPIO_Init+0x1fa>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e002      	b.n	8001e82 <HAL_GPIO_Init+0x1fa>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_GPIO_Init+0x1fa>
 8001e80:	2300      	movs	r3, #0
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	f002 0203 	and.w	r2, r2, #3
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	4093      	lsls	r3, r2
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e92:	4937      	ldr	r1, [pc, #220]	; (8001f70 <HAL_GPIO_Init+0x2e8>)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ea0:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <HAL_GPIO_Init+0x300>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec4:	4a30      	ldr	r2, [pc, #192]	; (8001f88 <HAL_GPIO_Init+0x300>)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eca:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <HAL_GPIO_Init+0x300>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eee:	4a26      	ldr	r2, [pc, #152]	; (8001f88 <HAL_GPIO_Init+0x300>)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ef4:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <HAL_GPIO_Init+0x300>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f18:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <HAL_GPIO_Init+0x300>)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <HAL_GPIO_Init+0x300>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f42:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <HAL_GPIO_Init+0x300>)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f47f ae9d 	bne.w	8001c98 <HAL_GPIO_Init+0x10>
  }
}
 8001f5e:	bf00      	nop
 8001f60:	bf00      	nop
 8001f62:	371c      	adds	r7, #28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40010000 	.word	0x40010000
 8001f74:	48000400 	.word	0x48000400
 8001f78:	48000800 	.word	0x48000800
 8001f7c:	48000c00 	.word	0x48000c00
 8001f80:	48001000 	.word	0x48001000
 8001f84:	48001400 	.word	0x48001400
 8001f88:	40010400 	.word	0x40010400

08001f8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	887b      	ldrh	r3, [r7, #2]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	e001      	b.n	8001fae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fcc:	787b      	ldrb	r3, [r7, #1]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fd2:	887a      	ldrh	r2, [r7, #2]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fd8:	e002      	b.n	8001fe0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d006      	beq.n	8002010 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002002:	4a05      	ldr	r2, [pc, #20]	; (8002018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f806 	bl	800201c <HAL_GPIO_EXTI_Callback>
  }
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40010400 	.word	0x40010400

0800201c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e08d      	b.n	8002160 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d106      	bne.n	800205e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7fe ffe7 	bl	800102c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2224      	movs	r2, #36	; 0x24
 8002062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002082:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002092:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d107      	bne.n	80020ac <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	e006      	b.n	80020ba <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d108      	bne.n	80020d4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	e007      	b.n	80020e4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002106:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69d9      	ldr	r1, [r3, #28]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1a      	ldr	r2, [r3, #32]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0201 	orr.w	r2, r2, #1
 8002140:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	817b      	strh	r3, [r7, #10]
 800217a:	460b      	mov	r3, r1
 800217c:	813b      	strh	r3, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b20      	cmp	r3, #32
 800218c:	d16a      	bne.n	8002264 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HAL_I2C_Mem_Write_IT+0x32>
 8002194:	8bbb      	ldrh	r3, [r7, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e05f      	b.n	8002266 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021b4:	d101      	bne.n	80021ba <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 80021b6:	2302      	movs	r3, #2
 80021b8:	e055      	b.n	8002266 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_I2C_Mem_Write_IT+0x60>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e04e      	b.n	8002266 <HAL_I2C_Mem_Write_IT+0xfe>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2221      	movs	r2, #33	; 0x21
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2240      	movs	r2, #64	; 0x40
 80021dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8bba      	ldrh	r2, [r7, #28]
 80021f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <HAL_I2C_Mem_Write_IT+0x108>)
 80021fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <HAL_I2C_Mem_Write_IT+0x10c>)
 8002202:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8002204:	897a      	ldrh	r2, [r7, #10]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d109      	bne.n	8002224 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002210:	893b      	ldrh	r3, [r7, #8]
 8002212:	b2da      	uxtb	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	651a      	str	r2, [r3, #80]	; 0x50
 8002222:	e00b      	b.n	800223c <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002224:	893b      	ldrh	r3, [r7, #8]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	b29b      	uxth	r3, r3
 800222a:	b2da      	uxtb	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002232:	893b      	ldrh	r3, [r7, #8]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	8979      	ldrh	r1, [r7, #10]
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_I2C_Mem_Write_IT+0x110>)
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f001 fb78 	bl	8003940 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002258:	2101      	movs	r1, #1
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f001 fba2 	bl	80039a4 <I2C_Enable_IRQ>

    return HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	e000      	b.n	8002266 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002264:	2302      	movs	r3, #2
  }
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	ffff0000 	.word	0xffff0000
 8002274:	08002545 	.word	0x08002545
 8002278:	80002000 	.word	0x80002000

0800227c <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	4608      	mov	r0, r1
 8002286:	4611      	mov	r1, r2
 8002288:	461a      	mov	r2, r3
 800228a:	4603      	mov	r3, r0
 800228c:	817b      	strh	r3, [r7, #10]
 800228e:	460b      	mov	r3, r1
 8002290:	813b      	strh	r3, [r7, #8]
 8002292:	4613      	mov	r3, r2
 8002294:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d166      	bne.n	8002370 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_I2C_Mem_Read_IT+0x32>
 80022a8:	8bbb      	ldrh	r3, [r7, #28]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e05b      	b.n	8002372 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022c8:	d101      	bne.n	80022ce <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 80022ca:	2302      	movs	r3, #2
 80022cc:	e051      	b.n	8002372 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_I2C_Mem_Read_IT+0x60>
 80022d8:	2302      	movs	r3, #2
 80022da:	e04a      	b.n	8002372 <HAL_I2C_Mem_Read_IT+0xf6>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2222      	movs	r2, #34	; 0x22
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8bba      	ldrh	r2, [r7, #28]
 8002304:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a1c      	ldr	r2, [pc, #112]	; (800237c <HAL_I2C_Mem_Read_IT+0x100>)
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <HAL_I2C_Mem_Read_IT+0x104>)
 8002310:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8002312:	897a      	ldrh	r2, [r7, #10]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d109      	bne.n	8002332 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800231e:	893b      	ldrh	r3, [r7, #8]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f04f 32ff 	mov.w	r2, #4294967295
 800232e:	651a      	str	r2, [r3, #80]	; 0x50
 8002330:	e00b      	b.n	800234a <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002332:	893b      	ldrh	r3, [r7, #8]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	b29b      	uxth	r3, r3
 8002338:	b2da      	uxtb	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002340:	893b      	ldrh	r3, [r7, #8]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	8979      	ldrh	r1, [r7, #10]
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_I2C_Mem_Read_IT+0x108>)
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	2300      	movs	r3, #0
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f001 faf2 	bl	8003940 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002364:	2101      	movs	r1, #1
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f001 fb1c 	bl	80039a4 <I2C_Enable_IRQ>

    return HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e000      	b.n	8002372 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
  }
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	ffff0000 	.word	0xffff0000
 8002380:	08002545 	.word	0x08002545
 8002384:	80002000 	.word	0x80002000

08002388 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	68f9      	ldr	r1, [r7, #12]
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	4798      	blx	r3
  }
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00f      	beq.n	80023fe <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ec:	f043 0201 	orr.w	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023fc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00f      	beq.n	8002428 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f043 0208 	orr.w	r2, r3, #8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002426:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00f      	beq.n	8002452 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	f043 0202 	orr.w	r2, r3, #2
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002450:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 030b 	and.w	r3, r3, #11
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002462:	68f9      	ldr	r1, [r7, #12]
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f001 f911 	bl	800368c <I2C_ITError>
  }
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	70fb      	strb	r3, [r7, #3]
 80024ce:	4613      	mov	r3, r2
 80024d0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af02      	add	r7, sp, #8
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002550:	4b8d      	ldr	r3, [pc, #564]	; (8002788 <I2C_Mem_ISR_IT+0x244>)
 8002552:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <I2C_Mem_ISR_IT+0x22>
 8002562:	2302      	movs	r3, #2
 8002564:	e10c      	b.n	8002780 <I2C_Mem_ISR_IT+0x23c>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d012      	beq.n	800259e <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00d      	beq.n	800259e <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2210      	movs	r2, #16
 8002588:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f043 0204 	orr.w	r2, r3, #4
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f001 f98f 	bl	80038ba <I2C_Flush_TXDR>
 800259c:	e0dd      	b.n	800275a <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d022      	beq.n	80025ee <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01d      	beq.n	80025ee <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025ec:	e0b5      	b.n	800275a <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d02c      	beq.n	8002652 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d027      	beq.n	8002652 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d118      	bne.n	800263e <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	781a      	ldrb	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800263c:	e08d      	b.n	800275a <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002646:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f04f 32ff 	mov.w	r2, #4294967295
 800264e:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002650:	e083      	b.n	800275a <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002658:	2b00      	cmp	r3, #0
 800265a:	d03c      	beq.n	80026d6 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002662:	2b00      	cmp	r3, #0
 8002664:	d037      	beq.n	80026d6 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d02c      	beq.n	80026ca <I2C_Mem_ISR_IT+0x186>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	d128      	bne.n	80026ca <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	2bff      	cmp	r3, #255	; 0xff
 8002680:	d910      	bls.n	80026a4 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	22ff      	movs	r2, #255	; 0xff
 8002686:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	b299      	uxth	r1, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	b2da      	uxtb	r2, r3
 8002694:	2300      	movs	r3, #0
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f001 f94f 	bl	8003940 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a2:	e017      	b.n	80026d4 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	b299      	uxth	r1, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	2300      	movs	r3, #0
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f001 f93c 	bl	8003940 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026c8:	e004      	b.n	80026d4 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80026ca:	2140      	movs	r1, #64	; 0x40
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 ffdd 	bl	800368c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026d2:	e042      	b.n	800275a <I2C_Mem_ISR_IT+0x216>
 80026d4:	e041      	b.n	800275a <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d03c      	beq.n	800275a <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d037      	beq.n	800275a <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80026ea:	2101      	movs	r1, #1
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f001 f9dd 	bl	8003aac <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80026f2:	2102      	movs	r1, #2
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f001 f955 	bl	80039a4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b22      	cmp	r3, #34	; 0x22
 8002704:	d101      	bne.n	800270a <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002706:	4b21      	ldr	r3, [pc, #132]	; (800278c <I2C_Mem_ISR_IT+0x248>)
 8002708:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	2bff      	cmp	r3, #255	; 0xff
 8002712:	d910      	bls.n	8002736 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	22ff      	movs	r2, #255	; 0xff
 8002718:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	b299      	uxth	r1, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	b2da      	uxtb	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f001 f906 	bl	8003940 <I2C_TransferConfig>
 8002734:	e011      	b.n	800275a <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002744:	b299      	uxth	r1, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274a:	b2da      	uxtb	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f001 f8f3 	bl	8003940 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800276e:	6939      	ldr	r1, [r7, #16]
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fd0b 	bl	800318c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	80002000 	.word	0x80002000
 800278c:	80002400 	.word	0x80002400

08002790 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <I2C_Slave_ISR_IT+0x24>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e0e2      	b.n	800297a <I2C_Slave_ISR_IT+0x1ea>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d004      	beq.n	80027da <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80027d0:	6939      	ldr	r1, [r7, #16]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 fda2 	bl	800331c <I2C_ITSlaveCplt>
 80027d8:	e0ca      	b.n	8002970 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d04b      	beq.n	800287c <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d046      	beq.n	800287c <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d128      	bne.n	800284a <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b28      	cmp	r3, #40	; 0x28
 8002802:	d108      	bne.n	8002816 <I2C_Slave_ISR_IT+0x86>
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800280a:	d104      	bne.n	8002816 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800280c:	6939      	ldr	r1, [r7, #16]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fee8 	bl	80035e4 <I2C_ITListenCplt>
 8002814:	e031      	b.n	800287a <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b29      	cmp	r3, #41	; 0x29
 8002820:	d10e      	bne.n	8002840 <I2C_Slave_ISR_IT+0xb0>
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002828:	d00a      	beq.n	8002840 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2210      	movs	r2, #16
 8002830:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f001 f841 	bl	80038ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 fc4b 	bl	80030d4 <I2C_ITSlaveSeqCplt>
 800283e:	e01c      	b.n	800287a <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2210      	movs	r2, #16
 8002846:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002848:	e08f      	b.n	800296a <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2210      	movs	r2, #16
 8002850:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f043 0204 	orr.w	r2, r3, #4
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <I2C_Slave_ISR_IT+0xdc>
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800286a:	d17e      	bne.n	800296a <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002870:	4619      	mov	r1, r3
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 ff0a 	bl	800368c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002878:	e077      	b.n	800296a <I2C_Slave_ISR_IT+0x1da>
 800287a:	e076      	b.n	800296a <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	d02f      	beq.n	80028e6 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800288c:	2b00      	cmp	r3, #0
 800288e:	d02a      	beq.n	80028e6 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d018      	beq.n	80028cc <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d14b      	bne.n	800296e <I2C_Slave_ISR_IT+0x1de>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028dc:	d047      	beq.n	800296e <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fbf8 	bl	80030d4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80028e4:	e043      	b.n	800296e <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d009      	beq.n	8002904 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80028fa:	6939      	ldr	r1, [r7, #16]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fb28 	bl	8002f52 <I2C_ITAddrCplt>
 8002902:	e035      	b.n	8002970 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d030      	beq.n	8002970 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002914:	2b00      	cmp	r3, #0
 8002916:	d02b      	beq.n	8002970 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d018      	beq.n	8002954 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	781a      	ldrb	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
 8002952:	e00d      	b.n	8002970 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800295a:	d002      	beq.n	8002962 <I2C_Slave_ISR_IT+0x1d2>
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fbb6 	bl	80030d4 <I2C_ITSlaveSeqCplt>
 8002968:	e002      	b.n	8002970 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800296a:	bf00      	nop
 800296c:	e000      	b.n	8002970 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800296e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b088      	sub	sp, #32
 8002986:	af02      	add	r7, sp, #8
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <I2C_Master_ISR_DMA+0x1a>
 8002998:	2302      	movs	r3, #2
 800299a:	e0d9      	b.n	8002b50 <I2C_Master_ISR_DMA+0x1ce>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d016      	beq.n	80029dc <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d011      	beq.n	80029dc <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2210      	movs	r2, #16
 80029be:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	f043 0204 	orr.w	r2, r3, #4
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80029cc:	2120      	movs	r1, #32
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 ffe8 	bl	80039a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 ff70 	bl	80038ba <I2C_Flush_TXDR>
 80029da:	e0b4      	b.n	8002b46 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d071      	beq.n	8002aca <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d06c      	beq.n	8002aca <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029fe:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d04e      	beq.n	8002aa8 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a16:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2bff      	cmp	r3, #255	; 0xff
 8002a20:	d906      	bls.n	8002a30 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	22ff      	movs	r2, #255	; 0xff
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002a28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	e010      	b.n	8002a52 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a42:	d003      	beq.n	8002a4c <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e002      	b.n	8002a52 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002a4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a50:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	8a79      	ldrh	r1, [r7, #18]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 ff6d 	bl	8003940 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b22      	cmp	r3, #34	; 0x22
 8002a82:	d108      	bne.n	8002a96 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a92:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a94:	e057      	b.n	8002b46 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aa4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002aa6:	e04e      	b.n	8002b46 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ab6:	d003      	beq.n	8002ac0 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 face 	bl	800305a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002abe:	e042      	b.n	8002b46 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002ac0:	2140      	movs	r1, #64	; 0x40
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fde2 	bl	800368c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002ac8:	e03d      	b.n	8002b46 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d028      	beq.n	8002b26 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d023      	beq.n	8002b26 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d119      	bne.n	8002b1c <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002af6:	d025      	beq.n	8002b44 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b00:	d108      	bne.n	8002b14 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b10:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002b12:	e017      	b.n	8002b44 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 faa0 	bl	800305a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002b1a:	e013      	b.n	8002b44 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b1c:	2140      	movs	r1, #64	; 0x40
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 fdb4 	bl	800368c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002b24:	e00e      	b.n	8002b44 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 fb25 	bl	800318c <I2C_ITMasterCplt>
 8002b42:	e000      	b.n	8002b46 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002b44:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002b64:	4b8d      	ldr	r3, [pc, #564]	; (8002d9c <I2C_Mem_ISR_DMA+0x244>)
 8002b66:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <I2C_Mem_ISR_DMA+0x1e>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e10e      	b.n	8002d94 <I2C_Mem_ISR_DMA+0x23c>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d016      	beq.n	8002bb6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d011      	beq.n	8002bb6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2210      	movs	r2, #16
 8002b98:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f043 0204 	orr.w	r2, r3, #4
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fefb 	bl	80039a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fe83 	bl	80038ba <I2C_Flush_TXDR>
 8002bb4:	e0e9      	b.n	8002d8a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00e      	beq.n	8002bde <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bda:	651a      	str	r2, [r3, #80]	; 0x50
 8002bdc:	e0d5      	b.n	8002d8a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d05f      	beq.n	8002ca8 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d05a      	beq.n	8002ca8 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 ff59 	bl	8003aac <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002bfa:	2110      	movs	r1, #16
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 fed1 	bl	80039a4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d048      	beq.n	8002c9e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2bff      	cmp	r3, #255	; 0xff
 8002c14:	d910      	bls.n	8002c38 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	22ff      	movs	r2, #255	; 0xff
 8002c1a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c20:	b299      	uxth	r1, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	2300      	movs	r3, #0
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fe85 	bl	8003940 <I2C_TransferConfig>
 8002c36:	e011      	b.n	8002c5c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c46:	b299      	uxth	r1, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	2300      	movs	r3, #0
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fe72 	bl	8003940 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b22      	cmp	r3, #34	; 0x22
 8002c78:	d108      	bne.n	8002c8c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c88:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c8a:	e07e      	b.n	8002d8a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c9a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c9c:	e075      	b.n	8002d8a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002c9e:	2140      	movs	r1, #64	; 0x40
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 fcf3 	bl	800368c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002ca6:	e070      	b.n	8002d8a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d05d      	beq.n	8002d6e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d058      	beq.n	8002d6e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fef4 	bl	8003aac <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002cc4:	2110      	movs	r1, #16
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fe6c 	bl	80039a4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b22      	cmp	r3, #34	; 0x22
 8002cd6:	d101      	bne.n	8002cdc <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002cd8:	4b31      	ldr	r3, [pc, #196]	; (8002da0 <I2C_Mem_ISR_DMA+0x248>)
 8002cda:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2bff      	cmp	r3, #255	; 0xff
 8002ce4:	d910      	bls.n	8002d08 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	22ff      	movs	r2, #255	; 0xff
 8002cea:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf0:	b299      	uxth	r1, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fe1d 	bl	8003940 <I2C_TransferConfig>
 8002d06:	e011      	b.n	8002d2c <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d16:	b299      	uxth	r1, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fe0a 	bl	8003940 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b22      	cmp	r3, #34	; 0x22
 8002d48:	d108      	bne.n	8002d5c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d58:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d5a:	e016      	b.n	8002d8a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d6a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d6c:	e00d      	b.n	8002d8a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fa01 	bl	800318c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	80002000 	.word	0x80002000
 8002da0:	80002400 	.word	0x80002400

08002da4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <I2C_Slave_ISR_DMA+0x24>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e0c0      	b.n	8002f4a <I2C_Slave_ISR_DMA+0x1a6>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d004      	beq.n	8002dee <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fa98 	bl	800331c <I2C_ITSlaveCplt>
 8002dec:	e0a8      	b.n	8002f40 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8095 	beq.w	8002f24 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 808f 	beq.w	8002f24 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d104      	bne.n	8002e1a <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d07d      	beq.n	8002f16 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00c      	beq.n	8002e3c <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00c      	beq.n	8002e5e <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d128      	bne.n	8002eb6 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b28      	cmp	r3, #40	; 0x28
 8002e6e:	d108      	bne.n	8002e82 <I2C_Slave_ISR_DMA+0xde>
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e76:	d104      	bne.n	8002e82 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 fbb2 	bl	80035e4 <I2C_ITListenCplt>
 8002e80:	e048      	b.n	8002f14 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b29      	cmp	r3, #41	; 0x29
 8002e8c:	d10e      	bne.n	8002eac <I2C_Slave_ISR_DMA+0x108>
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e94:	d00a      	beq.n	8002eac <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2210      	movs	r2, #16
 8002e9c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fd0b 	bl	80038ba <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f915 	bl	80030d4 <I2C_ITSlaveSeqCplt>
 8002eaa:	e033      	b.n	8002f14 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002eb4:	e034      	b.n	8002f20 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2210      	movs	r2, #16
 8002ebc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f043 0204 	orr.w	r2, r3, #4
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <I2C_Slave_ISR_DMA+0x13c>
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ede:	d11f      	bne.n	8002f20 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	2b21      	cmp	r3, #33	; 0x21
 8002ee4:	d002      	beq.n	8002eec <I2C_Slave_ISR_DMA+0x148>
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	2b29      	cmp	r3, #41	; 0x29
 8002eea:	d103      	bne.n	8002ef4 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2221      	movs	r2, #33	; 0x21
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef2:	e008      	b.n	8002f06 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
 8002ef6:	2b22      	cmp	r3, #34	; 0x22
 8002ef8:	d002      	beq.n	8002f00 <I2C_Slave_ISR_DMA+0x15c>
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	2b2a      	cmp	r3, #42	; 0x2a
 8002efe:	d102      	bne.n	8002f06 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2222      	movs	r2, #34	; 0x22
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 fbbd 	bl	800368c <I2C_ITError>
      if (treatdmanack == 1U)
 8002f12:	e005      	b.n	8002f20 <I2C_Slave_ISR_DMA+0x17c>
 8002f14:	e004      	b.n	8002f20 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f1e:	e00f      	b.n	8002f40 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002f20:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f22:	e00d      	b.n	8002f40 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f809 	bl	8002f52 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f68:	2b28      	cmp	r3, #40	; 0x28
 8002f6a:	d16a      	bne.n	8003042 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	0c1b      	lsrs	r3, r3, #16
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002f8a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f98:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002fa6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d138      	bne.n	8003022 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002fb0:	897b      	ldrh	r3, [r7, #10]
 8002fb2:	09db      	lsrs	r3, r3, #7
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	89bb      	ldrh	r3, [r7, #12]
 8002fb8:	4053      	eors	r3, r2
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f003 0306 	and.w	r3, r3, #6
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d11c      	bne.n	8002ffe <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002fc4:	897b      	ldrh	r3, [r7, #10]
 8002fc6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d13b      	bne.n	8003052 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2208      	movs	r2, #8
 8002fe6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ff0:	89ba      	ldrh	r2, [r7, #12]
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff fa63 	bl	80024c2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ffc:	e029      	b.n	8003052 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002ffe:	893b      	ldrh	r3, [r7, #8]
 8003000:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003002:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fd50 	bl	8003aac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003014:	89ba      	ldrh	r2, [r7, #12]
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	4619      	mov	r1, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff fa51 	bl	80024c2 <HAL_I2C_AddrCallback>
}
 8003020:	e017      	b.n	8003052 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003022:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fd40 	bl	8003aac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003034:	89ba      	ldrh	r2, [r7, #12]
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	4619      	mov	r1, r3
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fa41 	bl	80024c2 <HAL_I2C_AddrCallback>
}
 8003040:	e007      	b.n	8003052 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2208      	movs	r2, #8
 8003048:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b21      	cmp	r3, #33	; 0x21
 8003074:	d115      	bne.n	80030a2 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2211      	movs	r2, #17
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800308a:	2101      	movs	r1, #1
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fd0d 	bl	8003aac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff f9e9 	bl	8002472 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030a0:	e014      	b.n	80030cc <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2212      	movs	r2, #18
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80030b6:	2102      	movs	r1, #2
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fcf7 	bl	8003aac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff f9dd 	bl	8002486 <HAL_I2C_MasterRxCpltCallback>
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e00c      	b.n	8003122 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003120:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b29      	cmp	r3, #41	; 0x29
 800312c:	d112      	bne.n	8003154 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2228      	movs	r2, #40	; 0x28
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2221      	movs	r2, #33	; 0x21
 800313a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800313c:	2101      	movs	r1, #1
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fcb4 	bl	8003aac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff f9a4 	bl	800249a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003152:	e017      	b.n	8003184 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b2a      	cmp	r3, #42	; 0x2a
 800315e:	d111      	bne.n	8003184 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2228      	movs	r2, #40	; 0x28
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2222      	movs	r2, #34	; 0x22
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800316e:	2102      	movs	r1, #2
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fc9b 	bl	8003aac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff f995 	bl	80024ae <HAL_I2C_SlaveRxCpltCallback>
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2220      	movs	r2, #32
 80031a0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b21      	cmp	r3, #33	; 0x21
 80031ac:	d107      	bne.n	80031be <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80031ae:	2101      	movs	r1, #1
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fc7b 	bl	8003aac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2211      	movs	r2, #17
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
 80031bc:	e00c      	b.n	80031d8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b22      	cmp	r3, #34	; 0x22
 80031c8:	d106      	bne.n	80031d8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80031ca:	2102      	movs	r1, #2
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fc6d 	bl	8003aac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2212      	movs	r2, #18
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4b4c      	ldr	r3, [pc, #304]	; (8003314 <I2C_ITMasterCplt+0x188>)
 80031e4:	400b      	ands	r3, r1
 80031e6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a49      	ldr	r2, [pc, #292]	; (8003318 <I2C_ITMasterCplt+0x18c>)
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2210      	movs	r2, #16
 8003204:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	f043 0204 	orr.w	r2, r3, #4
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b60      	cmp	r3, #96	; 0x60
 800321c:	d10a      	bne.n	8003234 <I2C_ITMasterCplt+0xa8>
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	b2db      	uxtb	r3, r3
 8003230:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003232:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 fb40 	bl	80038ba <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b60      	cmp	r3, #96	; 0x60
 800324a:	d002      	beq.n	8003252 <I2C_ITMasterCplt+0xc6>
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d006      	beq.n	8003260 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fa17 	bl	800368c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800325e:	e054      	b.n	800330a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b21      	cmp	r3, #33	; 0x21
 800326a:	d124      	bne.n	80032b6 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b40      	cmp	r3, #64	; 0x40
 8003284:	d10b      	bne.n	800329e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff f92b 	bl	80024f2 <HAL_I2C_MemTxCpltCallback>
}
 800329c:	e035      	b.n	800330a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff f8df 	bl	8002472 <HAL_I2C_MasterTxCpltCallback>
}
 80032b4:	e029      	b.n	800330a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b22      	cmp	r3, #34	; 0x22
 80032c0:	d123      	bne.n	800330a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b40      	cmp	r3, #64	; 0x40
 80032da:	d10b      	bne.n	80032f4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff f90a 	bl	8002506 <HAL_I2C_MemRxCpltCallback>
}
 80032f2:	e00a      	b.n	800330a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff f8be 	bl	8002486 <HAL_I2C_MasterRxCpltCallback>
}
 800330a:	bf00      	nop
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	fe00e800 	.word	0xfe00e800
 8003318:	ffff0000 	.word	0xffff0000

0800331c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800333e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2220      	movs	r2, #32
 8003346:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003348:	7afb      	ldrb	r3, [r7, #11]
 800334a:	2b21      	cmp	r3, #33	; 0x21
 800334c:	d002      	beq.n	8003354 <I2C_ITSlaveCplt+0x38>
 800334e:	7afb      	ldrb	r3, [r7, #11]
 8003350:	2b29      	cmp	r3, #41	; 0x29
 8003352:	d108      	bne.n	8003366 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003354:	f248 0101 	movw	r1, #32769	; 0x8001
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 fba7 	bl	8003aac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2221      	movs	r2, #33	; 0x21
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
 8003364:	e019      	b.n	800339a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003366:	7afb      	ldrb	r3, [r7, #11]
 8003368:	2b22      	cmp	r3, #34	; 0x22
 800336a:	d002      	beq.n	8003372 <I2C_ITSlaveCplt+0x56>
 800336c:	7afb      	ldrb	r3, [r7, #11]
 800336e:	2b2a      	cmp	r3, #42	; 0x2a
 8003370:	d108      	bne.n	8003384 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003372:	f248 0102 	movw	r1, #32770	; 0x8002
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fb98 	bl	8003aac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2222      	movs	r2, #34	; 0x22
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
 8003382:	e00a      	b.n	800339a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003384:	7afb      	ldrb	r3, [r7, #11]
 8003386:	2b28      	cmp	r3, #40	; 0x28
 8003388:	d107      	bne.n	800339a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800338a:	f248 0103 	movw	r1, #32771	; 0x8003
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fb8c 	bl	8003aac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033a8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b89      	ldr	r3, [pc, #548]	; (80035dc <I2C_ITSlaveCplt+0x2c0>)
 80033b6:	400b      	ands	r3, r1
 80033b8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fa7d 	bl	80038ba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d013      	beq.n	80033f2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d01f      	beq.n	8003422 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033f0:	e017      	b.n	8003422 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d012      	beq.n	8003422 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800340a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003410:	2b00      	cmp	r3, #0
 8003412:	d006      	beq.n	8003422 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	b29a      	uxth	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d020      	beq.n	800346e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f023 0304 	bic.w	r3, r3, #4
 8003432:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00c      	beq.n	800346e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	f043 0204 	orr.w	r2, r3, #4
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d049      	beq.n	8003522 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003494:	2b00      	cmp	r3, #0
 8003496:	d044      	beq.n	8003522 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d128      	bne.n	80034f4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b28      	cmp	r3, #40	; 0x28
 80034ac:	d108      	bne.n	80034c0 <I2C_ITSlaveCplt+0x1a4>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034b4:	d104      	bne.n	80034c0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80034b6:	6979      	ldr	r1, [r7, #20]
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f893 	bl	80035e4 <I2C_ITListenCplt>
 80034be:	e030      	b.n	8003522 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b29      	cmp	r3, #41	; 0x29
 80034ca:	d10e      	bne.n	80034ea <I2C_ITSlaveCplt+0x1ce>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034d2:	d00a      	beq.n	80034ea <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2210      	movs	r2, #16
 80034da:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f9ec 	bl	80038ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff fdf6 	bl	80030d4 <I2C_ITSlaveSeqCplt>
 80034e8:	e01b      	b.n	8003522 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2210      	movs	r2, #16
 80034f0:	61da      	str	r2, [r3, #28]
 80034f2:	e016      	b.n	8003522 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2210      	movs	r2, #16
 80034fa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	f043 0204 	orr.w	r2, r3, #4
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <I2C_ITSlaveCplt+0x1fa>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003514:	d105      	bne.n	8003522 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	4619      	mov	r1, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f8b5 	bl	800368c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003534:	2b00      	cmp	r3, #0
 8003536:	d010      	beq.n	800355a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	4619      	mov	r1, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f8a4 	bl	800368c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b28      	cmp	r3, #40	; 0x28
 800354e:	d141      	bne.n	80035d4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003550:	6979      	ldr	r1, [r7, #20]
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f846 	bl	80035e4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003558:	e03c      	b.n	80035d4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003562:	d014      	beq.n	800358e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff fdb5 	bl	80030d4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <I2C_ITSlaveCplt+0x2c4>)
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fe ffa9 	bl	80024de <HAL_I2C_ListenCpltCallback>
}
 800358c:	e022      	b.n	80035d4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b22      	cmp	r3, #34	; 0x22
 8003598:	d10e      	bne.n	80035b8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7fe ff7c 	bl	80024ae <HAL_I2C_SlaveRxCpltCallback>
}
 80035b6:	e00d      	b.n	80035d4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fe ff63 	bl	800249a <HAL_I2C_SlaveTxCpltCallback>
}
 80035d4:	bf00      	nop
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	fe00e800 	.word	0xfe00e800
 80035e0:	ffff0000 	.word	0xffff0000

080035e4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a25      	ldr	r2, [pc, #148]	; (8003688 <I2C_ITListenCplt+0xa4>)
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d022      	beq.n	8003660 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003636:	2b00      	cmp	r3, #0
 8003638:	d012      	beq.n	8003660 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	f043 0204 	orr.w	r2, r3, #4
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003660:	f248 0103 	movw	r1, #32771	; 0x8003
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fa21 	bl	8003aac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2210      	movs	r2, #16
 8003670:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fe ff2f 	bl	80024de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	ffff0000 	.word	0xffff0000

0800368c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a6d      	ldr	r2, [pc, #436]	; (8003860 <I2C_ITError+0x1d4>)
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	2b28      	cmp	r3, #40	; 0x28
 80036c2:	d005      	beq.n	80036d0 <I2C_ITError+0x44>
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b29      	cmp	r3, #41	; 0x29
 80036c8:	d002      	beq.n	80036d0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	2b2a      	cmp	r3, #42	; 0x2a
 80036ce:	d10b      	bne.n	80036e8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036d0:	2103      	movs	r1, #3
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f9ea 	bl	8003aac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2228      	movs	r2, #40	; 0x28
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a60      	ldr	r2, [pc, #384]	; (8003864 <I2C_ITError+0x1d8>)
 80036e4:	635a      	str	r2, [r3, #52]	; 0x34
 80036e6:	e030      	b.n	800374a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036e8:	f248 0103 	movw	r1, #32771	; 0x8003
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f9dd 	bl	8003aac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f8e1 	bl	80038ba <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b60      	cmp	r3, #96	; 0x60
 8003702:	d01f      	beq.n	8003744 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b20      	cmp	r3, #32
 8003718:	d114      	bne.n	8003744 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b10      	cmp	r3, #16
 8003726:	d109      	bne.n	800373c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2210      	movs	r2, #16
 800372e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003734:	f043 0204 	orr.w	r2, r3, #4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2220      	movs	r2, #32
 8003742:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	2b00      	cmp	r3, #0
 8003756:	d039      	beq.n	80037cc <I2C_ITError+0x140>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b11      	cmp	r3, #17
 800375c:	d002      	beq.n	8003764 <I2C_ITError+0xd8>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b21      	cmp	r3, #33	; 0x21
 8003762:	d133      	bne.n	80037cc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800376e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003772:	d107      	bne.n	8003784 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003782:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe fa0d 	bl	8001ba8 <HAL_DMA_GetState>
 800378e:	4603      	mov	r3, r0
 8003790:	2b01      	cmp	r3, #1
 8003792:	d017      	beq.n	80037c4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	4a33      	ldr	r2, [pc, #204]	; (8003868 <I2C_ITError+0x1dc>)
 800379a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fe f8e7 	bl	800197c <HAL_DMA_Abort_IT>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d04d      	beq.n	8003850 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037be:	4610      	mov	r0, r2
 80037c0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037c2:	e045      	b.n	8003850 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f851 	bl	800386c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037ca:	e041      	b.n	8003850 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d039      	beq.n	8003848 <I2C_ITError+0x1bc>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b12      	cmp	r3, #18
 80037d8:	d002      	beq.n	80037e0 <I2C_ITError+0x154>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b22      	cmp	r3, #34	; 0x22
 80037de:	d133      	bne.n	8003848 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ee:	d107      	bne.n	8003800 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe f9cf 	bl	8001ba8 <HAL_DMA_GetState>
 800380a:	4603      	mov	r3, r0
 800380c:	2b01      	cmp	r3, #1
 800380e:	d017      	beq.n	8003840 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003814:	4a14      	ldr	r2, [pc, #80]	; (8003868 <I2C_ITError+0x1dc>)
 8003816:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe f8a9 	bl	800197c <HAL_DMA_Abort_IT>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d011      	beq.n	8003854 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800383a:	4610      	mov	r0, r2
 800383c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800383e:	e009      	b.n	8003854 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f813 	bl	800386c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003846:	e005      	b.n	8003854 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f80f 	bl	800386c <I2C_TreatErrorCallback>
  }
}
 800384e:	e002      	b.n	8003856 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003850:	bf00      	nop
 8003852:	e000      	b.n	8003856 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003854:	bf00      	nop
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	ffff0000 	.word	0xffff0000
 8003864:	08002791 	.word	0x08002791
 8003868:	08003903 	.word	0x08003903

0800386c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b60      	cmp	r3, #96	; 0x60
 800387e:	d10e      	bne.n	800389e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fe fe49 	bl	800252e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800389c:	e009      	b.n	80038b2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7fe fe34 	bl	800251a <HAL_I2C_ErrorCallback>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d103      	bne.n	80038d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2200      	movs	r2, #0
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d007      	beq.n	80038f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699a      	ldr	r2, [r3, #24]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	619a      	str	r2, [r3, #24]
  }
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	2200      	movs	r2, #0
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	2200      	movs	r2, #0
 800392e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff ff9b 	bl	800386c <I2C_TreatErrorCallback>
}
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	607b      	str	r3, [r7, #4]
 800394a:	460b      	mov	r3, r1
 800394c:	817b      	strh	r3, [r7, #10]
 800394e:	4613      	mov	r3, r2
 8003950:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003952:	897b      	ldrh	r3, [r7, #10]
 8003954:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003958:	7a7b      	ldrb	r3, [r7, #9]
 800395a:	041b      	lsls	r3, r3, #16
 800395c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003960:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	4313      	orrs	r3, r2
 800396a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800396e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	0d5b      	lsrs	r3, r3, #21
 800397a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800397e:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <I2C_TransferConfig+0x60>)
 8003980:	430b      	orrs	r3, r1
 8003982:	43db      	mvns	r3, r3
 8003984:	ea02 0103 	and.w	r1, r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	03ff63ff 	.word	0x03ff63ff

080039a4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b8:	4a39      	ldr	r2, [pc, #228]	; (8003aa0 <I2C_Enable_IRQ+0xfc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d032      	beq.n	8003a24 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80039c2:	4a38      	ldr	r2, [pc, #224]	; (8003aa4 <I2C_Enable_IRQ+0x100>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d02d      	beq.n	8003a24 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80039cc:	4a36      	ldr	r2, [pc, #216]	; (8003aa8 <I2C_Enable_IRQ+0x104>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d028      	beq.n	8003a24 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80039d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da03      	bge.n	80039e2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80039e0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80039f2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80039f4:	887b      	ldrh	r3, [r7, #2]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003a04:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	2b10      	cmp	r3, #16
 8003a0a:	d103      	bne.n	8003a14 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a12:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a14:	887b      	ldrh	r3, [r7, #2]
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d133      	bne.n	8003a82 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f043 0320 	orr.w	r3, r3, #32
 8003a20:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a22:	e02e      	b.n	8003a82 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	da03      	bge.n	8003a34 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003a32:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a34:	887b      	ldrh	r3, [r7, #2]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003a44:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a46:	887b      	ldrh	r3, [r7, #2]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003a56:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a58:	887b      	ldrh	r3, [r7, #2]
 8003a5a:	2b10      	cmp	r3, #16
 8003a5c:	d103      	bne.n	8003a66 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a64:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d103      	bne.n	8003a74 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a72:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a74:	887b      	ldrh	r3, [r7, #2]
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d103      	bne.n	8003a82 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a80:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6819      	ldr	r1, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]
}
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	08002983 	.word	0x08002983
 8003aa4:	08002da5 	.word	0x08002da5
 8003aa8:	08002b59 	.word	0x08002b59

08003aac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003abc:	887b      	ldrh	r3, [r7, #2]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00f      	beq.n	8003ae6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003acc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ada:	2b28      	cmp	r3, #40	; 0x28
 8003adc:	d003      	beq.n	8003ae6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ae4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ae6:	887b      	ldrh	r3, [r7, #2]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00f      	beq.n	8003b10 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003af6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b04:	2b28      	cmp	r3, #40	; 0x28
 8003b06:	d003      	beq.n	8003b10 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b0e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	da03      	bge.n	8003b20 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003b1e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b20:	887b      	ldrh	r3, [r7, #2]
 8003b22:	2b10      	cmp	r3, #16
 8003b24:	d103      	bne.n	8003b2e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003b2c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b2e:	887b      	ldrh	r3, [r7, #2]
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d103      	bne.n	8003b3c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f043 0320 	orr.w	r3, r3, #32
 8003b3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b3c:	887b      	ldrh	r3, [r7, #2]
 8003b3e:	2b40      	cmp	r3, #64	; 0x40
 8003b40:	d103      	bne.n	8003b4a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b48:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	43da      	mvns	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	400a      	ands	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d138      	bne.n	8003bf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e032      	b.n	8003bf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2224      	movs	r2, #36	; 0x24
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6819      	ldr	r1, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	e000      	b.n	8003bf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bf0:	2302      	movs	r3, #2
  }
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d139      	bne.n	8003c88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e033      	b.n	8003c8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2224      	movs	r2, #36	; 0x24
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0201 	bic.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e000      	b.n	8003c8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d141      	bne.n	8003d2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ca6:	4b4b      	ldr	r3, [pc, #300]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb2:	d131      	bne.n	8003d18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cb4:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cba:	4a46      	ldr	r2, [pc, #280]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cc4:	4b43      	ldr	r3, [pc, #268]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ccc:	4a41      	ldr	r2, [pc, #260]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cd4:	4b40      	ldr	r3, [pc, #256]	; (8003dd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2232      	movs	r2, #50	; 0x32
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
 8003cde:	4a3f      	ldr	r2, [pc, #252]	; (8003ddc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	0c9b      	lsrs	r3, r3, #18
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cea:	e002      	b.n	8003cf2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf2:	4b38      	ldr	r3, [pc, #224]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfe:	d102      	bne.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f2      	bne.n	8003cec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d06:	4b33      	ldr	r3, [pc, #204]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d12:	d158      	bne.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e057      	b.n	8003dc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d18:	4b2e      	ldr	r3, [pc, #184]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d1e:	4a2d      	ldr	r2, [pc, #180]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d28:	e04d      	b.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d30:	d141      	bne.n	8003db6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d32:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3e:	d131      	bne.n	8003da4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d40:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d46:	4a23      	ldr	r2, [pc, #140]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d50:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d58:	4a1e      	ldr	r2, [pc, #120]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d60:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2232      	movs	r2, #50	; 0x32
 8003d66:	fb02 f303 	mul.w	r3, r2, r3
 8003d6a:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	0c9b      	lsrs	r3, r3, #18
 8003d72:	3301      	adds	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d76:	e002      	b.n	8003d7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d7e:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8a:	d102      	bne.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f2      	bne.n	8003d78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9e:	d112      	bne.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e011      	b.n	8003dc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003daa:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003db4:	e007      	b.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003db6:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dbe:	4a05      	ldr	r2, [pc, #20]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dc4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	200000d4 	.word	0x200000d4
 8003ddc:	431bde83 	.word	0x431bde83

08003de0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dee:	6093      	str	r3, [r2, #8]
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40007000 	.word	0x40007000

08003e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e2fe      	b.n	8004410 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d075      	beq.n	8003f0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e1e:	4b97      	ldr	r3, [pc, #604]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e28:	4b94      	ldr	r3, [pc, #592]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b0c      	cmp	r3, #12
 8003e36:	d102      	bne.n	8003e3e <HAL_RCC_OscConfig+0x3e>
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d002      	beq.n	8003e44 <HAL_RCC_OscConfig+0x44>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d10b      	bne.n	8003e5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	4b8d      	ldr	r3, [pc, #564]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d05b      	beq.n	8003f08 <HAL_RCC_OscConfig+0x108>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d157      	bne.n	8003f08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e2d9      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e64:	d106      	bne.n	8003e74 <HAL_RCC_OscConfig+0x74>
 8003e66:	4b85      	ldr	r3, [pc, #532]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a84      	ldr	r2, [pc, #528]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e01d      	b.n	8003eb0 <HAL_RCC_OscConfig+0xb0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x98>
 8003e7e:	4b7f      	ldr	r3, [pc, #508]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a7e      	ldr	r2, [pc, #504]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b7c      	ldr	r3, [pc, #496]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a7b      	ldr	r2, [pc, #492]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCC_OscConfig+0xb0>
 8003e98:	4b78      	ldr	r3, [pc, #480]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a77      	ldr	r2, [pc, #476]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b75      	ldr	r3, [pc, #468]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a74      	ldr	r2, [pc, #464]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fd fb7a 	bl	80015b0 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7fd fb76 	bl	80015b0 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	; 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e29e      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ed2:	4b6a      	ldr	r3, [pc, #424]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xc0>
 8003ede:	e014      	b.n	8003f0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fb66 	bl	80015b0 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fd fb62 	bl	80015b0 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	; 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e28a      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003efa:	4b60      	ldr	r3, [pc, #384]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0xe8>
 8003f06:	e000      	b.n	8003f0a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d075      	beq.n	8004002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f16:	4b59      	ldr	r3, [pc, #356]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f20:	4b56      	ldr	r3, [pc, #344]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b0c      	cmp	r3, #12
 8003f2e:	d102      	bne.n	8003f36 <HAL_RCC_OscConfig+0x136>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d002      	beq.n	8003f3c <HAL_RCC_OscConfig+0x13c>
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d11f      	bne.n	8003f7c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f3c:	4b4f      	ldr	r3, [pc, #316]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_OscConfig+0x154>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e25d      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f54:	4b49      	ldr	r3, [pc, #292]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	061b      	lsls	r3, r3, #24
 8003f62:	4946      	ldr	r1, [pc, #280]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f68:	4b45      	ldr	r3, [pc, #276]	; (8004080 <HAL_RCC_OscConfig+0x280>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fd fad3 	bl	8001518 <HAL_InitTick>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d043      	beq.n	8004000 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e249      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d023      	beq.n	8003fcc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f84:	4b3d      	ldr	r3, [pc, #244]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a3c      	ldr	r2, [pc, #240]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fd fb0e 	bl	80015b0 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f98:	f7fd fb0a 	bl	80015b0 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e232      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003faa:	4b34      	ldr	r3, [pc, #208]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb6:	4b31      	ldr	r3, [pc, #196]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	492d      	ldr	r1, [pc, #180]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	604b      	str	r3, [r1, #4]
 8003fca:	e01a      	b.n	8004002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2a      	ldr	r2, [pc, #168]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fd faea 	bl	80015b0 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe0:	f7fd fae6 	bl	80015b0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e20e      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ff2:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x1e0>
 8003ffe:	e000      	b.n	8004002 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004000:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d041      	beq.n	8004092 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01c      	beq.n	8004050 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004016:	4b19      	ldr	r3, [pc, #100]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8004018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401c:	4a17      	ldr	r2, [pc, #92]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004026:	f7fd fac3 	bl	80015b0 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800402e:	f7fd fabf 	bl	80015b0 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e1e7      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004040:	4b0e      	ldr	r3, [pc, #56]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8004042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0ef      	beq.n	800402e <HAL_RCC_OscConfig+0x22e>
 800404e:	e020      	b.n	8004092 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004050:	4b0a      	ldr	r3, [pc, #40]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8004052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004056:	4a09      	ldr	r2, [pc, #36]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004060:	f7fd faa6 	bl	80015b0 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004066:	e00d      	b.n	8004084 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004068:	f7fd faa2 	bl	80015b0 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d906      	bls.n	8004084 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e1ca      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
 800407a:	bf00      	nop
 800407c:	40021000 	.word	0x40021000
 8004080:	200000d8 	.word	0x200000d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004084:	4b8c      	ldr	r3, [pc, #560]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1ea      	bne.n	8004068 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80a6 	beq.w	80041ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040a0:	2300      	movs	r3, #0
 80040a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040a4:	4b84      	ldr	r3, [pc, #528]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80040a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_OscConfig+0x2b4>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <HAL_RCC_OscConfig+0x2b6>
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	4b7f      	ldr	r3, [pc, #508]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040be:	4a7e      	ldr	r2, [pc, #504]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6593      	str	r3, [r2, #88]	; 0x58
 80040c6:	4b7c      	ldr	r3, [pc, #496]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040d2:	2301      	movs	r3, #1
 80040d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d6:	4b79      	ldr	r3, [pc, #484]	; (80042bc <HAL_RCC_OscConfig+0x4bc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d118      	bne.n	8004114 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040e2:	4b76      	ldr	r3, [pc, #472]	; (80042bc <HAL_RCC_OscConfig+0x4bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a75      	ldr	r2, [pc, #468]	; (80042bc <HAL_RCC_OscConfig+0x4bc>)
 80040e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ee:	f7fd fa5f 	bl	80015b0 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f6:	f7fd fa5b 	bl	80015b0 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e183      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004108:	4b6c      	ldr	r3, [pc, #432]	; (80042bc <HAL_RCC_OscConfig+0x4bc>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d108      	bne.n	800412e <HAL_RCC_OscConfig+0x32e>
 800411c:	4b66      	ldr	r3, [pc, #408]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	4a65      	ldr	r2, [pc, #404]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800412c:	e024      	b.n	8004178 <HAL_RCC_OscConfig+0x378>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b05      	cmp	r3, #5
 8004134:	d110      	bne.n	8004158 <HAL_RCC_OscConfig+0x358>
 8004136:	4b60      	ldr	r3, [pc, #384]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	4a5e      	ldr	r2, [pc, #376]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800413e:	f043 0304 	orr.w	r3, r3, #4
 8004142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004146:	4b5c      	ldr	r3, [pc, #368]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414c:	4a5a      	ldr	r2, [pc, #360]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004156:	e00f      	b.n	8004178 <HAL_RCC_OscConfig+0x378>
 8004158:	4b57      	ldr	r3, [pc, #348]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	4a56      	ldr	r2, [pc, #344]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004168:	4b53      	ldr	r3, [pc, #332]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416e:	4a52      	ldr	r2, [pc, #328]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004170:	f023 0304 	bic.w	r3, r3, #4
 8004174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d016      	beq.n	80041ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004180:	f7fd fa16 	bl	80015b0 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004186:	e00a      	b.n	800419e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004188:	f7fd fa12 	bl	80015b0 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e138      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419e:	4b46      	ldr	r3, [pc, #280]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0ed      	beq.n	8004188 <HAL_RCC_OscConfig+0x388>
 80041ac:	e015      	b.n	80041da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ae:	f7fd f9ff 	bl	80015b0 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041b4:	e00a      	b.n	80041cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b6:	f7fd f9fb 	bl	80015b0 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e121      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041cc:	4b3a      	ldr	r3, [pc, #232]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1ed      	bne.n	80041b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041da:	7ffb      	ldrb	r3, [r7, #31]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d105      	bne.n	80041ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e0:	4b35      	ldr	r3, [pc, #212]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e4:	4a34      	ldr	r2, [pc, #208]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80041e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d03c      	beq.n	8004272 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01c      	beq.n	800423a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004200:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004202:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004206:	4a2c      	ldr	r2, [pc, #176]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004210:	f7fd f9ce 	bl	80015b0 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004218:	f7fd f9ca 	bl	80015b0 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e0f2      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800422a:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800422c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0ef      	beq.n	8004218 <HAL_RCC_OscConfig+0x418>
 8004238:	e01b      	b.n	8004272 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800423a:	4b1f      	ldr	r3, [pc, #124]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800423c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004240:	4a1d      	ldr	r2, [pc, #116]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424a:	f7fd f9b1 	bl	80015b0 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004252:	f7fd f9ad 	bl	80015b0 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e0d5      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004264:	4b14      	ldr	r3, [pc, #80]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1ef      	bne.n	8004252 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80c9 	beq.w	800440e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800427c:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 030c 	and.w	r3, r3, #12
 8004284:	2b0c      	cmp	r3, #12
 8004286:	f000 8083 	beq.w	8004390 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d15e      	bne.n	8004350 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004292:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a08      	ldr	r2, [pc, #32]	; (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004298:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800429c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fd f987 	bl	80015b0 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a4:	e00c      	b.n	80042c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a6:	f7fd f983 	bl	80015b0 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d905      	bls.n	80042c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e0ab      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c0:	4b55      	ldr	r3, [pc, #340]	; (8004418 <HAL_RCC_OscConfig+0x618>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1ec      	bne.n	80042a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042cc:	4b52      	ldr	r3, [pc, #328]	; (8004418 <HAL_RCC_OscConfig+0x618>)
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	4b52      	ldr	r3, [pc, #328]	; (800441c <HAL_RCC_OscConfig+0x61c>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6a11      	ldr	r1, [r2, #32]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042dc:	3a01      	subs	r2, #1
 80042de:	0112      	lsls	r2, r2, #4
 80042e0:	4311      	orrs	r1, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80042e6:	0212      	lsls	r2, r2, #8
 80042e8:	4311      	orrs	r1, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042ee:	0852      	lsrs	r2, r2, #1
 80042f0:	3a01      	subs	r2, #1
 80042f2:	0552      	lsls	r2, r2, #21
 80042f4:	4311      	orrs	r1, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042fa:	0852      	lsrs	r2, r2, #1
 80042fc:	3a01      	subs	r2, #1
 80042fe:	0652      	lsls	r2, r2, #25
 8004300:	4311      	orrs	r1, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004306:	06d2      	lsls	r2, r2, #27
 8004308:	430a      	orrs	r2, r1
 800430a:	4943      	ldr	r1, [pc, #268]	; (8004418 <HAL_RCC_OscConfig+0x618>)
 800430c:	4313      	orrs	r3, r2
 800430e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004310:	4b41      	ldr	r3, [pc, #260]	; (8004418 <HAL_RCC_OscConfig+0x618>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a40      	ldr	r2, [pc, #256]	; (8004418 <HAL_RCC_OscConfig+0x618>)
 8004316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800431a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800431c:	4b3e      	ldr	r3, [pc, #248]	; (8004418 <HAL_RCC_OscConfig+0x618>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a3d      	ldr	r2, [pc, #244]	; (8004418 <HAL_RCC_OscConfig+0x618>)
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004326:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fd f942 	bl	80015b0 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004330:	f7fd f93e 	bl	80015b0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e066      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004342:	4b35      	ldr	r3, [pc, #212]	; (8004418 <HAL_RCC_OscConfig+0x618>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x530>
 800434e:	e05e      	b.n	800440e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004350:	4b31      	ldr	r3, [pc, #196]	; (8004418 <HAL_RCC_OscConfig+0x618>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a30      	ldr	r2, [pc, #192]	; (8004418 <HAL_RCC_OscConfig+0x618>)
 8004356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800435a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435c:	f7fd f928 	bl	80015b0 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004364:	f7fd f924 	bl	80015b0 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e04c      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004376:	4b28      	ldr	r3, [pc, #160]	; (8004418 <HAL_RCC_OscConfig+0x618>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004382:	4b25      	ldr	r3, [pc, #148]	; (8004418 <HAL_RCC_OscConfig+0x618>)
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	4924      	ldr	r1, [pc, #144]	; (8004418 <HAL_RCC_OscConfig+0x618>)
 8004388:	4b25      	ldr	r3, [pc, #148]	; (8004420 <HAL_RCC_OscConfig+0x620>)
 800438a:	4013      	ands	r3, r2
 800438c:	60cb      	str	r3, [r1, #12]
 800438e:	e03e      	b.n	800440e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e039      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800439c:	4b1e      	ldr	r3, [pc, #120]	; (8004418 <HAL_RCC_OscConfig+0x618>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f003 0203 	and.w	r2, r3, #3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d12c      	bne.n	800440a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	3b01      	subs	r3, #1
 80043bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043be:	429a      	cmp	r2, r3
 80043c0:	d123      	bne.n	800440a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d11b      	bne.n	800440a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d113      	bne.n	800440a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	3b01      	subs	r3, #1
 80043f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d109      	bne.n	800440a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	3b01      	subs	r3, #1
 8004404:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004406:	429a      	cmp	r2, r3
 8004408:	d001      	beq.n	800440e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	019f800c 	.word	0x019f800c
 8004420:	feeefffc 	.word	0xfeeefffc

08004424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e11e      	b.n	800467a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800443c:	4b91      	ldr	r3, [pc, #580]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d910      	bls.n	800446c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444a:	4b8e      	ldr	r3, [pc, #568]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f023 020f 	bic.w	r2, r3, #15
 8004452:	498c      	ldr	r1, [pc, #560]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800445a:	4b8a      	ldr	r3, [pc, #552]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d001      	beq.n	800446c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e106      	b.n	800467a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d073      	beq.n	8004560 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d129      	bne.n	80044d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004480:	4b81      	ldr	r3, [pc, #516]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0f4      	b.n	800467a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004490:	f000 f99e 	bl	80047d0 <RCC_GetSysClockFreqFromPLLSource>
 8004494:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4a7c      	ldr	r2, [pc, #496]	; (800468c <HAL_RCC_ClockConfig+0x268>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d93f      	bls.n	800451e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800449e:	4b7a      	ldr	r3, [pc, #488]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d009      	beq.n	80044be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d033      	beq.n	800451e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d12f      	bne.n	800451e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044be:	4b72      	ldr	r3, [pc, #456]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044c6:	4a70      	ldr	r2, [pc, #448]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 80044c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	e024      	b.n	800451e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d107      	bne.n	80044ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044dc:	4b6a      	ldr	r3, [pc, #424]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d109      	bne.n	80044fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0c6      	b.n	800467a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044ec:	4b66      	ldr	r3, [pc, #408]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0be      	b.n	800467a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80044fc:	f000 f8ce 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8004500:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4a61      	ldr	r2, [pc, #388]	; (800468c <HAL_RCC_ClockConfig+0x268>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d909      	bls.n	800451e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800450a:	4b5f      	ldr	r3, [pc, #380]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004512:	4a5d      	ldr	r2, [pc, #372]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 8004514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004518:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800451a:	2380      	movs	r3, #128	; 0x80
 800451c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800451e:	4b5a      	ldr	r3, [pc, #360]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f023 0203 	bic.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4957      	ldr	r1, [pc, #348]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 800452c:	4313      	orrs	r3, r2
 800452e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004530:	f7fd f83e 	bl	80015b0 <HAL_GetTick>
 8004534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004536:	e00a      	b.n	800454e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004538:	f7fd f83a 	bl	80015b0 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	; 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e095      	b.n	800467a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	4b4e      	ldr	r3, [pc, #312]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 020c 	and.w	r2, r3, #12
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	429a      	cmp	r2, r3
 800455e:	d1eb      	bne.n	8004538 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d023      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004578:	4b43      	ldr	r3, [pc, #268]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4a42      	ldr	r2, [pc, #264]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 800457e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004582:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d007      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004590:	4b3d      	ldr	r3, [pc, #244]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004598:	4a3b      	ldr	r2, [pc, #236]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 800459a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800459e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a0:	4b39      	ldr	r3, [pc, #228]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	4936      	ldr	r1, [pc, #216]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2b80      	cmp	r3, #128	; 0x80
 80045b8:	d105      	bne.n	80045c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045ba:	4b33      	ldr	r3, [pc, #204]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	4a32      	ldr	r2, [pc, #200]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 80045c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045c6:	4b2f      	ldr	r3, [pc, #188]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d21d      	bcs.n	8004610 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d4:	4b2b      	ldr	r3, [pc, #172]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f023 020f 	bic.w	r2, r3, #15
 80045dc:	4929      	ldr	r1, [pc, #164]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045e4:	f7fc ffe4 	bl	80015b0 <HAL_GetTick>
 80045e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ec:	f7fc ffe0 	bl	80015b0 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e03b      	b.n	800467a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004602:	4b20      	ldr	r3, [pc, #128]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d1ed      	bne.n	80045ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d008      	beq.n	800462e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800461c:	4b1a      	ldr	r3, [pc, #104]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4917      	ldr	r1, [pc, #92]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 800462a:	4313      	orrs	r3, r2
 800462c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800463a:	4b13      	ldr	r3, [pc, #76]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	490f      	ldr	r1, [pc, #60]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800464e:	f000 f825 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8004652:	4602      	mov	r2, r0
 8004654:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <HAL_RCC_ClockConfig+0x264>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	091b      	lsrs	r3, r3, #4
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	490c      	ldr	r1, [pc, #48]	; (8004690 <HAL_RCC_ClockConfig+0x26c>)
 8004660:	5ccb      	ldrb	r3, [r1, r3]
 8004662:	f003 031f 	and.w	r3, r3, #31
 8004666:	fa22 f303 	lsr.w	r3, r2, r3
 800466a:	4a0a      	ldr	r2, [pc, #40]	; (8004694 <HAL_RCC_ClockConfig+0x270>)
 800466c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800466e:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <HAL_RCC_ClockConfig+0x274>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fc ff50 	bl	8001518 <HAL_InitTick>
 8004678:	4603      	mov	r3, r0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40022000 	.word	0x40022000
 8004688:	40021000 	.word	0x40021000
 800468c:	04c4b400 	.word	0x04c4b400
 8004690:	08006fa8 	.word	0x08006fa8
 8004694:	200000d4 	.word	0x200000d4
 8004698:	200000d8 	.word	0x200000d8

0800469c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046a2:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d102      	bne.n	80046b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046ae:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	e047      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046b4:	4b27      	ldr	r3, [pc, #156]	; (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 030c 	and.w	r3, r3, #12
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d102      	bne.n	80046c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046c0:	4b26      	ldr	r3, [pc, #152]	; (800475c <HAL_RCC_GetSysClockFreq+0xc0>)
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	e03e      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80046c6:	4b23      	ldr	r3, [pc, #140]	; (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d136      	bne.n	8004740 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046d2:	4b20      	ldr	r3, [pc, #128]	; (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046dc:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	3301      	adds	r3, #1
 80046e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d10c      	bne.n	800470a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046f0:	4a1a      	ldr	r2, [pc, #104]	; (800475c <HAL_RCC_GetSysClockFreq+0xc0>)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	4a16      	ldr	r2, [pc, #88]	; (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046fa:	68d2      	ldr	r2, [r2, #12]
 80046fc:	0a12      	lsrs	r2, r2, #8
 80046fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	617b      	str	r3, [r7, #20]
      break;
 8004708:	e00c      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800470a:	4a13      	ldr	r2, [pc, #76]	; (8004758 <HAL_RCC_GetSysClockFreq+0xbc>)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004712:	4a10      	ldr	r2, [pc, #64]	; (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004714:	68d2      	ldr	r2, [r2, #12]
 8004716:	0a12      	lsrs	r2, r2, #8
 8004718:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800471c:	fb02 f303 	mul.w	r3, r2, r3
 8004720:	617b      	str	r3, [r7, #20]
      break;
 8004722:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	0e5b      	lsrs	r3, r3, #25
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	3301      	adds	r3, #1
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	e001      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004744:	693b      	ldr	r3, [r7, #16]
}
 8004746:	4618      	mov	r0, r3
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	00f42400 	.word	0x00f42400
 800475c:	016e3600 	.word	0x016e3600

08004760 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004764:	4b03      	ldr	r3, [pc, #12]	; (8004774 <HAL_RCC_GetHCLKFreq+0x14>)
 8004766:	681b      	ldr	r3, [r3, #0]
}
 8004768:	4618      	mov	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	200000d4 	.word	0x200000d4

08004778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800477c:	f7ff fff0 	bl	8004760 <HAL_RCC_GetHCLKFreq>
 8004780:	4602      	mov	r2, r0
 8004782:	4b06      	ldr	r3, [pc, #24]	; (800479c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	0a1b      	lsrs	r3, r3, #8
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	4904      	ldr	r1, [pc, #16]	; (80047a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800478e:	5ccb      	ldrb	r3, [r1, r3]
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004798:	4618      	mov	r0, r3
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	08006fb8 	.word	0x08006fb8

080047a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047a8:	f7ff ffda 	bl	8004760 <HAL_RCC_GetHCLKFreq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	0adb      	lsrs	r3, r3, #11
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	4904      	ldr	r1, [pc, #16]	; (80047cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80047ba:	5ccb      	ldrb	r3, [r1, r3]
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40021000 	.word	0x40021000
 80047cc:	08006fb8 	.word	0x08006fb8

080047d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047d6:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047e0:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	3301      	adds	r3, #1
 80047ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d10c      	bne.n	800480e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047f4:	4a17      	ldr	r2, [pc, #92]	; (8004854 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	4a14      	ldr	r2, [pc, #80]	; (8004850 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047fe:	68d2      	ldr	r2, [r2, #12]
 8004800:	0a12      	lsrs	r2, r2, #8
 8004802:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	617b      	str	r3, [r7, #20]
    break;
 800480c:	e00c      	b.n	8004828 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800480e:	4a12      	ldr	r2, [pc, #72]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	fbb2 f3f3 	udiv	r3, r2, r3
 8004816:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004818:	68d2      	ldr	r2, [r2, #12]
 800481a:	0a12      	lsrs	r2, r2, #8
 800481c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004820:	fb02 f303 	mul.w	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]
    break;
 8004826:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	0e5b      	lsrs	r3, r3, #25
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	3301      	adds	r3, #1
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004842:	687b      	ldr	r3, [r7, #4]
}
 8004844:	4618      	mov	r0, r3
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40021000 	.word	0x40021000
 8004854:	016e3600 	.word	0x016e3600
 8004858:	00f42400 	.word	0x00f42400

0800485c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004864:	2300      	movs	r3, #0
 8004866:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004868:	2300      	movs	r3, #0
 800486a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8098 	beq.w	80049aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800487a:	2300      	movs	r3, #0
 800487c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800487e:	4b43      	ldr	r3, [pc, #268]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10d      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800488a:	4b40      	ldr	r3, [pc, #256]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488e:	4a3f      	ldr	r2, [pc, #252]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004894:	6593      	str	r3, [r2, #88]	; 0x58
 8004896:	4b3d      	ldr	r3, [pc, #244]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a2:	2301      	movs	r3, #1
 80048a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048a6:	4b3a      	ldr	r3, [pc, #232]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a39      	ldr	r2, [pc, #228]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048b2:	f7fc fe7d 	bl	80015b0 <HAL_GetTick>
 80048b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048b8:	e009      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ba:	f7fc fe79 	bl	80015b0 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d902      	bls.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	74fb      	strb	r3, [r7, #19]
        break;
 80048cc:	e005      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048ce:	4b30      	ldr	r3, [pc, #192]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0ef      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80048da:	7cfb      	ldrb	r3, [r7, #19]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d159      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048e0:	4b2a      	ldr	r3, [pc, #168]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d01e      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d019      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048fc:	4b23      	ldr	r3, [pc, #140]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004906:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004908:	4b20      	ldr	r3, [pc, #128]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490e:	4a1f      	ldr	r2, [pc, #124]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004918:	4b1c      	ldr	r3, [pc, #112]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	4a1b      	ldr	r2, [pc, #108]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004928:	4a18      	ldr	r2, [pc, #96]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d016      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fc fe39 	bl	80015b0 <HAL_GetTick>
 800493e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004940:	e00b      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fc fe35 	bl	80015b0 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d902      	bls.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	74fb      	strb	r3, [r7, #19]
            break;
 8004958:	e006      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800495a:	4b0c      	ldr	r3, [pc, #48]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0ec      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004968:	7cfb      	ldrb	r3, [r7, #19]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10b      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800496e:	4b07      	ldr	r3, [pc, #28]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497c:	4903      	ldr	r1, [pc, #12]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004984:	e008      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	74bb      	strb	r3, [r7, #18]
 800498a:	e005      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800498c:	40021000 	.word	0x40021000
 8004990:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004994:	7cfb      	ldrb	r3, [r7, #19]
 8004996:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004998:	7c7b      	ldrb	r3, [r7, #17]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d105      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800499e:	4ba7      	ldr	r3, [pc, #668]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a2:	4aa6      	ldr	r2, [pc, #664]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049b6:	4ba1      	ldr	r3, [pc, #644]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	f023 0203 	bic.w	r2, r3, #3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	499d      	ldr	r1, [pc, #628]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049d8:	4b98      	ldr	r3, [pc, #608]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049de:	f023 020c 	bic.w	r2, r3, #12
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	4995      	ldr	r1, [pc, #596]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049fa:	4b90      	ldr	r3, [pc, #576]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	498c      	ldr	r1, [pc, #560]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a1c:	4b87      	ldr	r3, [pc, #540]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	4984      	ldr	r1, [pc, #528]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0310 	and.w	r3, r3, #16
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a3e:	4b7f      	ldr	r3, [pc, #508]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	497b      	ldr	r1, [pc, #492]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0320 	and.w	r3, r3, #32
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a60:	4b76      	ldr	r3, [pc, #472]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	4973      	ldr	r1, [pc, #460]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a82:	4b6e      	ldr	r3, [pc, #440]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	496a      	ldr	r1, [pc, #424]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004aa4:	4b65      	ldr	r3, [pc, #404]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	4962      	ldr	r1, [pc, #392]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ac6:	4b5d      	ldr	r3, [pc, #372]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	4959      	ldr	r1, [pc, #356]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ae8:	4b54      	ldr	r3, [pc, #336]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aee:	f023 0203 	bic.w	r2, r3, #3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	4951      	ldr	r1, [pc, #324]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b0a:	4b4c      	ldr	r3, [pc, #304]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	4948      	ldr	r1, [pc, #288]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d015      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b2c:	4b43      	ldr	r3, [pc, #268]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	4940      	ldr	r1, [pc, #256]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b4a:	d105      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b4c:	4b3b      	ldr	r3, [pc, #236]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	4a3a      	ldr	r2, [pc, #232]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d015      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b64:	4b35      	ldr	r3, [pc, #212]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	4932      	ldr	r1, [pc, #200]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b82:	d105      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b84:	4b2d      	ldr	r3, [pc, #180]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	4a2c      	ldr	r2, [pc, #176]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b8e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d015      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b9c:	4b27      	ldr	r3, [pc, #156]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	4924      	ldr	r1, [pc, #144]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bba:	d105      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bbc:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4a1e      	ldr	r2, [pc, #120]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bc6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d015      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be2:	4916      	ldr	r1, [pc, #88]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bf2:	d105      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bf4:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4a10      	ldr	r2, [pc, #64]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bfe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d019      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	4908      	ldr	r1, [pc, #32]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c2a:	d109      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c2c:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4a02      	ldr	r2, [pc, #8]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c36:	60d3      	str	r3, [r2, #12]
 8004c38:	e002      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c3a:	bf00      	nop
 8004c3c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d015      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c4c:	4b29      	ldr	r3, [pc, #164]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	4926      	ldr	r1, [pc, #152]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c6a:	d105      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c6c:	4b21      	ldr	r3, [pc, #132]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4a20      	ldr	r2, [pc, #128]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c76:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d015      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004c84:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c92:	4918      	ldr	r1, [pc, #96]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca2:	d105      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ca4:	4b13      	ldr	r3, [pc, #76]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4a12      	ldr	r2, [pc, #72]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d015      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004cbc:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cca:	490a      	ldr	r1, [pc, #40]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cda:	d105      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4a04      	ldr	r2, [pc, #16]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ce6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ce8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000

08004cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e09d      	b.n	8004e46 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d108      	bne.n	8004d24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d1a:	d009      	beq.n	8004d30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	61da      	str	r2, [r3, #28]
 8004d22:	e005      	b.n	8004d30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fc fa8a 	bl	8001264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d70:	d902      	bls.n	8004d78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	e002      	b.n	8004d7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d86:	d007      	beq.n	8004d98 <HAL_SPI_Init+0xa0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d90:	d002      	beq.n	8004d98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dda:	ea42 0103 	orr.w	r1, r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	0c1b      	lsrs	r3, r3, #16
 8004df4:	f003 0204 	and.w	r2, r3, #4
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e14:	ea42 0103 	orr.w	r1, r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69da      	ldr	r2, [r3, #28]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e68:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e70:	7dbb      	ldrb	r3, [r7, #22]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d00d      	beq.n	8004e92 <HAL_SPI_TransmitReceive_IT+0x42>
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e7c:	d106      	bne.n	8004e8c <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d102      	bne.n	8004e8c <HAL_SPI_TransmitReceive_IT+0x3c>
 8004e86:	7dbb      	ldrb	r3, [r7, #22]
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d002      	beq.n	8004e92 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e90:	e07d      	b.n	8004f8e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_SPI_TransmitReceive_IT+0x54>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_SPI_TransmitReceive_IT+0x54>
 8004e9e:	887b      	ldrh	r3, [r7, #2]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d102      	bne.n	8004eaa <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ea8:	e071      	b.n	8004f8e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_SPI_TransmitReceive_IT+0x68>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e06b      	b.n	8004f90 <HAL_SPI_TransmitReceive_IT+0x140>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d003      	beq.n	8004ed4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2205      	movs	r2, #5
 8004ed0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	887a      	ldrh	r2, [r7, #2]
 8004ee4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	887a      	ldrh	r2, [r7, #2]
 8004eea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	887a      	ldrh	r2, [r7, #2]
 8004ef6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	887a      	ldrh	r2, [r7, #2]
 8004efe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f0a:	d906      	bls.n	8004f1a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a23      	ldr	r2, [pc, #140]	; (8004f9c <HAL_SPI_TransmitReceive_IT+0x14c>)
 8004f10:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4a22      	ldr	r2, [pc, #136]	; (8004fa0 <HAL_SPI_TransmitReceive_IT+0x150>)
 8004f16:	651a      	str	r2, [r3, #80]	; 0x50
 8004f18:	e005      	b.n	8004f26 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4a21      	ldr	r2, [pc, #132]	; (8004fa4 <HAL_SPI_TransmitReceive_IT+0x154>)
 8004f1e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4a21      	ldr	r2, [pc, #132]	; (8004fa8 <HAL_SPI_TransmitReceive_IT+0x158>)
 8004f24:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f2e:	d802      	bhi.n	8004f36 <HAL_SPI_TransmitReceive_IT+0xe6>
 8004f30:	887b      	ldrh	r3, [r7, #2]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d908      	bls.n	8004f48 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f44:	605a      	str	r2, [r3, #4]
 8004f46:	e007      	b.n	8004f58 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f56:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b40      	cmp	r3, #64	; 0x40
 8004f64:	d007      	beq.n	8004f76 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f74:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004f8c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	08005337 	.word	0x08005337
 8004fa0:	0800539d 	.word	0x0800539d
 8004fa4:	080051e7 	.word	0x080051e7
 8004fa8:	080052a5 	.word	0x080052a5

08004fac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10e      	bne.n	8004fec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d009      	beq.n	8004fec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d004      	beq.n	8004fec <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	4798      	blx	r3
    return;
 8004fea:	e0ce      	b.n	800518a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <HAL_SPI_IRQHandler+0x5e>
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d004      	beq.n	800500a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	4798      	blx	r3
    return;
 8005008:	e0bf      	b.n	800518a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f003 0320 	and.w	r3, r3, #32
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <HAL_SPI_IRQHandler+0x7e>
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d105      	bne.n	800502a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80b0 	beq.w	800518a <HAL_SPI_IRQHandler+0x1de>
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 80aa 	beq.w	800518a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d023      	beq.n	8005088 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b03      	cmp	r3, #3
 800504a:	d011      	beq.n	8005070 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005050:	f043 0204 	orr.w	r2, r3, #4
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	e00b      	b.n	8005088 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005070:	2300      	movs	r3, #0
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	693b      	ldr	r3, [r7, #16]
        return;
 8005086:	e080      	b.n	800518a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b00      	cmp	r3, #0
 8005090:	d014      	beq.n	80050bc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005096:	f043 0201 	orr.w	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00c      	beq.n	80050e0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ca:	f043 0208 	orr.w	r2, r3, #8
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80050d2:	2300      	movs	r3, #0
 80050d4:	60bb      	str	r3, [r7, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d04f      	beq.n	8005188 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050f6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d104      	bne.n	8005114 <HAL_SPI_IRQHandler+0x168>
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d034      	beq.n	800517e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0203 	bic.w	r2, r2, #3
 8005122:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	2b00      	cmp	r3, #0
 800512a:	d011      	beq.n	8005150 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005130:	4a17      	ldr	r2, [pc, #92]	; (8005190 <HAL_SPI_IRQHandler+0x1e4>)
 8005132:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005138:	4618      	mov	r0, r3
 800513a:	f7fc fc1f 	bl	800197c <HAL_DMA_Abort_IT>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005148:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005154:	2b00      	cmp	r3, #0
 8005156:	d016      	beq.n	8005186 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515c:	4a0c      	ldr	r2, [pc, #48]	; (8005190 <HAL_SPI_IRQHandler+0x1e4>)
 800515e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005164:	4618      	mov	r0, r3
 8005166:	f7fc fc09 	bl	800197c <HAL_DMA_Abort_IT>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005174:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800517c:	e003      	b.n	8005186 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f812 	bl	80051a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005184:	e000      	b.n	8005188 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005186:	bf00      	nop
    return;
 8005188:	bf00      	nop
  }
}
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	080051bd 	.word	0x080051bd

08005194 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f7ff ffe5 	bl	80051a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051de:	bf00      	nop
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d923      	bls.n	8005242 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	b292      	uxth	r2, r2
 8005206:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520c:	1c9a      	adds	r2, r3, #2
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b02      	subs	r3, #2
 800521c:	b29a      	uxth	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	d11f      	bne.n	8005270 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800523e:	605a      	str	r2, [r3, #4]
 8005240:	e016      	b.n	8005270 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f103 020c 	add.w	r2, r3, #12
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	7812      	ldrb	r2, [r2, #0]
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005276:	b29b      	uxth	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10f      	bne.n	800529c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800528a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d102      	bne.n	800529c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fa14 	bl	80056c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800529c:	bf00      	nop
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d912      	bls.n	80052dc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	881a      	ldrh	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	1c9a      	adds	r2, r3, #2
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b02      	subs	r3, #2
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052da:	e012      	b.n	8005302 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	330c      	adds	r3, #12
 80052e6:	7812      	ldrb	r2, [r2, #0]
 80052e8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d110      	bne.n	800532e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800531a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d102      	bne.n	800532e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f9cb 	bl	80056c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	b292      	uxth	r2, r2
 800534a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	1c9a      	adds	r2, r3, #2
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800535c:	b29b      	uxth	r3, r3
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10f      	bne.n	8005394 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005382:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d102      	bne.n	8005394 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f998 	bl	80056c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005394:	bf00      	nop
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	881a      	ldrh	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	1c9a      	adds	r2, r3, #2
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d110      	bne.n	80053f4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053e0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d102      	bne.n	80053f4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f968 	bl	80056c4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	4613      	mov	r3, r2
 800540a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800540c:	f7fc f8d0 	bl	80015b0 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	4413      	add	r3, r2
 800541a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800541c:	f7fc f8c8 	bl	80015b0 <HAL_GetTick>
 8005420:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005422:	4b39      	ldr	r3, [pc, #228]	; (8005508 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	015b      	lsls	r3, r3, #5
 8005428:	0d1b      	lsrs	r3, r3, #20
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	fb02 f303 	mul.w	r3, r2, r3
 8005430:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005432:	e054      	b.n	80054de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543a:	d050      	beq.n	80054de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800543c:	f7fc f8b8 	bl	80015b0 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	429a      	cmp	r2, r3
 800544a:	d902      	bls.n	8005452 <SPI_WaitFlagStateUntilTimeout+0x56>
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d13d      	bne.n	80054ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005460:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800546a:	d111      	bne.n	8005490 <SPI_WaitFlagStateUntilTimeout+0x94>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005474:	d004      	beq.n	8005480 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800547e:	d107      	bne.n	8005490 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800548e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005498:	d10f      	bne.n	80054ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e017      	b.n	80054fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	3b01      	subs	r3, #1
 80054dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4013      	ands	r3, r2
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	bf0c      	ite	eq
 80054ee:	2301      	moveq	r3, #1
 80054f0:	2300      	movne	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d19b      	bne.n	8005434 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	200000d4 	.word	0x200000d4

0800550c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	; 0x28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800551e:	f7fc f847 	bl	80015b0 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	4413      	add	r3, r2
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800552e:	f7fc f83f 	bl	80015b0 <HAL_GetTick>
 8005532:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	330c      	adds	r3, #12
 800553a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800553c:	4b3d      	ldr	r3, [pc, #244]	; (8005634 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	00da      	lsls	r2, r3, #3
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	0d1b      	lsrs	r3, r3, #20
 800554c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554e:	fb02 f303 	mul.w	r3, r2, r3
 8005552:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005554:	e060      	b.n	8005618 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800555c:	d107      	bne.n	800556e <SPI_WaitFifoStateUntilTimeout+0x62>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d104      	bne.n	800556e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800556c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d050      	beq.n	8005618 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005576:	f7fc f81b 	bl	80015b0 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	429a      	cmp	r2, r3
 8005584:	d902      	bls.n	800558c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	d13d      	bne.n	8005608 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800559a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055a4:	d111      	bne.n	80055ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ae:	d004      	beq.n	80055ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b8:	d107      	bne.n	80055ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d2:	d10f      	bne.n	80055f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e010      	b.n	800562a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	3b01      	subs	r3, #1
 8005616:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4013      	ands	r3, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	429a      	cmp	r2, r3
 8005626:	d196      	bne.n	8005556 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3728      	adds	r7, #40	; 0x28
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	200000d4 	.word	0x200000d4

08005638 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2200      	movs	r2, #0
 800564c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f7ff ff5b 	bl	800550c <SPI_WaitFifoStateUntilTimeout>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d007      	beq.n	800566c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005660:	f043 0220 	orr.w	r2, r3, #32
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e027      	b.n	80056bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2200      	movs	r2, #0
 8005674:	2180      	movs	r1, #128	; 0x80
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff fec0 	bl	80053fc <SPI_WaitFlagStateUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e014      	b.n	80056bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2200      	movs	r2, #0
 800569a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f7ff ff34 	bl	800550c <SPI_WaitFifoStateUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ae:	f043 0220 	orr.w	r2, r3, #32
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e000      	b.n	80056bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056cc:	f7fb ff70 	bl	80015b0 <HAL_GetTick>
 80056d0:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0220 	bic.w	r2, r2, #32
 80056e0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	2164      	movs	r1, #100	; 0x64
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff ffa6 	bl	8005638 <SPI_EndRxTxTransaction>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f6:	f043 0220 	orr.w	r2, r3, #32
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005702:	2b00      	cmp	r3, #0
 8005704:	d115      	bne.n	8005732 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b04      	cmp	r3, #4
 8005710:	d107      	bne.n	8005722 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff fd3a 	bl	8005194 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005720:	e00e      	b.n	8005740 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fb fc36 	bl	8000f9c <HAL_SPI_TxRxCpltCallback>
}
 8005730:	e006      	b.n	8005740 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff fd34 	bl	80051a8 <HAL_SPI_ErrorCallback>
}
 8005740:	bf00      	nop
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e049      	b.n	80057ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7fb fdc4 	bl	80012fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f000 fb3c 	bl	8005e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b01      	cmp	r3, #1
 800580a:	d001      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e054      	b.n	80058ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a26      	ldr	r2, [pc, #152]	; (80058c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d022      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x80>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583a:	d01d      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x80>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a22      	ldr	r2, [pc, #136]	; (80058cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d018      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x80>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a21      	ldr	r2, [pc, #132]	; (80058d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x80>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a1f      	ldr	r2, [pc, #124]	; (80058d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00e      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x80>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a1e      	ldr	r2, [pc, #120]	; (80058d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d009      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x80>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1c      	ldr	r2, [pc, #112]	; (80058dc <HAL_TIM_Base_Start_IT+0xe4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x80>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a1b      	ldr	r2, [pc, #108]	; (80058e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d115      	bne.n	80058a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	4b19      	ldr	r3, [pc, #100]	; (80058e4 <HAL_TIM_Base_Start_IT+0xec>)
 8005880:	4013      	ands	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b06      	cmp	r3, #6
 8005888:	d015      	beq.n	80058b6 <HAL_TIM_Base_Start_IT+0xbe>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005890:	d011      	beq.n	80058b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f042 0201 	orr.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a2:	e008      	b.n	80058b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	e000      	b.n	80058b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40000400 	.word	0x40000400
 80058d0:	40000800 	.word	0x40000800
 80058d4:	40000c00 	.word	0x40000c00
 80058d8:	40013400 	.word	0x40013400
 80058dc:	40014000 	.word	0x40014000
 80058e0:	40015000 	.word	0x40015000
 80058e4:	00010007 	.word	0x00010007

080058e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d020      	beq.n	800594c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01b      	beq.n	800594c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0202 	mvn.w	r2, #2
 800591c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fa48 	bl	8005dc8 <HAL_TIM_IC_CaptureCallback>
 8005938:	e005      	b.n	8005946 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fa3a 	bl	8005db4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fa4b 	bl	8005ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f003 0304 	and.w	r3, r3, #4
 8005952:	2b00      	cmp	r3, #0
 8005954:	d020      	beq.n	8005998 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01b      	beq.n	8005998 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0204 	mvn.w	r2, #4
 8005968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fa22 	bl	8005dc8 <HAL_TIM_IC_CaptureCallback>
 8005984:	e005      	b.n	8005992 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fa14 	bl	8005db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fa25 	bl	8005ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d020      	beq.n	80059e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01b      	beq.n	80059e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0208 	mvn.w	r2, #8
 80059b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2204      	movs	r2, #4
 80059ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f9fc 	bl	8005dc8 <HAL_TIM_IC_CaptureCallback>
 80059d0:	e005      	b.n	80059de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f9ee 	bl	8005db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f9ff 	bl	8005ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 0310 	and.w	r3, r3, #16
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d020      	beq.n	8005a30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01b      	beq.n	8005a30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0210 	mvn.w	r2, #16
 8005a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2208      	movs	r2, #8
 8005a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f9d6 	bl	8005dc8 <HAL_TIM_IC_CaptureCallback>
 8005a1c:	e005      	b.n	8005a2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f9c8 	bl	8005db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f9d9 	bl	8005ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00c      	beq.n	8005a54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d007      	beq.n	8005a54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0201 	mvn.w	r2, #1
 8005a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fb fa80 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d104      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00c      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fbb1 	bl	80061e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00c      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fba9 	bl	80061f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00c      	beq.n	8005aca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f993 	bl	8005df0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00c      	beq.n	8005aee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f06f 0220 	mvn.w	r2, #32
 8005ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fb71 	bl	80061d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00c      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fb7d 	bl	800620c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00c      	beq.n	8005b36 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d007      	beq.n	8005b36 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fb75 	bl	8006220 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00c      	beq.n	8005b5a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fb6d 	bl	8006234 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00c      	beq.n	8005b7e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fb65 	bl	8006248 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b7e:	bf00      	nop
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e0f6      	b.n	8005d92 <HAL_TIM_ConfigClockSource+0x20a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005bc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a6f      	ldr	r2, [pc, #444]	; (8005d9c <HAL_TIM_ConfigClockSource+0x214>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	f000 80c1 	beq.w	8005d66 <HAL_TIM_ConfigClockSource+0x1de>
 8005be4:	4a6d      	ldr	r2, [pc, #436]	; (8005d9c <HAL_TIM_ConfigClockSource+0x214>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	f200 80c6 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bec:	4a6c      	ldr	r2, [pc, #432]	; (8005da0 <HAL_TIM_ConfigClockSource+0x218>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	f000 80b9 	beq.w	8005d66 <HAL_TIM_ConfigClockSource+0x1de>
 8005bf4:	4a6a      	ldr	r2, [pc, #424]	; (8005da0 <HAL_TIM_ConfigClockSource+0x218>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	f200 80be 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bfc:	4a69      	ldr	r2, [pc, #420]	; (8005da4 <HAL_TIM_ConfigClockSource+0x21c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	f000 80b1 	beq.w	8005d66 <HAL_TIM_ConfigClockSource+0x1de>
 8005c04:	4a67      	ldr	r2, [pc, #412]	; (8005da4 <HAL_TIM_ConfigClockSource+0x21c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	f200 80b6 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c0c:	4a66      	ldr	r2, [pc, #408]	; (8005da8 <HAL_TIM_ConfigClockSource+0x220>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	f000 80a9 	beq.w	8005d66 <HAL_TIM_ConfigClockSource+0x1de>
 8005c14:	4a64      	ldr	r2, [pc, #400]	; (8005da8 <HAL_TIM_ConfigClockSource+0x220>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	f200 80ae 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c1c:	4a63      	ldr	r2, [pc, #396]	; (8005dac <HAL_TIM_ConfigClockSource+0x224>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	f000 80a1 	beq.w	8005d66 <HAL_TIM_ConfigClockSource+0x1de>
 8005c24:	4a61      	ldr	r2, [pc, #388]	; (8005dac <HAL_TIM_ConfigClockSource+0x224>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	f200 80a6 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c2c:	4a60      	ldr	r2, [pc, #384]	; (8005db0 <HAL_TIM_ConfigClockSource+0x228>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	f000 8099 	beq.w	8005d66 <HAL_TIM_ConfigClockSource+0x1de>
 8005c34:	4a5e      	ldr	r2, [pc, #376]	; (8005db0 <HAL_TIM_ConfigClockSource+0x228>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	f200 809e 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c40:	f000 8091 	beq.w	8005d66 <HAL_TIM_ConfigClockSource+0x1de>
 8005c44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c48:	f200 8096 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c50:	f000 8089 	beq.w	8005d66 <HAL_TIM_ConfigClockSource+0x1de>
 8005c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c58:	f200 808e 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c60:	d03e      	beq.n	8005ce0 <HAL_TIM_ConfigClockSource+0x158>
 8005c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c66:	f200 8087 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6e:	f000 8086 	beq.w	8005d7e <HAL_TIM_ConfigClockSource+0x1f6>
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c76:	d87f      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c78:	2b70      	cmp	r3, #112	; 0x70
 8005c7a:	d01a      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x12a>
 8005c7c:	2b70      	cmp	r3, #112	; 0x70
 8005c7e:	d87b      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c80:	2b60      	cmp	r3, #96	; 0x60
 8005c82:	d050      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x19e>
 8005c84:	2b60      	cmp	r3, #96	; 0x60
 8005c86:	d877      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c88:	2b50      	cmp	r3, #80	; 0x50
 8005c8a:	d03c      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x17e>
 8005c8c:	2b50      	cmp	r3, #80	; 0x50
 8005c8e:	d873      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	d058      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x1be>
 8005c94:	2b40      	cmp	r3, #64	; 0x40
 8005c96:	d86f      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c98:	2b30      	cmp	r3, #48	; 0x30
 8005c9a:	d064      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x1de>
 8005c9c:	2b30      	cmp	r3, #48	; 0x30
 8005c9e:	d86b      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d060      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x1de>
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d867      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d05c      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x1de>
 8005cac:	2b10      	cmp	r3, #16
 8005cae:	d05a      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x1de>
 8005cb0:	e062      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cc2:	f000 f9cf 	bl	8006064 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	609a      	str	r2, [r3, #8]
      break;
 8005cde:	e04f      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cf0:	f000 f9b8 	bl	8006064 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d02:	609a      	str	r2, [r3, #8]
      break;
 8005d04:	e03c      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d12:	461a      	mov	r2, r3
 8005d14:	f000 f92a 	bl	8005f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2150      	movs	r1, #80	; 0x50
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 f983 	bl	800602a <TIM_ITRx_SetConfig>
      break;
 8005d24:	e02c      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d32:	461a      	mov	r2, r3
 8005d34:	f000 f949 	bl	8005fca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2160      	movs	r1, #96	; 0x60
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 f973 	bl	800602a <TIM_ITRx_SetConfig>
      break;
 8005d44:	e01c      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d52:	461a      	mov	r2, r3
 8005d54:	f000 f90a 	bl	8005f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2140      	movs	r1, #64	; 0x40
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 f963 	bl	800602a <TIM_ITRx_SetConfig>
      break;
 8005d64:	e00c      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4610      	mov	r0, r2
 8005d72:	f000 f95a 	bl	800602a <TIM_ITRx_SetConfig>
      break;
 8005d76:	e003      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d7c:	e000      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005d7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	00100070 	.word	0x00100070
 8005da0:	00100060 	.word	0x00100060
 8005da4:	00100050 	.word	0x00100050
 8005da8:	00100040 	.word	0x00100040
 8005dac:	00100030 	.word	0x00100030
 8005db0:	00100020 	.word	0x00100020

08005db4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a4c      	ldr	r2, [pc, #304]	; (8005f48 <TIM_Base_SetConfig+0x144>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d017      	beq.n	8005e4c <TIM_Base_SetConfig+0x48>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e22:	d013      	beq.n	8005e4c <TIM_Base_SetConfig+0x48>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a49      	ldr	r2, [pc, #292]	; (8005f4c <TIM_Base_SetConfig+0x148>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00f      	beq.n	8005e4c <TIM_Base_SetConfig+0x48>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a48      	ldr	r2, [pc, #288]	; (8005f50 <TIM_Base_SetConfig+0x14c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00b      	beq.n	8005e4c <TIM_Base_SetConfig+0x48>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a47      	ldr	r2, [pc, #284]	; (8005f54 <TIM_Base_SetConfig+0x150>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d007      	beq.n	8005e4c <TIM_Base_SetConfig+0x48>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a46      	ldr	r2, [pc, #280]	; (8005f58 <TIM_Base_SetConfig+0x154>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_Base_SetConfig+0x48>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a45      	ldr	r2, [pc, #276]	; (8005f5c <TIM_Base_SetConfig+0x158>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d108      	bne.n	8005e5e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a39      	ldr	r2, [pc, #228]	; (8005f48 <TIM_Base_SetConfig+0x144>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d023      	beq.n	8005eae <TIM_Base_SetConfig+0xaa>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6c:	d01f      	beq.n	8005eae <TIM_Base_SetConfig+0xaa>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a36      	ldr	r2, [pc, #216]	; (8005f4c <TIM_Base_SetConfig+0x148>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d01b      	beq.n	8005eae <TIM_Base_SetConfig+0xaa>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a35      	ldr	r2, [pc, #212]	; (8005f50 <TIM_Base_SetConfig+0x14c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d017      	beq.n	8005eae <TIM_Base_SetConfig+0xaa>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a34      	ldr	r2, [pc, #208]	; (8005f54 <TIM_Base_SetConfig+0x150>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d013      	beq.n	8005eae <TIM_Base_SetConfig+0xaa>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a33      	ldr	r2, [pc, #204]	; (8005f58 <TIM_Base_SetConfig+0x154>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00f      	beq.n	8005eae <TIM_Base_SetConfig+0xaa>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a33      	ldr	r2, [pc, #204]	; (8005f60 <TIM_Base_SetConfig+0x15c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00b      	beq.n	8005eae <TIM_Base_SetConfig+0xaa>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a32      	ldr	r2, [pc, #200]	; (8005f64 <TIM_Base_SetConfig+0x160>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d007      	beq.n	8005eae <TIM_Base_SetConfig+0xaa>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a31      	ldr	r2, [pc, #196]	; (8005f68 <TIM_Base_SetConfig+0x164>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d003      	beq.n	8005eae <TIM_Base_SetConfig+0xaa>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a2c      	ldr	r2, [pc, #176]	; (8005f5c <TIM_Base_SetConfig+0x158>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d108      	bne.n	8005ec0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a18      	ldr	r2, [pc, #96]	; (8005f48 <TIM_Base_SetConfig+0x144>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d013      	beq.n	8005f14 <TIM_Base_SetConfig+0x110>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a1a      	ldr	r2, [pc, #104]	; (8005f58 <TIM_Base_SetConfig+0x154>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00f      	beq.n	8005f14 <TIM_Base_SetConfig+0x110>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a1a      	ldr	r2, [pc, #104]	; (8005f60 <TIM_Base_SetConfig+0x15c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00b      	beq.n	8005f14 <TIM_Base_SetConfig+0x110>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a19      	ldr	r2, [pc, #100]	; (8005f64 <TIM_Base_SetConfig+0x160>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d007      	beq.n	8005f14 <TIM_Base_SetConfig+0x110>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a18      	ldr	r2, [pc, #96]	; (8005f68 <TIM_Base_SetConfig+0x164>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d003      	beq.n	8005f14 <TIM_Base_SetConfig+0x110>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a13      	ldr	r2, [pc, #76]	; (8005f5c <TIM_Base_SetConfig+0x158>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d103      	bne.n	8005f1c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d105      	bne.n	8005f3a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f023 0201 	bic.w	r2, r3, #1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	611a      	str	r2, [r3, #16]
  }
}
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40000400 	.word	0x40000400
 8005f50:	40000800 	.word	0x40000800
 8005f54:	40000c00 	.word	0x40000c00
 8005f58:	40013400 	.word	0x40013400
 8005f5c:	40015000 	.word	0x40015000
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40014400 	.word	0x40014400
 8005f68:	40014800 	.word	0x40014800

08005f6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f023 0201 	bic.w	r2, r3, #1
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f023 030a 	bic.w	r3, r3, #10
 8005fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	621a      	str	r2, [r3, #32]
}
 8005fbe:	bf00      	nop
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b087      	sub	sp, #28
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	f023 0210 	bic.w	r2, r3, #16
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	031b      	lsls	r3, r3, #12
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006006:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	621a      	str	r2, [r3, #32]
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800602a:	b480      	push	{r7}
 800602c:	b085      	sub	sp, #20
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006044:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	f043 0307 	orr.w	r3, r3, #7
 8006050:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	609a      	str	r2, [r3, #8]
}
 8006058:	bf00      	nop
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800607e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	021a      	lsls	r2, r3, #8
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	431a      	orrs	r2, r3
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4313      	orrs	r3, r2
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	609a      	str	r2, [r3, #8]
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e074      	b.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a34      	ldr	r2, [pc, #208]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d009      	beq.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a33      	ldr	r2, [pc, #204]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d004      	beq.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a31      	ldr	r2, [pc, #196]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d108      	bne.n	800610c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006100:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4313      	orrs	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a21      	ldr	r2, [pc, #132]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d022      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613c:	d01d      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a1f      	ldr	r2, [pc, #124]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d018      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a1d      	ldr	r2, [pc, #116]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1c      	ldr	r2, [pc, #112]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00e      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a15      	ldr	r2, [pc, #84]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d009      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a18      	ldr	r2, [pc, #96]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d004      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a11      	ldr	r2, [pc, #68]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d10c      	bne.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	4313      	orrs	r3, r2
 800618a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40012c00 	.word	0x40012c00
 80061b8:	40013400 	.word	0x40013400
 80061bc:	40015000 	.word	0x40015000
 80061c0:	40000400 	.word	0x40000400
 80061c4:	40000800 	.word	0x40000800
 80061c8:	40000c00 	.word	0x40000c00
 80061cc:	40014000 	.word	0x40014000

080061d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e042      	b.n	80062f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7fa ff97 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2224      	movs	r2, #36	; 0x24
 800628a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0201 	bic.w	r2, r2, #1
 800629c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fb24 	bl	80068f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f825 	bl	80062fc <UART_SetConfig>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e01b      	b.n	80062f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fba3 	bl	8006a38 <UART_CheckIdleState>
 80062f2:	4603      	mov	r3, r0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006300:	b08c      	sub	sp, #48	; 0x30
 8006302:	af00      	add	r7, sp, #0
 8006304:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	431a      	orrs	r2, r3
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	431a      	orrs	r2, r3
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	4313      	orrs	r3, r2
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	4baa      	ldr	r3, [pc, #680]	; (80065d4 <UART_SetConfig+0x2d8>)
 800632c:	4013      	ands	r3, r2
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	6812      	ldr	r2, [r2, #0]
 8006332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006334:	430b      	orrs	r3, r1
 8006336:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a9f      	ldr	r2, [pc, #636]	; (80065d8 <UART_SetConfig+0x2dc>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d004      	beq.n	8006368 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006364:	4313      	orrs	r3, r2
 8006366:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006372:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	6812      	ldr	r2, [r2, #0]
 800637a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800637c:	430b      	orrs	r3, r1
 800637e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006386:	f023 010f 	bic.w	r1, r3, #15
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a90      	ldr	r2, [pc, #576]	; (80065dc <UART_SetConfig+0x2e0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d125      	bne.n	80063ec <UART_SetConfig+0xf0>
 80063a0:	4b8f      	ldr	r3, [pc, #572]	; (80065e0 <UART_SetConfig+0x2e4>)
 80063a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d81a      	bhi.n	80063e4 <UART_SetConfig+0xe8>
 80063ae:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <UART_SetConfig+0xb8>)
 80063b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b4:	080063c5 	.word	0x080063c5
 80063b8:	080063d5 	.word	0x080063d5
 80063bc:	080063cd 	.word	0x080063cd
 80063c0:	080063dd 	.word	0x080063dd
 80063c4:	2301      	movs	r3, #1
 80063c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ca:	e116      	b.n	80065fa <UART_SetConfig+0x2fe>
 80063cc:	2302      	movs	r3, #2
 80063ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063d2:	e112      	b.n	80065fa <UART_SetConfig+0x2fe>
 80063d4:	2304      	movs	r3, #4
 80063d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063da:	e10e      	b.n	80065fa <UART_SetConfig+0x2fe>
 80063dc:	2308      	movs	r3, #8
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e2:	e10a      	b.n	80065fa <UART_SetConfig+0x2fe>
 80063e4:	2310      	movs	r3, #16
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ea:	e106      	b.n	80065fa <UART_SetConfig+0x2fe>
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a7c      	ldr	r2, [pc, #496]	; (80065e4 <UART_SetConfig+0x2e8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d138      	bne.n	8006468 <UART_SetConfig+0x16c>
 80063f6:	4b7a      	ldr	r3, [pc, #488]	; (80065e0 <UART_SetConfig+0x2e4>)
 80063f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fc:	f003 030c 	and.w	r3, r3, #12
 8006400:	2b0c      	cmp	r3, #12
 8006402:	d82d      	bhi.n	8006460 <UART_SetConfig+0x164>
 8006404:	a201      	add	r2, pc, #4	; (adr r2, 800640c <UART_SetConfig+0x110>)
 8006406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640a:	bf00      	nop
 800640c:	08006441 	.word	0x08006441
 8006410:	08006461 	.word	0x08006461
 8006414:	08006461 	.word	0x08006461
 8006418:	08006461 	.word	0x08006461
 800641c:	08006451 	.word	0x08006451
 8006420:	08006461 	.word	0x08006461
 8006424:	08006461 	.word	0x08006461
 8006428:	08006461 	.word	0x08006461
 800642c:	08006449 	.word	0x08006449
 8006430:	08006461 	.word	0x08006461
 8006434:	08006461 	.word	0x08006461
 8006438:	08006461 	.word	0x08006461
 800643c:	08006459 	.word	0x08006459
 8006440:	2300      	movs	r3, #0
 8006442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006446:	e0d8      	b.n	80065fa <UART_SetConfig+0x2fe>
 8006448:	2302      	movs	r3, #2
 800644a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800644e:	e0d4      	b.n	80065fa <UART_SetConfig+0x2fe>
 8006450:	2304      	movs	r3, #4
 8006452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006456:	e0d0      	b.n	80065fa <UART_SetConfig+0x2fe>
 8006458:	2308      	movs	r3, #8
 800645a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800645e:	e0cc      	b.n	80065fa <UART_SetConfig+0x2fe>
 8006460:	2310      	movs	r3, #16
 8006462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006466:	e0c8      	b.n	80065fa <UART_SetConfig+0x2fe>
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a5e      	ldr	r2, [pc, #376]	; (80065e8 <UART_SetConfig+0x2ec>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d125      	bne.n	80064be <UART_SetConfig+0x1c2>
 8006472:	4b5b      	ldr	r3, [pc, #364]	; (80065e0 <UART_SetConfig+0x2e4>)
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006478:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800647c:	2b30      	cmp	r3, #48	; 0x30
 800647e:	d016      	beq.n	80064ae <UART_SetConfig+0x1b2>
 8006480:	2b30      	cmp	r3, #48	; 0x30
 8006482:	d818      	bhi.n	80064b6 <UART_SetConfig+0x1ba>
 8006484:	2b20      	cmp	r3, #32
 8006486:	d00a      	beq.n	800649e <UART_SetConfig+0x1a2>
 8006488:	2b20      	cmp	r3, #32
 800648a:	d814      	bhi.n	80064b6 <UART_SetConfig+0x1ba>
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <UART_SetConfig+0x19a>
 8006490:	2b10      	cmp	r3, #16
 8006492:	d008      	beq.n	80064a6 <UART_SetConfig+0x1aa>
 8006494:	e00f      	b.n	80064b6 <UART_SetConfig+0x1ba>
 8006496:	2300      	movs	r3, #0
 8006498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800649c:	e0ad      	b.n	80065fa <UART_SetConfig+0x2fe>
 800649e:	2302      	movs	r3, #2
 80064a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064a4:	e0a9      	b.n	80065fa <UART_SetConfig+0x2fe>
 80064a6:	2304      	movs	r3, #4
 80064a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ac:	e0a5      	b.n	80065fa <UART_SetConfig+0x2fe>
 80064ae:	2308      	movs	r3, #8
 80064b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064b4:	e0a1      	b.n	80065fa <UART_SetConfig+0x2fe>
 80064b6:	2310      	movs	r3, #16
 80064b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064bc:	e09d      	b.n	80065fa <UART_SetConfig+0x2fe>
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a4a      	ldr	r2, [pc, #296]	; (80065ec <UART_SetConfig+0x2f0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d125      	bne.n	8006514 <UART_SetConfig+0x218>
 80064c8:	4b45      	ldr	r3, [pc, #276]	; (80065e0 <UART_SetConfig+0x2e4>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064d2:	2bc0      	cmp	r3, #192	; 0xc0
 80064d4:	d016      	beq.n	8006504 <UART_SetConfig+0x208>
 80064d6:	2bc0      	cmp	r3, #192	; 0xc0
 80064d8:	d818      	bhi.n	800650c <UART_SetConfig+0x210>
 80064da:	2b80      	cmp	r3, #128	; 0x80
 80064dc:	d00a      	beq.n	80064f4 <UART_SetConfig+0x1f8>
 80064de:	2b80      	cmp	r3, #128	; 0x80
 80064e0:	d814      	bhi.n	800650c <UART_SetConfig+0x210>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <UART_SetConfig+0x1f0>
 80064e6:	2b40      	cmp	r3, #64	; 0x40
 80064e8:	d008      	beq.n	80064fc <UART_SetConfig+0x200>
 80064ea:	e00f      	b.n	800650c <UART_SetConfig+0x210>
 80064ec:	2300      	movs	r3, #0
 80064ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064f2:	e082      	b.n	80065fa <UART_SetConfig+0x2fe>
 80064f4:	2302      	movs	r3, #2
 80064f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064fa:	e07e      	b.n	80065fa <UART_SetConfig+0x2fe>
 80064fc:	2304      	movs	r3, #4
 80064fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006502:	e07a      	b.n	80065fa <UART_SetConfig+0x2fe>
 8006504:	2308      	movs	r3, #8
 8006506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800650a:	e076      	b.n	80065fa <UART_SetConfig+0x2fe>
 800650c:	2310      	movs	r3, #16
 800650e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006512:	e072      	b.n	80065fa <UART_SetConfig+0x2fe>
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a35      	ldr	r2, [pc, #212]	; (80065f0 <UART_SetConfig+0x2f4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d12a      	bne.n	8006574 <UART_SetConfig+0x278>
 800651e:	4b30      	ldr	r3, [pc, #192]	; (80065e0 <UART_SetConfig+0x2e4>)
 8006520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006528:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800652c:	d01a      	beq.n	8006564 <UART_SetConfig+0x268>
 800652e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006532:	d81b      	bhi.n	800656c <UART_SetConfig+0x270>
 8006534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006538:	d00c      	beq.n	8006554 <UART_SetConfig+0x258>
 800653a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800653e:	d815      	bhi.n	800656c <UART_SetConfig+0x270>
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <UART_SetConfig+0x250>
 8006544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006548:	d008      	beq.n	800655c <UART_SetConfig+0x260>
 800654a:	e00f      	b.n	800656c <UART_SetConfig+0x270>
 800654c:	2300      	movs	r3, #0
 800654e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006552:	e052      	b.n	80065fa <UART_SetConfig+0x2fe>
 8006554:	2302      	movs	r3, #2
 8006556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800655a:	e04e      	b.n	80065fa <UART_SetConfig+0x2fe>
 800655c:	2304      	movs	r3, #4
 800655e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006562:	e04a      	b.n	80065fa <UART_SetConfig+0x2fe>
 8006564:	2308      	movs	r3, #8
 8006566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800656a:	e046      	b.n	80065fa <UART_SetConfig+0x2fe>
 800656c:	2310      	movs	r3, #16
 800656e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006572:	e042      	b.n	80065fa <UART_SetConfig+0x2fe>
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a17      	ldr	r2, [pc, #92]	; (80065d8 <UART_SetConfig+0x2dc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d13a      	bne.n	80065f4 <UART_SetConfig+0x2f8>
 800657e:	4b18      	ldr	r3, [pc, #96]	; (80065e0 <UART_SetConfig+0x2e4>)
 8006580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006584:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006588:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800658c:	d01a      	beq.n	80065c4 <UART_SetConfig+0x2c8>
 800658e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006592:	d81b      	bhi.n	80065cc <UART_SetConfig+0x2d0>
 8006594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006598:	d00c      	beq.n	80065b4 <UART_SetConfig+0x2b8>
 800659a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800659e:	d815      	bhi.n	80065cc <UART_SetConfig+0x2d0>
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <UART_SetConfig+0x2b0>
 80065a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065a8:	d008      	beq.n	80065bc <UART_SetConfig+0x2c0>
 80065aa:	e00f      	b.n	80065cc <UART_SetConfig+0x2d0>
 80065ac:	2300      	movs	r3, #0
 80065ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b2:	e022      	b.n	80065fa <UART_SetConfig+0x2fe>
 80065b4:	2302      	movs	r3, #2
 80065b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ba:	e01e      	b.n	80065fa <UART_SetConfig+0x2fe>
 80065bc:	2304      	movs	r3, #4
 80065be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c2:	e01a      	b.n	80065fa <UART_SetConfig+0x2fe>
 80065c4:	2308      	movs	r3, #8
 80065c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ca:	e016      	b.n	80065fa <UART_SetConfig+0x2fe>
 80065cc:	2310      	movs	r3, #16
 80065ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065d2:	e012      	b.n	80065fa <UART_SetConfig+0x2fe>
 80065d4:	cfff69f3 	.word	0xcfff69f3
 80065d8:	40008000 	.word	0x40008000
 80065dc:	40013800 	.word	0x40013800
 80065e0:	40021000 	.word	0x40021000
 80065e4:	40004400 	.word	0x40004400
 80065e8:	40004800 	.word	0x40004800
 80065ec:	40004c00 	.word	0x40004c00
 80065f0:	40005000 	.word	0x40005000
 80065f4:	2310      	movs	r3, #16
 80065f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4aae      	ldr	r2, [pc, #696]	; (80068b8 <UART_SetConfig+0x5bc>)
 8006600:	4293      	cmp	r3, r2
 8006602:	f040 8097 	bne.w	8006734 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006606:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800660a:	2b08      	cmp	r3, #8
 800660c:	d823      	bhi.n	8006656 <UART_SetConfig+0x35a>
 800660e:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <UART_SetConfig+0x318>)
 8006610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006614:	08006639 	.word	0x08006639
 8006618:	08006657 	.word	0x08006657
 800661c:	08006641 	.word	0x08006641
 8006620:	08006657 	.word	0x08006657
 8006624:	08006647 	.word	0x08006647
 8006628:	08006657 	.word	0x08006657
 800662c:	08006657 	.word	0x08006657
 8006630:	08006657 	.word	0x08006657
 8006634:	0800664f 	.word	0x0800664f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006638:	f7fe f89e 	bl	8004778 <HAL_RCC_GetPCLK1Freq>
 800663c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800663e:	e010      	b.n	8006662 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006640:	4b9e      	ldr	r3, [pc, #632]	; (80068bc <UART_SetConfig+0x5c0>)
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006644:	e00d      	b.n	8006662 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006646:	f7fe f829 	bl	800469c <HAL_RCC_GetSysClockFreq>
 800664a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800664c:	e009      	b.n	8006662 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800664e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006652:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006654:	e005      	b.n	8006662 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006660:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 8130 	beq.w	80068ca <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666e:	4a94      	ldr	r2, [pc, #592]	; (80068c0 <UART_SetConfig+0x5c4>)
 8006670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006674:	461a      	mov	r2, r3
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	fbb3 f3f2 	udiv	r3, r3, r2
 800667c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	4613      	mov	r3, r2
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	4413      	add	r3, r2
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	429a      	cmp	r2, r3
 800668c:	d305      	bcc.n	800669a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	429a      	cmp	r2, r3
 8006698:	d903      	bls.n	80066a2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066a0:	e113      	b.n	80068ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	2200      	movs	r2, #0
 80066a6:	60bb      	str	r3, [r7, #8]
 80066a8:	60fa      	str	r2, [r7, #12]
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	4a84      	ldr	r2, [pc, #528]	; (80068c0 <UART_SetConfig+0x5c4>)
 80066b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2200      	movs	r2, #0
 80066b8:	603b      	str	r3, [r7, #0]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066c4:	f7f9 fda8 	bl	8000218 <__aeabi_uldivmod>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4610      	mov	r0, r2
 80066ce:	4619      	mov	r1, r3
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	020b      	lsls	r3, r1, #8
 80066da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066de:	0202      	lsls	r2, r0, #8
 80066e0:	6979      	ldr	r1, [r7, #20]
 80066e2:	6849      	ldr	r1, [r1, #4]
 80066e4:	0849      	lsrs	r1, r1, #1
 80066e6:	2000      	movs	r0, #0
 80066e8:	460c      	mov	r4, r1
 80066ea:	4605      	mov	r5, r0
 80066ec:	eb12 0804 	adds.w	r8, r2, r4
 80066f0:	eb43 0905 	adc.w	r9, r3, r5
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	469a      	mov	sl, r3
 80066fc:	4693      	mov	fp, r2
 80066fe:	4652      	mov	r2, sl
 8006700:	465b      	mov	r3, fp
 8006702:	4640      	mov	r0, r8
 8006704:	4649      	mov	r1, r9
 8006706:	f7f9 fd87 	bl	8000218 <__aeabi_uldivmod>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4613      	mov	r3, r2
 8006710:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006718:	d308      	bcc.n	800672c <UART_SetConfig+0x430>
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006720:	d204      	bcs.n	800672c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6a3a      	ldr	r2, [r7, #32]
 8006728:	60da      	str	r2, [r3, #12]
 800672a:	e0ce      	b.n	80068ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006732:	e0ca      	b.n	80068ca <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800673c:	d166      	bne.n	800680c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800673e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006742:	2b08      	cmp	r3, #8
 8006744:	d827      	bhi.n	8006796 <UART_SetConfig+0x49a>
 8006746:	a201      	add	r2, pc, #4	; (adr r2, 800674c <UART_SetConfig+0x450>)
 8006748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674c:	08006771 	.word	0x08006771
 8006750:	08006779 	.word	0x08006779
 8006754:	08006781 	.word	0x08006781
 8006758:	08006797 	.word	0x08006797
 800675c:	08006787 	.word	0x08006787
 8006760:	08006797 	.word	0x08006797
 8006764:	08006797 	.word	0x08006797
 8006768:	08006797 	.word	0x08006797
 800676c:	0800678f 	.word	0x0800678f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006770:	f7fe f802 	bl	8004778 <HAL_RCC_GetPCLK1Freq>
 8006774:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006776:	e014      	b.n	80067a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006778:	f7fe f814 	bl	80047a4 <HAL_RCC_GetPCLK2Freq>
 800677c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800677e:	e010      	b.n	80067a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006780:	4b4e      	ldr	r3, [pc, #312]	; (80068bc <UART_SetConfig+0x5c0>)
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006784:	e00d      	b.n	80067a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006786:	f7fd ff89 	bl	800469c <HAL_RCC_GetSysClockFreq>
 800678a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800678c:	e009      	b.n	80067a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800678e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006794:	e005      	b.n	80067a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 8090 	beq.w	80068ca <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	4a44      	ldr	r2, [pc, #272]	; (80068c0 <UART_SetConfig+0x5c4>)
 80067b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067b4:	461a      	mov	r2, r3
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80067bc:	005a      	lsls	r2, r3, #1
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	085b      	lsrs	r3, r3, #1
 80067c4:	441a      	add	r2, r3
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	2b0f      	cmp	r3, #15
 80067d4:	d916      	bls.n	8006804 <UART_SetConfig+0x508>
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067dc:	d212      	bcs.n	8006804 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f023 030f 	bic.w	r3, r3, #15
 80067e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	085b      	lsrs	r3, r3, #1
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	8bfb      	ldrh	r3, [r7, #30]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	8bfa      	ldrh	r2, [r7, #30]
 8006800:	60da      	str	r2, [r3, #12]
 8006802:	e062      	b.n	80068ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800680a:	e05e      	b.n	80068ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800680c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006810:	2b08      	cmp	r3, #8
 8006812:	d828      	bhi.n	8006866 <UART_SetConfig+0x56a>
 8006814:	a201      	add	r2, pc, #4	; (adr r2, 800681c <UART_SetConfig+0x520>)
 8006816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681a:	bf00      	nop
 800681c:	08006841 	.word	0x08006841
 8006820:	08006849 	.word	0x08006849
 8006824:	08006851 	.word	0x08006851
 8006828:	08006867 	.word	0x08006867
 800682c:	08006857 	.word	0x08006857
 8006830:	08006867 	.word	0x08006867
 8006834:	08006867 	.word	0x08006867
 8006838:	08006867 	.word	0x08006867
 800683c:	0800685f 	.word	0x0800685f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006840:	f7fd ff9a 	bl	8004778 <HAL_RCC_GetPCLK1Freq>
 8006844:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006846:	e014      	b.n	8006872 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006848:	f7fd ffac 	bl	80047a4 <HAL_RCC_GetPCLK2Freq>
 800684c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800684e:	e010      	b.n	8006872 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006850:	4b1a      	ldr	r3, [pc, #104]	; (80068bc <UART_SetConfig+0x5c0>)
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006854:	e00d      	b.n	8006872 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006856:	f7fd ff21 	bl	800469c <HAL_RCC_GetSysClockFreq>
 800685a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800685c:	e009      	b.n	8006872 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800685e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006864:	e005      	b.n	8006872 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006870:	bf00      	nop
    }

    if (pclk != 0U)
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d028      	beq.n	80068ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	4a10      	ldr	r2, [pc, #64]	; (80068c0 <UART_SetConfig+0x5c4>)
 800687e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006882:	461a      	mov	r2, r3
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	fbb3 f2f2 	udiv	r2, r3, r2
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	085b      	lsrs	r3, r3, #1
 8006890:	441a      	add	r2, r3
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	fbb2 f3f3 	udiv	r3, r2, r3
 800689a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	2b0f      	cmp	r3, #15
 80068a0:	d910      	bls.n	80068c4 <UART_SetConfig+0x5c8>
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a8:	d20c      	bcs.n	80068c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60da      	str	r2, [r3, #12]
 80068b4:	e009      	b.n	80068ca <UART_SetConfig+0x5ce>
 80068b6:	bf00      	nop
 80068b8:	40008000 	.word	0x40008000
 80068bc:	00f42400 	.word	0x00f42400
 80068c0:	08006fc0 	.word	0x08006fc0
      }
      else
      {
        ret = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2200      	movs	r2, #0
 80068de:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2200      	movs	r2, #0
 80068e4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80068e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3730      	adds	r7, #48	; 0x30
 80068ee:	46bd      	mov	sp, r7
 80068f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080068f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00a      	beq.n	800691e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01a      	beq.n	8006a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f2:	d10a      	bne.n	8006a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	605a      	str	r2, [r3, #4]
  }
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b098      	sub	sp, #96	; 0x60
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a48:	f7fa fdb2 	bl	80015b0 <HAL_GetTick>
 8006a4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0308 	and.w	r3, r3, #8
 8006a58:	2b08      	cmp	r3, #8
 8006a5a:	d12f      	bne.n	8006abc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a64:	2200      	movs	r2, #0
 8006a66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f88e 	bl	8006b8c <UART_WaitOnFlagUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d022      	beq.n	8006abc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a94:	647b      	str	r3, [r7, #68]	; 0x44
 8006a96:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e6      	bne.n	8006a76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e063      	b.n	8006b84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d149      	bne.n	8006b5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f857 	bl	8006b8c <UART_WaitOnFlagUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d03c      	beq.n	8006b5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	623b      	str	r3, [r7, #32]
   return(result);
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006af8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b02:	633b      	str	r3, [r7, #48]	; 0x30
 8006b04:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e6      	bne.n	8006ae4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3308      	adds	r3, #8
 8006b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f023 0301 	bic.w	r3, r3, #1
 8006b2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3308      	adds	r3, #8
 8006b34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b36:	61fa      	str	r2, [r7, #28]
 8006b38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	69b9      	ldr	r1, [r7, #24]
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	617b      	str	r3, [r7, #20]
   return(result);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e5      	bne.n	8006b16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e012      	b.n	8006b84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3758      	adds	r7, #88	; 0x58
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	603b      	str	r3, [r7, #0]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b9c:	e04f      	b.n	8006c3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba4:	d04b      	beq.n	8006c3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba6:	f7fa fd03 	bl	80015b0 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d302      	bcc.n	8006bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e04e      	b.n	8006c5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0304 	and.w	r3, r3, #4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d037      	beq.n	8006c3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b80      	cmp	r3, #128	; 0x80
 8006bd2:	d034      	beq.n	8006c3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b40      	cmp	r3, #64	; 0x40
 8006bd8:	d031      	beq.n	8006c3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	d110      	bne.n	8006c0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2208      	movs	r2, #8
 8006bee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 f838 	bl	8006c66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e029      	b.n	8006c5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c18:	d111      	bne.n	8006c3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f81e 	bl	8006c66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e00f      	b.n	8006c5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69da      	ldr	r2, [r3, #28]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	4013      	ands	r3, r2
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	bf0c      	ite	eq
 8006c4e:	2301      	moveq	r3, #1
 8006c50:	2300      	movne	r3, #0
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	461a      	mov	r2, r3
 8006c56:	79fb      	ldrb	r3, [r7, #7]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d0a0      	beq.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b095      	sub	sp, #84	; 0x54
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c8c:	643b      	str	r3, [r7, #64]	; 0x40
 8006c8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c94:	e841 2300 	strex	r3, r2, [r1]
 8006c98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e6      	bne.n	8006c6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	e853 3f00 	ldrex	r3, [r3]
 8006cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
 8006cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e3      	bne.n	8006ca0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d118      	bne.n	8006d12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	e853 3f00 	ldrex	r3, [r3]
 8006cec:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f023 0310 	bic.w	r3, r3, #16
 8006cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d02:	6979      	ldr	r1, [r7, #20]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e6      	bne.n	8006ce0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006d26:	bf00      	nop
 8006d28:	3754      	adds	r7, #84	; 0x54
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b085      	sub	sp, #20
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e027      	b.n	8006d98 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2224      	movs	r2, #36	; 0x24
 8006d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0201 	bic.w	r2, r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e02d      	b.n	8006e18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2224      	movs	r2, #36	; 0x24
 8006dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0201 	bic.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f84f 	bl	8006e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e34:	2302      	movs	r3, #2
 8006e36:	e02d      	b.n	8006e94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2224      	movs	r2, #36	; 0x24
 8006e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0201 	bic.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f811 	bl	8006e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d108      	bne.n	8006ebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ebc:	e031      	b.n	8006f22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ebe:	2308      	movs	r3, #8
 8006ec0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ec2:	2308      	movs	r3, #8
 8006ec4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	0e5b      	lsrs	r3, r3, #25
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f003 0307 	and.w	r3, r3, #7
 8006ed4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	0f5b      	lsrs	r3, r3, #29
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	7b3a      	ldrb	r2, [r7, #12]
 8006eea:	4911      	ldr	r1, [pc, #68]	; (8006f30 <UARTEx_SetNbDataToProcess+0x94>)
 8006eec:	5c8a      	ldrb	r2, [r1, r2]
 8006eee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ef2:	7b3a      	ldrb	r2, [r7, #12]
 8006ef4:	490f      	ldr	r1, [pc, #60]	; (8006f34 <UARTEx_SetNbDataToProcess+0x98>)
 8006ef6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	7b7a      	ldrb	r2, [r7, #13]
 8006f08:	4909      	ldr	r1, [pc, #36]	; (8006f30 <UARTEx_SetNbDataToProcess+0x94>)
 8006f0a:	5c8a      	ldrb	r2, [r1, r2]
 8006f0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f10:	7b7a      	ldrb	r2, [r7, #13]
 8006f12:	4908      	ldr	r1, [pc, #32]	; (8006f34 <UARTEx_SetNbDataToProcess+0x98>)
 8006f14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f16:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f22:	bf00      	nop
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	08006fd8 	.word	0x08006fd8
 8006f34:	08006fe0 	.word	0x08006fe0

08006f38 <memset>:
 8006f38:	4402      	add	r2, r0
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d100      	bne.n	8006f42 <memset+0xa>
 8006f40:	4770      	bx	lr
 8006f42:	f803 1b01 	strb.w	r1, [r3], #1
 8006f46:	e7f9      	b.n	8006f3c <memset+0x4>

08006f48 <__libc_init_array>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	4d0d      	ldr	r5, [pc, #52]	; (8006f80 <__libc_init_array+0x38>)
 8006f4c:	4c0d      	ldr	r4, [pc, #52]	; (8006f84 <__libc_init_array+0x3c>)
 8006f4e:	1b64      	subs	r4, r4, r5
 8006f50:	10a4      	asrs	r4, r4, #2
 8006f52:	2600      	movs	r6, #0
 8006f54:	42a6      	cmp	r6, r4
 8006f56:	d109      	bne.n	8006f6c <__libc_init_array+0x24>
 8006f58:	4d0b      	ldr	r5, [pc, #44]	; (8006f88 <__libc_init_array+0x40>)
 8006f5a:	4c0c      	ldr	r4, [pc, #48]	; (8006f8c <__libc_init_array+0x44>)
 8006f5c:	f000 f818 	bl	8006f90 <_init>
 8006f60:	1b64      	subs	r4, r4, r5
 8006f62:	10a4      	asrs	r4, r4, #2
 8006f64:	2600      	movs	r6, #0
 8006f66:	42a6      	cmp	r6, r4
 8006f68:	d105      	bne.n	8006f76 <__libc_init_array+0x2e>
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}
 8006f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f70:	4798      	blx	r3
 8006f72:	3601      	adds	r6, #1
 8006f74:	e7ee      	b.n	8006f54 <__libc_init_array+0xc>
 8006f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7a:	4798      	blx	r3
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	e7f2      	b.n	8006f66 <__libc_init_array+0x1e>
 8006f80:	08006ff0 	.word	0x08006ff0
 8006f84:	08006ff0 	.word	0x08006ff0
 8006f88:	08006ff0 	.word	0x08006ff0
 8006f8c:	08006ff4 	.word	0x08006ff4

08006f90 <_init>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	bf00      	nop
 8006f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f96:	bc08      	pop	{r3}
 8006f98:	469e      	mov	lr, r3
 8006f9a:	4770      	bx	lr

08006f9c <_fini>:
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9e:	bf00      	nop
 8006fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa2:	bc08      	pop	{r3}
 8006fa4:	469e      	mov	lr, r3
 8006fa6:	4770      	bx	lr
