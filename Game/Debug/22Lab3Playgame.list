
22Lab3Playgame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ddc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006fb4  08006fb4  00016fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ff4  08006ff4  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006ff4  08006ff4  00016ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ffc  08006ffc  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ffc  08006ffc  00016ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007000  08007000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08007004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000dc  080070e0  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  080070e0  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000181d3  00000000  00000000  0002014f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b59  00000000  00000000  00038322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  0003ae80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001105  00000000  00000000  0003c410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026807  00000000  00000000  0003d515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e1a  00000000  00000000  00063d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd19d  00000000  00000000  0007db36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d10  00000000  00000000  0017acd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001809e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000dc 	.word	0x200000dc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006f9c 	.word	0x08006f9c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000e0 	.word	0x200000e0
 8000214:	08006f9c 	.word	0x08006f9c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 ffeb 	bl	80014f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f81c 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fa52 	bl	80009c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fa1e 	bl	8000964 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f8a2 	bl	8000670 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f97c 	bl	8000828 <MX_TIM2_Init>
  MX_SPI3_Init();
 8000530:	f000 f8e8 	bl	8000704 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000534:	f000 f924 	bl	8000780 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000538:	f000 f9c4 	bl	80008c4 <MX_TIM3_Init>
  MX_I2C1_Init();
 800053c:	f000 f858 	bl	80005f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //  SPITxRx_Setup();//for mode 1,1
    IODIRB_Setup();
 8000540:	f000 fb1c 	bl	8000b7c <IODIRB_Setup>
    HAL_TIM_Base_Start_IT(&htim3);
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <main+0x40>)
 8000546:	f005 f95d 	bl	8005804 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPITxRx_readIO();
 800054a:	f000 fb37 	bl	8000bbc <SPITxRx_readIO>
	  Game();
 800054e:	f000 fb69 	bl	8000c24 <Game>
	  SPITxRx_readIO();
 8000552:	e7fa      	b.n	800054a <main+0x36>
 8000554:	2000039c 	.word	0x2000039c

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0318 	add.w	r3, r7, #24
 8000562:	2238      	movs	r2, #56	; 0x38
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f006 fcec 	bl	8006f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800057a:	2000      	movs	r0, #0
 800057c:	f003 fb92 	bl	8003ca4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	2340      	movs	r3, #64	; 0x40
 800058c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000596:	2304      	movs	r3, #4
 8000598:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800059a:	2355      	movs	r3, #85	; 0x55
 800059c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fc2c 	bl	8003e0c <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ba:	f000 fd13 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2303      	movs	r3, #3
 80005c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2104      	movs	r1, #4
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 ff2a 	bl	8004430 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005e2:	f000 fcff 	bl	8000fe4 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_I2C1_Init+0x74>)
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <MX_I2C1_Init+0x78>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_I2C1_Init+0x74>)
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <MX_I2C1_Init+0x7c>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_I2C1_Init+0x74>)
 8000608:	2201      	movs	r2, #1
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_I2C1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_I2C1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <MX_I2C1_Init+0x74>)
 800062c:	f001 fd07 	bl	800203e <HAL_I2C_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000636:	f000 fcd5 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800063a:	2100      	movs	r1, #0
 800063c:	4809      	ldr	r0, [pc, #36]	; (8000664 <MX_I2C1_Init+0x74>)
 800063e:	f003 fa99 	bl	8003b74 <HAL_I2CEx_ConfigAnalogFilter>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000648:	f000 fccc 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_I2C1_Init+0x74>)
 8000650:	f003 fadb 	bl	8003c0a <HAL_I2CEx_ConfigDigitalFilter>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800065a:	f000 fcc3 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000f8 	.word	0x200000f8
 8000668:	40005400 	.word	0x40005400
 800066c:	30a0a7fb 	.word	0x30a0a7fb

08000670 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <MX_LPUART1_UART_Init+0x8c>)
 8000676:	4a22      	ldr	r2, [pc, #136]	; (8000700 <MX_LPUART1_UART_Init+0x90>)
 8000678:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800067a:	4b20      	ldr	r3, [pc, #128]	; (80006fc <MX_LPUART1_UART_Init+0x8c>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000680:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <MX_LPUART1_UART_Init+0x8c>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <MX_LPUART1_UART_Init+0x8c>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_LPUART1_UART_Init+0x8c>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <MX_LPUART1_UART_Init+0x8c>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_LPUART1_UART_Init+0x8c>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_LPUART1_UART_Init+0x8c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_LPUART1_UART_Init+0x8c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_LPUART1_UART_Init+0x8c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006b2:	4812      	ldr	r0, [pc, #72]	; (80006fc <MX_LPUART1_UART_Init+0x8c>)
 80006b4:	f005 fdd8 	bl	8006268 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006be:	f000 fc91 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006c2:	2100      	movs	r1, #0
 80006c4:	480d      	ldr	r0, [pc, #52]	; (80006fc <MX_LPUART1_UART_Init+0x8c>)
 80006c6:	f006 fb73 	bl	8006db0 <HAL_UARTEx_SetTxFifoThreshold>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006d0:	f000 fc88 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d4:	2100      	movs	r1, #0
 80006d6:	4809      	ldr	r0, [pc, #36]	; (80006fc <MX_LPUART1_UART_Init+0x8c>)
 80006d8:	f006 fba8 	bl	8006e2c <HAL_UARTEx_SetRxFifoThreshold>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006e2:	f000 fc7f 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_LPUART1_UART_Init+0x8c>)
 80006e8:	f006 fb29 	bl	8006d3e <HAL_UARTEx_DisableFifoMode>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006f2:	f000 fc77 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000020c 	.word	0x2000020c
 8000700:	40008000 	.word	0x40008000

08000704 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_SPI3_Init+0x74>)
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <MX_SPI3_Init+0x78>)
 800070c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_SPI3_Init+0x74>)
 8000710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000714:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_SPI3_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_SPI3_Init+0x74>)
 800071e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000722:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_SPI3_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_SPI3_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_SPI3_Init+0x74>)
 8000732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000736:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_SPI3_Init+0x74>)
 800073a:	2238      	movs	r2, #56	; 0x38
 800073c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_SPI3_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_SPI3_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_SPI3_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_SPI3_Init+0x74>)
 8000752:	2207      	movs	r2, #7
 8000754:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_SPI3_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_SPI3_Init+0x74>)
 800075e:	2208      	movs	r2, #8
 8000760:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_SPI3_Init+0x74>)
 8000764:	f004 face 	bl	8004d04 <HAL_SPI_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800076e:	f000 fc39 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200002a0 	.word	0x200002a0
 800077c:	40003c00 	.word	0x40003c00

08000780 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007a0:	4a20      	ldr	r2, [pc, #128]	; (8000824 <MX_TIM1_Init+0xa4>)
 80007a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16999;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007a6:	f244 2267 	movw	r2, #16999	; 0x4267
 80007aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 80007b2:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007b4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80007b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007cc:	4814      	ldr	r0, [pc, #80]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007ce:	f004 ffc1 	bl	8005754 <HAL_TIM_Base_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80007d8:	f000 fc04 	bl	8000fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <MX_TIM1_Init+0xa0>)
 80007ea:	f005 f9d3 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80007f4:	f000 fbf6 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_TIM1_Init+0xa0>)
 800080a:	f005 fc51 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000814:	f000 fbe6 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000304 	.word	0x20000304
 8000824:	40012c00 	.word	0x40012c00

08000828 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000848:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800084c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1699;
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000850:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8000854:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_TIM2_Init+0x98>)
 800085e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000862:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_TIM2_Init+0x98>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000870:	4813      	ldr	r0, [pc, #76]	; (80008c0 <MX_TIM2_Init+0x98>)
 8000872:	f004 ff6f 	bl	8005754 <HAL_TIM_Base_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800087c:	f000 fbb2 	bl	8000fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000884:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_TIM2_Init+0x98>)
 800088e:	f005 f981 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000898:	f000 fba4 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_TIM2_Init+0x98>)
 80008aa:	f005 fc01 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80008b4:	f000 fb96 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	3720      	adds	r7, #32
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000350 	.word	0x20000350

080008c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_TIM3_Init+0x98>)
 80008e4:	4a1e      	ldr	r2, [pc, #120]	; (8000960 <MX_TIM3_Init+0x9c>)
 80008e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_TIM3_Init+0x98>)
 80008ea:	f244 2267 	movw	r2, #16999	; 0x4267
 80008ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_TIM3_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_TIM3_Init+0x98>)
 80008f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80008fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_TIM3_Init+0x98>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_TIM3_Init+0x98>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800090a:	4814      	ldr	r0, [pc, #80]	; (800095c <MX_TIM3_Init+0x98>)
 800090c:	f004 ff22 	bl	8005754 <HAL_TIM_Base_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000916:	f000 fb65 	bl	8000fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4619      	mov	r1, r3
 8000926:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_TIM3_Init+0x98>)
 8000928:	f005 f934 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000932:	f000 fb57 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4619      	mov	r1, r3
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <MX_TIM3_Init+0x98>)
 8000944:	f005 fbb4 	bl	80060b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800094e:	f000 fb49 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	3720      	adds	r7, #32
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000039c 	.word	0x2000039c
 8000960:	40000400 	.word	0x40000400

08000964 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_DMA_Init+0x60>)
 800096c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800096e:	4a15      	ldr	r2, [pc, #84]	; (80009c4 <MX_DMA_Init+0x60>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6493      	str	r3, [r2, #72]	; 0x48
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_DMA_Init+0x60>)
 8000978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_DMA_Init+0x60>)
 8000984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <MX_DMA_Init+0x60>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6493      	str	r3, [r2, #72]	; 0x48
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <MX_DMA_Init+0x60>)
 8000990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	200b      	movs	r0, #11
 80009a0:	f000 ff15 	bl	80017ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009a4:	200b      	movs	r0, #11
 80009a6:	f000 ff2c 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	200c      	movs	r0, #12
 80009b0:	f000 ff0d 	bl	80017ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009b4:	200c      	movs	r0, #12
 80009b6:	f000 ff24 	bl	8001802 <HAL_NVIC_EnableIRQ>

}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b3f      	ldr	r3, [pc, #252]	; (8000adc <MX_GPIO_Init+0x114>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a3e      	ldr	r2, [pc, #248]	; (8000adc <MX_GPIO_Init+0x114>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b3c      	ldr	r3, [pc, #240]	; (8000adc <MX_GPIO_Init+0x114>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f6:	4b39      	ldr	r3, [pc, #228]	; (8000adc <MX_GPIO_Init+0x114>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	4a38      	ldr	r2, [pc, #224]	; (8000adc <MX_GPIO_Init+0x114>)
 80009fc:	f043 0320 	orr.w	r3, r3, #32
 8000a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a02:	4b36      	ldr	r3, [pc, #216]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	f003 0320 	and.w	r3, r3, #32
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b33      	ldr	r3, [pc, #204]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4a32      	ldr	r2, [pc, #200]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1a:	4b30      	ldr	r3, [pc, #192]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a2c      	ldr	r2, [pc, #176]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b2a      	ldr	r3, [pc, #168]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	4b27      	ldr	r3, [pc, #156]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a26      	ldr	r2, [pc, #152]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b24      	ldr	r3, [pc, #144]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2120      	movs	r1, #32
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5e:	f001 fab3 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2104      	movs	r1, #4
 8000a66:	481e      	ldr	r0, [pc, #120]	; (8000ae0 <MX_GPIO_Init+0x118>)
 8000a68:	f001 faae 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4818      	ldr	r0, [pc, #96]	; (8000ae4 <MX_GPIO_Init+0x11c>)
 8000a84:	f001 f906 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a88:	2320      	movs	r3, #32
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f001 f8f7 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <MX_GPIO_Init+0x118>)
 8000abe:	f001 f8e9 	bl	8001c94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2028      	movs	r0, #40	; 0x28
 8000ac8:	f000 fe81 	bl	80017ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000acc:	2028      	movs	r0, #40	; 0x28
 8000ace:	f000 fe98 	bl	8001802 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48000c00 	.word	0x48000c00
 8000ae4:	48000800 	.word	0x48000800

08000ae8 <EEPROMWriteExample>:

/* USER CODE BEGIN 4 */
void EEPROMWriteExample() {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af02      	add	r7, sp, #8
if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <EEPROMWriteExample+0x3c>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d012      	beq.n	8000b1c <EEPROMWriteExample+0x34>
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <EEPROMWriteExample+0x40>)
 8000af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b20      	cmp	r3, #32
 8000b00:	d10c      	bne.n	8000b1c <EEPROMWriteExample+0x34>
//static uint8_t data[5] = { 0x67, 0x62, 0x5F, 0x4E, 0x57 };
HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 6);
 8000b02:	2306      	movs	r3, #6
 8000b04:	9301      	str	r3, [sp, #4]
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <EEPROMWriteExample+0x44>)
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	222c      	movs	r2, #44	; 0x2c
 8000b0e:	21a0      	movs	r1, #160	; 0xa0
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <EEPROMWriteExample+0x40>)
 8000b12:	f001 fb2f 	bl	8002174 <HAL_I2C_Mem_Write_IT>
eepromExampleWriteFlag = 0;
 8000b16:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <EEPROMWriteExample+0x3c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
	}
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200003e8 	.word	0x200003e8
 8000b28:	200000f8 	.word	0x200000f8
 8000b2c:	20000000 	.word	0x20000000

08000b30 <EEPROMReadExample>:

void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af02      	add	r7, sp, #8
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
if (eepromExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <EEPROMReadExample+0x44>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d012      	beq.n	8000b6a <EEPROMReadExample+0x3a>
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <EEPROMReadExample+0x48>)
 8000b46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b20      	cmp	r3, #32
 8000b4e:	d10c      	bne.n	8000b6a <EEPROMReadExample+0x3a>
HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 8000b50:	887b      	ldrh	r3, [r7, #2]
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2302      	movs	r3, #2
 8000b5a:	222c      	movs	r2, #44	; 0x2c
 8000b5c:	21a0      	movs	r1, #160	; 0xa0
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <EEPROMReadExample+0x48>)
 8000b60:	f001 fb92 	bl	8002288 <HAL_I2C_Mem_Read_IT>
eepromExampleReadFlag = 0;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <EEPROMReadExample+0x44>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200003e9 	.word	0x200003e9
 8000b78:	200000f8 	.word	0x200000f8

08000b7c <IODIRB_Setup>:
//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
//HAL_Delay(1);
//}

void IODIRB_Setup()//at BEGIN 2
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2104      	movs	r1, #4
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <IODIRB_Setup+0x30>)
 8000b86:	f001 fa1f 	bl	8001fc8 <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000000;//write
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <IODIRB_Setup+0x34>)
 8000b8c:	2240      	movs	r2, #64	; 0x40
 8000b8e:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x01;//IODIRB
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <IODIRB_Setup+0x34>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0b00000000;
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <IODIRB_Setup+0x34>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	709a      	strb	r2, [r3, #2]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <IODIRB_Setup+0x38>)
 8000ba0:	4903      	ldr	r1, [pc, #12]	; (8000bb0 <IODIRB_Setup+0x34>)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <IODIRB_Setup+0x3c>)
 8000ba4:	f004 f95a 	bl	8004e5c <HAL_SPI_TransmitReceive_IT>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	48000c00 	.word	0x48000c00
 8000bb0:	20000400 	.word	0x20000400
 8000bb4:	200003f4 	.word	0x200003f4
 8000bb8:	200002a0 	.word	0x200002a0

08000bbc <SPITxRx_readIO>:

void SPITxRx_readIO()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	4813      	ldr	r0, [pc, #76]	; (8000c10 <SPITxRx_readIO+0x54>)
 8000bc4:	f001 f9e8 	bl	8001f98 <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d01e      	beq.n	8000c0c <SPITxRx_readIO+0x50>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	480f      	ldr	r0, [pc, #60]	; (8000c10 <SPITxRx_readIO+0x54>)
 8000bd4:	f001 f9f8 	bl	8001fc8 <HAL_GPIO_WritePin>
		if (Mode == 0)
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <SPITxRx_readIO+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d109      	bne.n	8000bf4 <SPITxRx_readIO+0x38>
		{
			SPITx[0] = 0b01000001;//read
 8000be0:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <SPITxRx_readIO+0x5c>)
 8000be2:	2241      	movs	r2, #65	; 0x41
 8000be4:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x12;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <SPITxRx_readIO+0x5c>)
 8000be8:	2212      	movs	r2, #18
 8000bea:	705a      	strb	r2, [r3, #1]
			SPITx[2] = 0;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <SPITxRx_readIO+0x5c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	709a      	strb	r2, [r3, #2]
 8000bf2:	e005      	b.n	8000c00 <SPITxRx_readIO+0x44>
		}
		else if(Mode == 1)
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <SPITxRx_readIO+0x58>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d101      	bne.n	8000c00 <SPITxRx_readIO+0x44>
		{
			Game();
 8000bfc:	f000 f812 	bl	8000c24 <Game>
		}
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000c00:	2303      	movs	r3, #3
 8000c02:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <SPITxRx_readIO+0x60>)
 8000c04:	4904      	ldr	r1, [pc, #16]	; (8000c18 <SPITxRx_readIO+0x5c>)
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <SPITxRx_readIO+0x64>)
 8000c08:	f004 f928 	bl	8004e5c <HAL_SPI_TransmitReceive_IT>
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	48000c00 	.word	0x48000c00
 8000c14:	2000040a 	.word	0x2000040a
 8000c18:	20000400 	.word	0x20000400
 8000c1c:	200003f4 	.word	0x200003f4
 8000c20:	200002a0 	.word	0x200002a0

08000c24 <Game>:


void Game()
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	if (State == 3)
 8000c28:	4b9d      	ldr	r3, [pc, #628]	; (8000ea0 <Game+0x27c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	d113      	bne.n	8000c58 <Game+0x34>
	{
		SPITx[0] = 0b01000000;//write
 8000c30:	4b9c      	ldr	r3, [pc, #624]	; (8000ea4 <Game+0x280>)
 8000c32:	2240      	movs	r2, #64	; 0x40
 8000c34:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x15;//OLATB
 8000c36:	4b9b      	ldr	r3, [pc, #620]	; (8000ea4 <Game+0x280>)
 8000c38:	2215      	movs	r2, #21
 8000c3a:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b00000000;
 8000c3c:	4b99      	ldr	r3, [pc, #612]	; (8000ea4 <Game+0x280>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	709a      	strb	r2, [r3, #2]
		HAL_Delay(1000);
 8000c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c46:	f000 fcc5 	bl	80015d4 <HAL_Delay>
//		eepromExampleWriteFlag = 1;
//		EEPROMWriteExample();
		eepromExampleReadFlag = 1;
 8000c4a:	4b97      	ldr	r3, [pc, #604]	; (8000ea8 <Game+0x284>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
		EEPROMReadExample(eepromDataReadBack,6);
 8000c50:	2106      	movs	r1, #6
 8000c52:	4896      	ldr	r0, [pc, #600]	; (8000eac <Game+0x288>)
 8000c54:	f7ff ff6c 	bl	8000b30 <EEPROMReadExample>

	}
	if (State == 1)
 8000c58:	4b91      	ldr	r3, [pc, #580]	; (8000ea0 <Game+0x27c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	f040 80f8 	bne.w	8000e52 <Game+0x22e>
		{
			if (SPIRx[2]==240)
 8000c62:	4b93      	ldr	r3, [pc, #588]	; (8000eb0 <Game+0x28c>)
 8000c64:	789b      	ldrb	r3, [r3, #2]
 8000c66:	2bf0      	cmp	r3, #240	; 0xf0
 8000c68:	d102      	bne.n	8000c70 <Game+0x4c>
			{
				click = 0;
 8000c6a:	4b92      	ldr	r3, [pc, #584]	; (8000eb4 <Game+0x290>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
			}
			if (SPIRx[2]==224 && click == 0)
 8000c70:	4b8f      	ldr	r3, [pc, #572]	; (8000eb0 <Game+0x28c>)
 8000c72:	789b      	ldrb	r3, [r3, #2]
 8000c74:	2be0      	cmp	r3, #224	; 0xe0
 8000c76:	d133      	bne.n	8000ce0 <Game+0xbc>
 8000c78:	4b8e      	ldr	r3, [pc, #568]	; (8000eb4 <Game+0x290>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d12f      	bne.n	8000ce0 <Game+0xbc>
				{
				click = 1;
 8000c80:	4b8c      	ldr	r3, [pc, #560]	; (8000eb4 <Game+0x290>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
				Pattern_Check[Nub] = 1;
 8000c86:	4b8c      	ldr	r3, [pc, #560]	; (8000eb8 <Game+0x294>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a8c      	ldr	r2, [pc, #560]	; (8000ebc <Game+0x298>)
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000c92:	4b8b      	ldr	r3, [pc, #556]	; (8000ec0 <Game+0x29c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	1e5a      	subs	r2, r3, #1
 8000c98:	4b89      	ldr	r3, [pc, #548]	; (8000ec0 <Game+0x29c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	4989      	ldr	r1, [pc, #548]	; (8000ec4 <Game+0x2a0>)
 8000ca0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ca4:	4988      	ldr	r1, [pc, #544]	; (8000ec8 <Game+0x2a4>)
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 1;
 8000caa:	4b88      	ldr	r3, [pc, #544]	; (8000ecc <Game+0x2a8>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000cb0:	4b81      	ldr	r3, [pc, #516]	; (8000eb8 <Game+0x294>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	4a80      	ldr	r2, [pc, #512]	; (8000eb8 <Game+0x294>)
 8000cb8:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
 8000cba:	2064      	movs	r0, #100	; 0x64
 8000cbc:	f000 fc8a 	bl	80015d4 <HAL_Delay>
				if (Random_Number[Nub-1] != 2)
 8000cc0:	4b7d      	ldr	r3, [pc, #500]	; (8000eb8 <Game+0x294>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	4a7f      	ldr	r2, [pc, #508]	; (8000ec4 <Game+0x2a0>)
 8000cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	f000 80ab 	beq.w	8000e28 <Game+0x204>
					{
					wrong = 1;
 8000cd2:	4b7f      	ldr	r3, [pc, #508]	; (8000ed0 <Game+0x2ac>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]
					State = 3;
 8000cd8:	4b71      	ldr	r3, [pc, #452]	; (8000ea0 <Game+0x27c>)
 8000cda:	2203      	movs	r2, #3
 8000cdc:	601a      	str	r2, [r3, #0]
				if (Random_Number[Nub-1] != 2)
 8000cde:	e0a3      	b.n	8000e28 <Game+0x204>
					//Nub = 0;
					//Numcheck_Count = 0;
					//i = 0;
					}
				}
			else if (SPIRx[2]==208 && click == 0)
 8000ce0:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Game+0x28c>)
 8000ce2:	789b      	ldrb	r3, [r3, #2]
 8000ce4:	2bd0      	cmp	r3, #208	; 0xd0
 8000ce6:	d132      	bne.n	8000d4e <Game+0x12a>
 8000ce8:	4b72      	ldr	r3, [pc, #456]	; (8000eb4 <Game+0x290>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d12e      	bne.n	8000d4e <Game+0x12a>
				{
				click = 1;
 8000cf0:	4b70      	ldr	r3, [pc, #448]	; (8000eb4 <Game+0x290>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
				Pattern_Check[Nub] = 2;
 8000cf6:	4b70      	ldr	r3, [pc, #448]	; (8000eb8 <Game+0x294>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a70      	ldr	r2, [pc, #448]	; (8000ebc <Game+0x298>)
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000d02:	4b6f      	ldr	r3, [pc, #444]	; (8000ec0 <Game+0x29c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	1e5a      	subs	r2, r3, #1
 8000d08:	4b6d      	ldr	r3, [pc, #436]	; (8000ec0 <Game+0x29c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	496d      	ldr	r1, [pc, #436]	; (8000ec4 <Game+0x2a0>)
 8000d10:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d14:	496c      	ldr	r1, [pc, #432]	; (8000ec8 <Game+0x2a4>)
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 2;
 8000d1a:	4b6c      	ldr	r3, [pc, #432]	; (8000ecc <Game+0x2a8>)
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000d20:	4b65      	ldr	r3, [pc, #404]	; (8000eb8 <Game+0x294>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	4a64      	ldr	r2, [pc, #400]	; (8000eb8 <Game+0x294>)
 8000d28:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
 8000d2a:	2064      	movs	r0, #100	; 0x64
 8000d2c:	f000 fc52 	bl	80015d4 <HAL_Delay>
				if (Random_Number[Nub-1] != 2)
 8000d30:	4b61      	ldr	r3, [pc, #388]	; (8000eb8 <Game+0x294>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	4a63      	ldr	r2, [pc, #396]	; (8000ec4 <Game+0x2a0>)
 8000d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d073      	beq.n	8000e28 <Game+0x204>
					{
					wrong = 1;
 8000d40:	4b63      	ldr	r3, [pc, #396]	; (8000ed0 <Game+0x2ac>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
					State = 3;
 8000d46:	4b56      	ldr	r3, [pc, #344]	; (8000ea0 <Game+0x27c>)
 8000d48:	2203      	movs	r2, #3
 8000d4a:	601a      	str	r2, [r3, #0]
				if (Random_Number[Nub-1] != 2)
 8000d4c:	e06c      	b.n	8000e28 <Game+0x204>
					//Nub = 0;
					//Numcheck_Count = 0;
					//i = 0;
					}
				}
			else if (SPIRx[2]==112 && click == 0)
 8000d4e:	4b58      	ldr	r3, [pc, #352]	; (8000eb0 <Game+0x28c>)
 8000d50:	789b      	ldrb	r3, [r3, #2]
 8000d52:	2b70      	cmp	r3, #112	; 0x70
 8000d54:	d132      	bne.n	8000dbc <Game+0x198>
 8000d56:	4b57      	ldr	r3, [pc, #348]	; (8000eb4 <Game+0x290>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d12e      	bne.n	8000dbc <Game+0x198>
				{
				click = 1;
 8000d5e:	4b55      	ldr	r3, [pc, #340]	; (8000eb4 <Game+0x290>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	601a      	str	r2, [r3, #0]
				Pattern_Check[Nub] = 3;
 8000d64:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <Game+0x294>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a54      	ldr	r2, [pc, #336]	; (8000ebc <Game+0x298>)
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000d70:	4b53      	ldr	r3, [pc, #332]	; (8000ec0 <Game+0x29c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4b52      	ldr	r3, [pc, #328]	; (8000ec0 <Game+0x29c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	4951      	ldr	r1, [pc, #324]	; (8000ec4 <Game+0x2a0>)
 8000d7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d82:	4951      	ldr	r1, [pc, #324]	; (8000ec8 <Game+0x2a4>)
 8000d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 3;
 8000d88:	4b50      	ldr	r3, [pc, #320]	; (8000ecc <Game+0x2a8>)
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000d8e:	4b4a      	ldr	r3, [pc, #296]	; (8000eb8 <Game+0x294>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	3301      	adds	r3, #1
 8000d94:	4a48      	ldr	r2, [pc, #288]	; (8000eb8 <Game+0x294>)
 8000d96:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
 8000d98:	2064      	movs	r0, #100	; 0x64
 8000d9a:	f000 fc1b 	bl	80015d4 <HAL_Delay>
				if (Random_Number[Nub-1] != 3)
 8000d9e:	4b46      	ldr	r3, [pc, #280]	; (8000eb8 <Game+0x294>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	4a47      	ldr	r2, [pc, #284]	; (8000ec4 <Game+0x2a0>)
 8000da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d03c      	beq.n	8000e28 <Game+0x204>
					{
					wrong = 1;
 8000dae:	4b48      	ldr	r3, [pc, #288]	; (8000ed0 <Game+0x2ac>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
					State = 3;
 8000db4:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <Game+0x27c>)
 8000db6:	2203      	movs	r2, #3
 8000db8:	601a      	str	r2, [r3, #0]
				if (Random_Number[Nub-1] != 3)
 8000dba:	e035      	b.n	8000e28 <Game+0x204>
					//Nub = 0;
					//Numcheck_Count = 0;
					//i = 0;
					}
				}
			else if (SPIRx[2]==127 && click == 0)
 8000dbc:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <Game+0x28c>)
 8000dbe:	789b      	ldrb	r3, [r3, #2]
 8000dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8000dc2:	d131      	bne.n	8000e28 <Game+0x204>
 8000dc4:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <Game+0x290>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d12d      	bne.n	8000e28 <Game+0x204>
				{
				click = 1;
 8000dcc:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <Game+0x290>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
				Pattern_Check[Nub] = 4;
 8000dd2:	4b39      	ldr	r3, [pc, #228]	; (8000eb8 <Game+0x294>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a39      	ldr	r2, [pc, #228]	; (8000ebc <Game+0x298>)
 8000dd8:	2104      	movs	r1, #4
 8000dda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000dde:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <Game+0x29c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	1e5a      	subs	r2, r3, #1
 8000de4:	4b36      	ldr	r3, [pc, #216]	; (8000ec0 <Game+0x29c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	4936      	ldr	r1, [pc, #216]	; (8000ec4 <Game+0x2a0>)
 8000dec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000df0:	4935      	ldr	r1, [pc, #212]	; (8000ec8 <Game+0x2a4>)
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 4;
 8000df6:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <Game+0x2a8>)
 8000df8:	2204      	movs	r2, #4
 8000dfa:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <Game+0x294>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	4a2d      	ldr	r2, [pc, #180]	; (8000eb8 <Game+0x294>)
 8000e04:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
 8000e06:	2064      	movs	r0, #100	; 0x64
 8000e08:	f000 fbe4 	bl	80015d4 <HAL_Delay>
				if (Random_Number[Nub-1] != 4)
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <Game+0x294>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	4a2c      	ldr	r2, [pc, #176]	; (8000ec4 <Game+0x2a0>)
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	d005      	beq.n	8000e28 <Game+0x204>
					{
					wrong = 1;
 8000e1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <Game+0x2ac>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	601a      	str	r2, [r3, #0]
					State = 3;
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <Game+0x27c>)
 8000e24:	2203      	movs	r2, #3
 8000e26:	601a      	str	r2, [r3, #0]
					//Nub = 0;
					//Numcheck_Count = 0;
					//i = 0;
					}
				}
			if (Nub > Numcheck_Count)
 8000e28:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <Game+0x294>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <Game+0x29c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dd78      	ble.n	8000f26 <Game+0x302>
			{
				Nub = 0;
 8000e34:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <Game+0x294>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
				State = 0;
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <Game+0x27c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
				i = 0;
 8000e40:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <Game+0x2b0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
				Numcheck_Count = Numcheck_Count + 1;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <Game+0x29c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <Game+0x29c>)
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e069      	b.n	8000f26 <Game+0x302>
			}
		}
	else if (State == 0)
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <Game+0x27c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d165      	bne.n	8000f26 <Game+0x302>
		{
			SPITx[0] = 0b01000000;//write
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <Game+0x280>)
 8000e5c:	2240      	movs	r2, #64	; 0x40
 8000e5e:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15;//OLATB
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <Game+0x280>)
 8000e62:	2215      	movs	r2, #21
 8000e64:	705a      	strb	r2, [r3, #1]
			if (Random_Number[i] == 1)
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <Game+0x2b0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <Game+0x2a0>)
 8000e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d106      	bne.n	8000e82 <Game+0x25e>
			{
				SPITx[2] = 0b00111111;
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <Game+0x280>)
 8000e76:	223f      	movs	r2, #63	; 0x3f
 8000e78:	709a      	strb	r2, [r3, #2]
				test =1;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <Game+0x2b4>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e047      	b.n	8000f12 <Game+0x2ee>

			}
			else if (Random_Number[i] == 2)
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <Game+0x2b0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <Game+0x2a0>)
 8000e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d125      	bne.n	8000edc <Game+0x2b8>
			{
				SPITx[2] = 0b11001111;
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <Game+0x280>)
 8000e92:	22cf      	movs	r2, #207	; 0xcf
 8000e94:	709a      	strb	r2, [r3, #2]
				test =2;
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <Game+0x2b4>)
 8000e98:	2202      	movs	r2, #2
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e039      	b.n	8000f12 <Game+0x2ee>
 8000e9e:	bf00      	nop
 8000ea0:	200005a0 	.word	0x200005a0
 8000ea4:	20000400 	.word	0x20000400
 8000ea8:	200003e9 	.word	0x200003e9
 8000eac:	200003ec 	.word	0x200003ec
 8000eb0:	200003f4 	.word	0x200003f4
 8000eb4:	200005b0 	.word	0x200005b0
 8000eb8:	200005ac 	.word	0x200005ac
 8000ebc:	200004d8 	.word	0x200004d8
 8000ec0:	200005a4 	.word	0x200005a4
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000410 	.word	0x20000410
 8000ecc:	20000006 	.word	0x20000006
 8000ed0:	200005b4 	.word	0x200005b4
 8000ed4:	2000040c 	.word	0x2000040c
 8000ed8:	200005a8 	.word	0x200005a8

			}
			else if (Random_Number[i] == 3)
 8000edc:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <Game+0x31c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a18      	ldr	r2, [pc, #96]	; (8000f44 <Game+0x320>)
 8000ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d106      	bne.n	8000ef8 <Game+0x2d4>
			{
				SPITx[2] = 0b11110011;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <Game+0x324>)
 8000eec:	22f3      	movs	r2, #243	; 0xf3
 8000eee:	709a      	strb	r2, [r3, #2]
				test =3;
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <Game+0x328>)
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e00c      	b.n	8000f12 <Game+0x2ee>

			}
			else if (Random_Number[i] == 4)
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <Game+0x31c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Game+0x320>)
 8000efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	d105      	bne.n	8000f12 <Game+0x2ee>
			{
				SPITx[2] = 0b11111100;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <Game+0x324>)
 8000f08:	22fc      	movs	r2, #252	; 0xfc
 8000f0a:	709a      	strb	r2, [r3, #2]
				test =4;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <Game+0x328>)
 8000f0e:	2204      	movs	r2, #4
 8000f10:	601a      	str	r2, [r3, #0]
			}
			if (i == Numcheck_Count+1)
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <Game+0x32c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <Game+0x31c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d102      	bne.n	8000f26 <Game+0x302>
			{
				State = 1;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <Game+0x330>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	601a      	str	r2, [r3, #0]
			}
		}
	data[0] = Numcheck_Count;
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <Game+0x32c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <Game+0x334>)
 8000f2e:	701a      	strb	r2, [r3, #0]
	eepromExampleWriteFlag = 1;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <Game+0x338>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
	EEPROMWriteExample();
 8000f36:	f7ff fdd7 	bl	8000ae8 <EEPROMWriteExample>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000040c 	.word	0x2000040c
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000400 	.word	0x20000400
 8000f4c:	200005a8 	.word	0x200005a8
 8000f50:	200005a4 	.word	0x200005a4
 8000f54:	200005a0 	.word	0x200005a0
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	200003e8 	.word	0x200003e8

08000f60 <HAL_TIM_PeriodElapsedCallback>:
//
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d10e      	bne.n	8000f8e <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		i+=1;
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f78:	6013      	str	r3, [r2, #0]
		if (i > Numcheck_Count + 1)
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	da02      	bge.n	8000f8e <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			i=0;
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2000039c 	.word	0x2000039c
 8000fa0:	2000040c 	.word	0x2000040c
 8000fa4:	200005a4 	.word	0x200005a4

08000fa8 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	Mode+=1;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_SPI_TxRxCpltCallback+0x34>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_SPI_TxRxCpltCallback+0x34>)
 8000fba:	701a      	strb	r2, [r3, #0]
	if (Mode>1)
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <HAL_SPI_TxRxCpltCallback+0x34>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d902      	bls.n	8000fca <HAL_SPI_TxRxCpltCallback+0x22>
	{
		Mode = 0;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_SPI_TxRxCpltCallback+0x34>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2104      	movs	r1, #4
 8000fce:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000fd0:	f000 fffa 	bl	8001fc8 <HAL_GPIO_WritePin>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2000040a 	.word	0x2000040a
 8000fe0:	48000c00 	.word	0x48000c00

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x8>
	...

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_MspInit+0x44>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_MspInit+0x44>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6613      	str	r3, [r2, #96]	; 0x60
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_MspInit+0x44>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_MspInit+0x44>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <HAL_MspInit+0x44>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	6593      	str	r3, [r2, #88]	; 0x58
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_MspInit+0x44>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001026:	f002 fee1 	bl	8003dec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000

08001038 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b09e      	sub	sp, #120	; 0x78
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	2254      	movs	r2, #84	; 0x54
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f005 ff73 	bl	8006f44 <memset>
  if(hi2c->Instance==I2C1)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a50      	ldr	r2, [pc, #320]	; (80011a4 <HAL_I2C_MspInit+0x16c>)
 8001064:	4293      	cmp	r3, r2
 8001066:	f040 8099 	bne.w	800119c <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800106a:	2340      	movs	r3, #64	; 0x40
 800106c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fbf6 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001082:	f7ff ffaf 	bl	8000fe4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b48      	ldr	r3, [pc, #288]	; (80011a8 <HAL_I2C_MspInit+0x170>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a47      	ldr	r2, [pc, #284]	; (80011a8 <HAL_I2C_MspInit+0x170>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b45      	ldr	r3, [pc, #276]	; (80011a8 <HAL_I2C_MspInit+0x170>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800109e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a4:	2312      	movs	r3, #18
 80010a6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b0:	2304      	movs	r3, #4
 80010b2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010b8:	4619      	mov	r1, r3
 80010ba:	483c      	ldr	r0, [pc, #240]	; (80011ac <HAL_I2C_MspInit+0x174>)
 80010bc:	f000 fdea 	bl	8001c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c0:	4b39      	ldr	r3, [pc, #228]	; (80011a8 <HAL_I2C_MspInit+0x170>)
 80010c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c4:	4a38      	ldr	r2, [pc, #224]	; (80011a8 <HAL_I2C_MspInit+0x170>)
 80010c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ca:	6593      	str	r3, [r2, #88]	; 0x58
 80010cc:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <HAL_I2C_MspInit+0x170>)
 80010ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 80010d8:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <HAL_I2C_MspInit+0x178>)
 80010da:	4a36      	ldr	r2, [pc, #216]	; (80011b4 <HAL_I2C_MspInit+0x17c>)
 80010dc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80010de:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <HAL_I2C_MspInit+0x178>)
 80010e0:	2210      	movs	r2, #16
 80010e2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e4:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <HAL_I2C_MspInit+0x178>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ea:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <HAL_I2C_MspInit+0x178>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f0:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <HAL_I2C_MspInit+0x178>)
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f6:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <HAL_I2C_MspInit+0x178>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fc:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <HAL_I2C_MspInit+0x178>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001102:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <HAL_I2C_MspInit+0x178>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001108:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <HAL_I2C_MspInit+0x178>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800110e:	4828      	ldr	r0, [pc, #160]	; (80011b0 <HAL_I2C_MspInit+0x178>)
 8001110:	f000 fb92 	bl	8001838 <HAL_DMA_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 800111a:	f7ff ff63 	bl	8000fe4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <HAL_I2C_MspInit+0x178>)
 8001122:	63da      	str	r2, [r3, #60]	; 0x3c
 8001124:	4a22      	ldr	r2, [pc, #136]	; (80011b0 <HAL_I2C_MspInit+0x178>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <HAL_I2C_MspInit+0x180>)
 800112c:	4a23      	ldr	r2, [pc, #140]	; (80011bc <HAL_I2C_MspInit+0x184>)
 800112e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <HAL_I2C_MspInit+0x180>)
 8001132:	2211      	movs	r2, #17
 8001134:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <HAL_I2C_MspInit+0x180>)
 8001138:	2210      	movs	r2, #16
 800113a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <HAL_I2C_MspInit+0x180>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <HAL_I2C_MspInit+0x180>)
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <HAL_I2C_MspInit+0x180>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <HAL_I2C_MspInit+0x180>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_I2C_MspInit+0x180>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <HAL_I2C_MspInit+0x180>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001160:	4815      	ldr	r0, [pc, #84]	; (80011b8 <HAL_I2C_MspInit+0x180>)
 8001162:	f000 fb69 	bl	8001838 <HAL_DMA_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 800116c:	f7ff ff3a 	bl	8000fe4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <HAL_I2C_MspInit+0x180>)
 8001174:	639a      	str	r2, [r3, #56]	; 0x38
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <HAL_I2C_MspInit+0x180>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	201f      	movs	r0, #31
 8001182:	f000 fb24 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001186:	201f      	movs	r0, #31
 8001188:	f000 fb3b 	bl	8001802 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2020      	movs	r0, #32
 8001192:	f000 fb1c 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001196:	2020      	movs	r0, #32
 8001198:	f000 fb33 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800119c:	bf00      	nop
 800119e:	3778      	adds	r7, #120	; 0x78
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40005400 	.word	0x40005400
 80011a8:	40021000 	.word	0x40021000
 80011ac:	48000400 	.word	0x48000400
 80011b0:	2000014c 	.word	0x2000014c
 80011b4:	40020008 	.word	0x40020008
 80011b8:	200001ac 	.word	0x200001ac
 80011bc:	4002001c 	.word	0x4002001c

080011c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b09e      	sub	sp, #120	; 0x78
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	2254      	movs	r2, #84	; 0x54
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f005 feaf 	bl	8006f44 <memset>
  if(huart->Instance==LPUART1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <HAL_UART_MspInit+0xa8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d136      	bne.n	800125e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80011f0:	2320      	movs	r3, #32
 80011f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 fb33 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001208:	f7ff feec 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_UART_MspInit+0xac>)
 800120e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001210:	4a16      	ldr	r2, [pc, #88]	; (800126c <HAL_UART_MspInit+0xac>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_UART_MspInit+0xac>)
 800121a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_UART_MspInit+0xac>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001228:	4a10      	ldr	r2, [pc, #64]	; (800126c <HAL_UART_MspInit+0xac>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_UART_MspInit+0xac>)
 8001232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800123c:	230c      	movs	r3, #12
 800123e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800124c:	230c      	movs	r3, #12
 800124e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f000 fd1b 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800125e:	bf00      	nop
 8001260:	3778      	adds	r7, #120	; 0x78
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40008000 	.word	0x40008000
 800126c:	40021000 	.word	0x40021000

08001270 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <HAL_SPI_MspInit+0x8c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d130      	bne.n	80012f4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_SPI_MspInit+0x90>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	4a1a      	ldr	r2, [pc, #104]	; (8001300 <HAL_SPI_MspInit+0x90>)
 8001298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129c:	6593      	str	r3, [r2, #88]	; 0x58
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_SPI_MspInit+0x90>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_SPI_MspInit+0x90>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <HAL_SPI_MspInit+0x90>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_SPI_MspInit+0x90>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012d4:	2306      	movs	r3, #6
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4809      	ldr	r0, [pc, #36]	; (8001304 <HAL_SPI_MspInit+0x94>)
 80012e0:	f000 fcd8 	bl	8001c94 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	2033      	movs	r0, #51	; 0x33
 80012ea:	f000 fa70 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80012ee:	2033      	movs	r0, #51	; 0x33
 80012f0:	f000 fa87 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40003c00 	.word	0x40003c00
 8001300:	40021000 	.word	0x40021000
 8001304:	48000800 	.word	0x48000800

08001308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d10c      	bne.n	8001334 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_TIM_Base_MspInit+0x90>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131e:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <HAL_TIM_Base_MspInit+0x90>)
 8001320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001324:	6613      	str	r3, [r2, #96]	; 0x60
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_TIM_Base_MspInit+0x90>)
 8001328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001332:	e02a      	b.n	800138a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800133c:	d10c      	bne.n	8001358 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <HAL_TIM_Base_MspInit+0x90>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	4a15      	ldr	r2, [pc, #84]	; (8001398 <HAL_TIM_Base_MspInit+0x90>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6593      	str	r3, [r2, #88]	; 0x58
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <HAL_TIM_Base_MspInit+0x90>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
}
 8001356:	e018      	b.n	800138a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0f      	ldr	r2, [pc, #60]	; (800139c <HAL_TIM_Base_MspInit+0x94>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d113      	bne.n	800138a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_TIM_Base_MspInit+0x90>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	4a0c      	ldr	r2, [pc, #48]	; (8001398 <HAL_TIM_Base_MspInit+0x90>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	6593      	str	r3, [r2, #88]	; 0x58
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_TIM_Base_MspInit+0x90>)
 8001370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	201d      	movs	r0, #29
 8001380:	f000 fa25 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001384:	201d      	movs	r0, #29
 8001386:	f000 fa3c 	bl	8001802 <HAL_NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40012c00 	.word	0x40012c00
 8001398:	40021000 	.word	0x40021000
 800139c:	40000400 	.word	0x40000400

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler+0x4>

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ec:	f000 f8d4 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <DMA1_Channel1_IRQHandler+0x10>)
 80013fa:	f000 fb2c 	bl	8001a56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000014c 	.word	0x2000014c

08001408 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <DMA1_Channel2_IRQHandler+0x10>)
 800140e:	f000 fb22 	bl	8001a56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200001ac 	.word	0x200001ac

0800141c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <TIM3_IRQHandler+0x10>)
 8001422:	f004 fa67 	bl	80058f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000039c 	.word	0x2000039c

08001430 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <I2C1_EV_IRQHandler+0x10>)
 8001436:	f000 ffad 	bl	8002394 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200000f8 	.word	0x200000f8

08001444 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <I2C1_ER_IRQHandler+0x10>)
 800144a:	f000 ffbd 	bl	80023c8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200000f8 	.word	0x200000f8

08001458 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800145c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001460:	f000 fdca 	bl	8001ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <SPI3_IRQHandler+0x10>)
 800146e:	f003 fda3 	bl	8004fb8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200002a0 	.word	0x200002a0

0800147c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a4:	f7ff ffea 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <LoopForever+0x6>)
  ldr r1, =_edata
 80014aa:	490d      	ldr	r1, [pc, #52]	; (80014e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <LoopForever+0xe>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014c0:	4c0a      	ldr	r4, [pc, #40]	; (80014ec <LoopForever+0x16>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f005 fd41 	bl	8006f54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014d2:	f7ff f81f 	bl	8000514 <main>

080014d6 <LoopForever>:

LoopForever:
    b LoopForever
 80014d6:	e7fe      	b.n	80014d6 <LoopForever>
  ldr   r0, =_estack
 80014d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80014e4:	08007004 	.word	0x08007004
  ldr r2, =_sbss
 80014e8:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80014ec:	200005bc 	.word	0x200005bc

080014f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC1_2_IRQHandler>

080014f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f000 f95b 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001502:	2000      	movs	r0, #0
 8001504:	f000 f80e 	bl	8001524 <HAL_InitTick>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	71fb      	strb	r3, [r7, #7]
 8001512:	e001      	b.n	8001518 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001514:	f7ff fd6c 	bl	8000ff0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001518:	79fb      	ldrb	r3, [r7, #7]

}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_InitTick+0x68>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d022      	beq.n	800157e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_InitTick+0x6c>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_InitTick+0x68>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001544:	fbb1 f3f3 	udiv	r3, r1, r3
 8001548:	fbb2 f3f3 	udiv	r3, r2, r3
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f966 	bl	800181e <HAL_SYSTICK_Config>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10f      	bne.n	8001578 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	d809      	bhi.n	8001572 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155e:	2200      	movs	r2, #0
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	f04f 30ff 	mov.w	r0, #4294967295
 8001566:	f000 f932 	bl	80017ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_InitTick+0x70>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e007      	b.n	8001582 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	e004      	b.n	8001582 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	e001      	b.n	8001582 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200000d8 	.word	0x200000d8
 8001590:	200000d0 	.word	0x200000d0
 8001594:	200000d4 	.word	0x200000d4

08001598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_IncTick+0x1c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_IncTick+0x20>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <HAL_IncTick+0x1c>)
 80015a8:	6013      	str	r3, [r2, #0]
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	200005b8 	.word	0x200005b8
 80015b8:	200000d8 	.word	0x200000d8

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	200005b8 	.word	0x200005b8

080015d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015dc:	f7ff ffee 	bl	80015bc <HAL_GetTick>
 80015e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ec:	d004      	beq.n	80015f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_Delay+0x40>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015f8:	bf00      	nop
 80015fa:	f7ff ffdf 	bl	80015bc <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	429a      	cmp	r2, r3
 8001608:	d8f7      	bhi.n	80015fa <HAL_Delay+0x26>
  {
  }
}
 800160a:	bf00      	nop
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200000d8 	.word	0x200000d8

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4907      	ldr	r1, [pc, #28]	; (80016b4 <__NVIC_EnableIRQ+0x38>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f7ff ff8e 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff29 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff40 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff90 	bl	800170c <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5f 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff33 	bl	800167c <__NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffa4 	bl	8001774 <SysTick_Config>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e08d      	b.n	8001966 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_DMA_Init+0x138>)
 8001852:	429a      	cmp	r2, r3
 8001854:	d80f      	bhi.n	8001876 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	4b45      	ldr	r3, [pc, #276]	; (8001974 <HAL_DMA_Init+0x13c>)
 800185e:	4413      	add	r3, r2
 8001860:	4a45      	ldr	r2, [pc, #276]	; (8001978 <HAL_DMA_Init+0x140>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	009a      	lsls	r2, r3, #2
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a42      	ldr	r2, [pc, #264]	; (800197c <HAL_DMA_Init+0x144>)
 8001872:	641a      	str	r2, [r3, #64]	; 0x40
 8001874:	e00e      	b.n	8001894 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	4b40      	ldr	r3, [pc, #256]	; (8001980 <HAL_DMA_Init+0x148>)
 800187e:	4413      	add	r3, r2
 8001880:	4a3d      	ldr	r2, [pc, #244]	; (8001978 <HAL_DMA_Init+0x140>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	091b      	lsrs	r3, r3, #4
 8001888:	009a      	lsls	r2, r3, #2
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a3c      	ldr	r2, [pc, #240]	; (8001984 <HAL_DMA_Init+0x14c>)
 8001892:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2202      	movs	r2, #2
 8001898:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f972 	bl	8001bd0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018f4:	d102      	bne.n	80018fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001910:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d010      	beq.n	800193c <HAL_DMA_Init+0x104>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b04      	cmp	r3, #4
 8001920:	d80c      	bhi.n	800193c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f992 	bl	8001c4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	e008      	b.n	800194e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40020407 	.word	0x40020407
 8001974:	bffdfff8 	.word	0xbffdfff8
 8001978:	cccccccd 	.word	0xcccccccd
 800197c:	40020000 	.word	0x40020000
 8001980:	bffdfbf8 	.word	0xbffdfbf8
 8001984:	40020400 	.word	0x40020400

08001988 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d00d      	beq.n	80019bc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2204      	movs	r2, #4
 80019a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	e047      	b.n	8001a4c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 020e 	bic.w	r2, r2, #14
 80019ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0201 	bic.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	2101      	movs	r1, #1
 80019fa:	fa01 f202 	lsl.w	r2, r1, r2
 80019fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a08:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00c      	beq.n	8001a2c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a20:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a2a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	4798      	blx	r3
    }
  }
  return status;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	2204      	movs	r2, #4
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d026      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x7a>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d021      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d107      	bne.n	8001aaa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0204 	bic.w	r2, r2, #4
 8001aa8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f003 021f 	and.w	r2, r3, #31
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	2104      	movs	r1, #4
 8001ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8001abc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d071      	beq.n	8001baa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ace:	e06c      	b.n	8001baa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	2202      	movs	r2, #2
 8001ada:	409a      	lsls	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d02e      	beq.n	8001b42 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d029      	beq.n	8001b42 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10b      	bne.n	8001b14 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 020a 	bic.w	r2, r2, #10
 8001b0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	f003 021f 	and.w	r2, r3, #31
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	2102      	movs	r1, #2
 8001b22:	fa01 f202 	lsl.w	r2, r1, r2
 8001b26:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d038      	beq.n	8001baa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b40:	e033      	b.n	8001baa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d02a      	beq.n	8001bac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d025      	beq.n	8001bac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 020e 	bic.w	r2, r2, #14
 8001b6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
}
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bc2:	b2db      	uxtb	r3, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d802      	bhi.n	8001bea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e001      	b.n	8001bee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001bec:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	3b08      	subs	r3, #8
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	009a      	lsls	r2, r3, #2
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4413      	add	r3, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	2201      	movs	r2, #1
 8001c24:	409a      	lsls	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c2a:	bf00      	nop
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40020407 	.word	0x40020407
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40020820 	.word	0x40020820
 8001c44:	cccccccd 	.word	0xcccccccd
 8001c48:	40020880 	.word	0x40020880

08001c4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	461a      	mov	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c6e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	2201      	movs	r2, #1
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	1000823f 	.word	0x1000823f
 8001c90:	40020940 	.word	0x40020940

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ca2:	e15a      	b.n	8001f5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 814c 	beq.w	8001f54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d005      	beq.n	8001cd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d130      	bne.n	8001d36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	f003 0201 	and.w	r2, r3, #1
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d017      	beq.n	8001d72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d123      	bne.n	8001dc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	08da      	lsrs	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3208      	adds	r2, #8
 8001d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	691a      	ldr	r2, [r3, #16]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	08da      	lsrs	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3208      	adds	r2, #8
 8001dc0:	6939      	ldr	r1, [r7, #16]
 8001dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0203 	and.w	r2, r3, #3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80a6 	beq.w	8001f54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e08:	4b5b      	ldr	r3, [pc, #364]	; (8001f78 <HAL_GPIO_Init+0x2e4>)
 8001e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0c:	4a5a      	ldr	r2, [pc, #360]	; (8001f78 <HAL_GPIO_Init+0x2e4>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6613      	str	r3, [r2, #96]	; 0x60
 8001e14:	4b58      	ldr	r3, [pc, #352]	; (8001f78 <HAL_GPIO_Init+0x2e4>)
 8001e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e20:	4a56      	ldr	r2, [pc, #344]	; (8001f7c <HAL_GPIO_Init+0x2e8>)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	220f      	movs	r2, #15
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e4a:	d01f      	beq.n	8001e8c <HAL_GPIO_Init+0x1f8>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a4c      	ldr	r2, [pc, #304]	; (8001f80 <HAL_GPIO_Init+0x2ec>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d019      	beq.n	8001e88 <HAL_GPIO_Init+0x1f4>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a4b      	ldr	r2, [pc, #300]	; (8001f84 <HAL_GPIO_Init+0x2f0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d013      	beq.n	8001e84 <HAL_GPIO_Init+0x1f0>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a4a      	ldr	r2, [pc, #296]	; (8001f88 <HAL_GPIO_Init+0x2f4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d00d      	beq.n	8001e80 <HAL_GPIO_Init+0x1ec>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a49      	ldr	r2, [pc, #292]	; (8001f8c <HAL_GPIO_Init+0x2f8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d007      	beq.n	8001e7c <HAL_GPIO_Init+0x1e8>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a48      	ldr	r2, [pc, #288]	; (8001f90 <HAL_GPIO_Init+0x2fc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d101      	bne.n	8001e78 <HAL_GPIO_Init+0x1e4>
 8001e74:	2305      	movs	r3, #5
 8001e76:	e00a      	b.n	8001e8e <HAL_GPIO_Init+0x1fa>
 8001e78:	2306      	movs	r3, #6
 8001e7a:	e008      	b.n	8001e8e <HAL_GPIO_Init+0x1fa>
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	e006      	b.n	8001e8e <HAL_GPIO_Init+0x1fa>
 8001e80:	2303      	movs	r3, #3
 8001e82:	e004      	b.n	8001e8e <HAL_GPIO_Init+0x1fa>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e002      	b.n	8001e8e <HAL_GPIO_Init+0x1fa>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <HAL_GPIO_Init+0x1fa>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	f002 0203 	and.w	r2, r2, #3
 8001e94:	0092      	lsls	r2, r2, #2
 8001e96:	4093      	lsls	r3, r2
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e9e:	4937      	ldr	r1, [pc, #220]	; (8001f7c <HAL_GPIO_Init+0x2e8>)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eac:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ed0:	4a30      	ldr	r2, [pc, #192]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ed6:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001efa:	4a26      	ldr	r2, [pc, #152]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f00:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f24:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f4e:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3301      	adds	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f47f ae9d 	bne.w	8001ca4 <HAL_GPIO_Init+0x10>
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	bf00      	nop
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	48000400 	.word	0x48000400
 8001f84:	48000800 	.word	0x48000800
 8001f88:	48000c00 	.word	0x48000c00
 8001f8c:	48001000 	.word	0x48001000
 8001f90:	48001400 	.word	0x48001400
 8001f94:	40010400 	.word	0x40010400

08001f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	887b      	ldrh	r3, [r7, #2]
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	e001      	b.n	8001fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fd8:	787b      	ldrb	r3, [r7, #1]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fe4:	e002      	b.n	8001fec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d006      	beq.n	800201c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f806 	bl	8002028 <HAL_GPIO_EXTI_Callback>
  }
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40010400 	.word	0x40010400

08002028 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e08d      	b.n	800216c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d106      	bne.n	800206a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7fe ffe7 	bl	8001038 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2224      	movs	r2, #36	; 0x24
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800208e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800209e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d107      	bne.n	80020b8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	e006      	b.n	80020c6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d108      	bne.n	80020e0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	e007      	b.n	80020f0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002102:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002112:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69d9      	ldr	r1, [r3, #28]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1a      	ldr	r2, [r3, #32]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0201 	orr.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af02      	add	r7, sp, #8
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	4608      	mov	r0, r1
 800217e:	4611      	mov	r1, r2
 8002180:	461a      	mov	r2, r3
 8002182:	4603      	mov	r3, r0
 8002184:	817b      	strh	r3, [r7, #10]
 8002186:	460b      	mov	r3, r1
 8002188:	813b      	strh	r3, [r7, #8]
 800218a:	4613      	mov	r3, r2
 800218c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b20      	cmp	r3, #32
 8002198:	d16a      	bne.n	8002270 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <HAL_I2C_Mem_Write_IT+0x32>
 80021a0:	8bbb      	ldrh	r3, [r7, #28]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d105      	bne.n	80021b2 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ac:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e05f      	b.n	8002272 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c0:	d101      	bne.n	80021c6 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
 80021c4:	e055      	b.n	8002272 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_I2C_Mem_Write_IT+0x60>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e04e      	b.n	8002272 <HAL_I2C_Mem_Write_IT+0xfe>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2221      	movs	r2, #33	; 0x21
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2240      	movs	r2, #64	; 0x40
 80021e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8bba      	ldrh	r2, [r7, #28]
 8002202:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a1d      	ldr	r2, [pc, #116]	; (800227c <HAL_I2C_Mem_Write_IT+0x108>)
 8002208:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4a1c      	ldr	r2, [pc, #112]	; (8002280 <HAL_I2C_Mem_Write_IT+0x10c>)
 800220e:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8002210:	897a      	ldrh	r2, [r7, #10]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d109      	bne.n	8002230 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800221c:	893b      	ldrh	r3, [r7, #8]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f04f 32ff 	mov.w	r2, #4294967295
 800222c:	651a      	str	r2, [r3, #80]	; 0x50
 800222e:	e00b      	b.n	8002248 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002230:	893b      	ldrh	r3, [r7, #8]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	b29b      	uxth	r3, r3
 8002236:	b2da      	uxtb	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800223e:	893b      	ldrh	r3, [r7, #8]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	8979      	ldrh	r1, [r7, #10]
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_I2C_Mem_Write_IT+0x110>)
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f001 fb78 	bl	800394c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002264:	2101      	movs	r1, #1
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f001 fba2 	bl	80039b0 <I2C_Enable_IRQ>

    return HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	e000      	b.n	8002272 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002270:	2302      	movs	r3, #2
  }
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	ffff0000 	.word	0xffff0000
 8002280:	08002551 	.word	0x08002551
 8002284:	80002000 	.word	0x80002000

08002288 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	4608      	mov	r0, r1
 8002292:	4611      	mov	r1, r2
 8002294:	461a      	mov	r2, r3
 8002296:	4603      	mov	r3, r0
 8002298:	817b      	strh	r3, [r7, #10]
 800229a:	460b      	mov	r3, r1
 800229c:	813b      	strh	r3, [r7, #8]
 800229e:	4613      	mov	r3, r2
 80022a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d166      	bne.n	800237c <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_I2C_Mem_Read_IT+0x32>
 80022b4:	8bbb      	ldrh	r3, [r7, #28]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d105      	bne.n	80022c6 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e05b      	b.n	800237e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d4:	d101      	bne.n	80022da <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 80022d6:	2302      	movs	r3, #2
 80022d8:	e051      	b.n	800237e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_I2C_Mem_Read_IT+0x60>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e04a      	b.n	800237e <HAL_I2C_Mem_Read_IT+0xf6>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2222      	movs	r2, #34	; 0x22
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2240      	movs	r2, #64	; 0x40
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8bba      	ldrh	r2, [r7, #28]
 8002310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a1c      	ldr	r2, [pc, #112]	; (8002388 <HAL_I2C_Mem_Read_IT+0x100>)
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4a1c      	ldr	r2, [pc, #112]	; (800238c <HAL_I2C_Mem_Read_IT+0x104>)
 800231c:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 800231e:	897a      	ldrh	r2, [r7, #10]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d109      	bne.n	800233e <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800232a:	893b      	ldrh	r3, [r7, #8]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f04f 32ff 	mov.w	r2, #4294967295
 800233a:	651a      	str	r2, [r3, #80]	; 0x50
 800233c:	e00b      	b.n	8002356 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800233e:	893b      	ldrh	r3, [r7, #8]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	b29b      	uxth	r3, r3
 8002344:	b2da      	uxtb	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800234c:	893b      	ldrh	r3, [r7, #8]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	8979      	ldrh	r1, [r7, #10]
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_I2C_Mem_Read_IT+0x108>)
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2300      	movs	r3, #0
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f001 faf2 	bl	800394c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002370:	2101      	movs	r1, #1
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f001 fb1c 	bl	80039b0 <I2C_Enable_IRQ>

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	ffff0000 	.word	0xffff0000
 800238c:	08002551 	.word	0x08002551
 8002390:	80002000 	.word	0x80002000

08002394 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	68f9      	ldr	r1, [r7, #12]
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	4798      	blx	r3
  }
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00f      	beq.n	800240a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	f043 0201 	orr.w	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002408:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00f      	beq.n	8002434 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f043 0208 	orr.w	r2, r3, #8
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002432:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00f      	beq.n	800245e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	f043 0202 	orr.w	r2, r3, #2
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800245c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 030b 	and.w	r3, r3, #11
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800246e:	68f9      	ldr	r1, [r7, #12]
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f001 f911 	bl	8003698 <I2C_ITError>
  }
}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	70fb      	strb	r3, [r7, #3]
 80024da:	4613      	mov	r3, r2
 80024dc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af02      	add	r7, sp, #8
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800255c:	4b8d      	ldr	r3, [pc, #564]	; (8002794 <I2C_Mem_ISR_IT+0x244>)
 800255e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <I2C_Mem_ISR_IT+0x22>
 800256e:	2302      	movs	r3, #2
 8002570:	e10c      	b.n	800278c <I2C_Mem_ISR_IT+0x23c>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	d012      	beq.n	80025aa <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00d      	beq.n	80025aa <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2210      	movs	r2, #16
 8002594:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	f043 0204 	orr.w	r2, r3, #4
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f001 f98f 	bl	80038c6 <I2C_Flush_TXDR>
 80025a8:	e0dd      	b.n	8002766 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d022      	beq.n	80025fa <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d01d      	beq.n	80025fa <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f023 0304 	bic.w	r3, r3, #4
 80025c4:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025f8:	e0b5      	b.n	8002766 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d02c      	beq.n	800265e <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800260a:	2b00      	cmp	r3, #0
 800260c:	d027      	beq.n	800265e <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002616:	d118      	bne.n	800264a <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002648:	e08d      	b.n	8002766 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002652:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f04f 32ff 	mov.w	r2, #4294967295
 800265a:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800265c:	e083      	b.n	8002766 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002664:	2b00      	cmp	r3, #0
 8002666:	d03c      	beq.n	80026e2 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800266e:	2b00      	cmp	r3, #0
 8002670:	d037      	beq.n	80026e2 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02c      	beq.n	80026d6 <I2C_Mem_ISR_IT+0x186>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002680:	2b00      	cmp	r3, #0
 8002682:	d128      	bne.n	80026d6 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	2bff      	cmp	r3, #255	; 0xff
 800268c:	d910      	bls.n	80026b0 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	22ff      	movs	r2, #255	; 0xff
 8002692:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	b299      	uxth	r1, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	2300      	movs	r3, #0
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f001 f94f 	bl	800394c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ae:	e017      	b.n	80026e0 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	b299      	uxth	r1, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	2300      	movs	r3, #0
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f001 f93c 	bl	800394c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026d4:	e004      	b.n	80026e0 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80026d6:	2140      	movs	r1, #64	; 0x40
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 ffdd 	bl	8003698 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026de:	e042      	b.n	8002766 <I2C_Mem_ISR_IT+0x216>
 80026e0:	e041      	b.n	8002766 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d03c      	beq.n	8002766 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d037      	beq.n	8002766 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80026f6:	2101      	movs	r1, #1
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f001 f9dd 	bl	8003ab8 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80026fe:	2102      	movs	r1, #2
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f001 f955 	bl	80039b0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b22      	cmp	r3, #34	; 0x22
 8002710:	d101      	bne.n	8002716 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <I2C_Mem_ISR_IT+0x248>)
 8002714:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271a:	b29b      	uxth	r3, r3
 800271c:	2bff      	cmp	r3, #255	; 0xff
 800271e:	d910      	bls.n	8002742 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	22ff      	movs	r2, #255	; 0xff
 8002724:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	b299      	uxth	r1, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	b2da      	uxtb	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f001 f906 	bl	800394c <I2C_TransferConfig>
 8002740:	e011      	b.n	8002766 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002750:	b299      	uxth	r1, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	b2da      	uxtb	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f001 f8f3 	bl	800394c <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800277a:	6939      	ldr	r1, [r7, #16]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fd0b 	bl	8003198 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	80002000 	.word	0x80002000
 8002798:	80002400 	.word	0x80002400

0800279c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <I2C_Slave_ISR_IT+0x24>
 80027bc:	2302      	movs	r3, #2
 80027be:	e0e2      	b.n	8002986 <I2C_Slave_ISR_IT+0x1ea>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80027dc:	6939      	ldr	r1, [r7, #16]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fda2 	bl	8003328 <I2C_ITSlaveCplt>
 80027e4:	e0ca      	b.n	800297c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d04b      	beq.n	8002888 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d046      	beq.n	8002888 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d128      	bne.n	8002856 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b28      	cmp	r3, #40	; 0x28
 800280e:	d108      	bne.n	8002822 <I2C_Slave_ISR_IT+0x86>
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002816:	d104      	bne.n	8002822 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002818:	6939      	ldr	r1, [r7, #16]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fee8 	bl	80035f0 <I2C_ITListenCplt>
 8002820:	e031      	b.n	8002886 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b29      	cmp	r3, #41	; 0x29
 800282c:	d10e      	bne.n	800284c <I2C_Slave_ISR_IT+0xb0>
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002834:	d00a      	beq.n	800284c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2210      	movs	r2, #16
 800283c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f001 f841 	bl	80038c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fc4b 	bl	80030e0 <I2C_ITSlaveSeqCplt>
 800284a:	e01c      	b.n	8002886 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2210      	movs	r2, #16
 8002852:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002854:	e08f      	b.n	8002976 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2210      	movs	r2, #16
 800285c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f043 0204 	orr.w	r2, r3, #4
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <I2C_Slave_ISR_IT+0xdc>
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002876:	d17e      	bne.n	8002976 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287c:	4619      	mov	r1, r3
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 ff0a 	bl	8003698 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002884:	e077      	b.n	8002976 <I2C_Slave_ISR_IT+0x1da>
 8002886:	e076      	b.n	8002976 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d02f      	beq.n	80028f2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002898:	2b00      	cmp	r3, #0
 800289a:	d02a      	beq.n	80028f2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d018      	beq.n	80028d8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d14b      	bne.n	800297a <I2C_Slave_ISR_IT+0x1de>
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028e8:	d047      	beq.n	800297a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fbf8 	bl	80030e0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80028f0:	e043      	b.n	800297a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002906:	6939      	ldr	r1, [r7, #16]
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 fb28 	bl	8002f5e <I2C_ITAddrCplt>
 800290e:	e035      	b.n	800297c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d030      	beq.n	800297c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002920:	2b00      	cmp	r3, #0
 8002922:	d02b      	beq.n	800297c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d018      	beq.n	8002960 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	781a      	ldrb	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	851a      	strh	r2, [r3, #40]	; 0x28
 800295e:	e00d      	b.n	800297c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002966:	d002      	beq.n	800296e <I2C_Slave_ISR_IT+0x1d2>
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fbb6 	bl	80030e0 <I2C_ITSlaveSeqCplt>
 8002974:	e002      	b.n	800297c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002976:	bf00      	nop
 8002978:	e000      	b.n	800297c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800297a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b088      	sub	sp, #32
 8002992:	af02      	add	r7, sp, #8
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <I2C_Master_ISR_DMA+0x1a>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e0d9      	b.n	8002b5c <I2C_Master_ISR_DMA+0x1ce>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d016      	beq.n	80029e8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d011      	beq.n	80029e8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2210      	movs	r2, #16
 80029ca:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d0:	f043 0204 	orr.w	r2, r3, #4
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80029d8:	2120      	movs	r1, #32
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 ffe8 	bl	80039b0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 ff70 	bl	80038c6 <I2C_Flush_TXDR>
 80029e6:	e0b4      	b.n	8002b52 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d071      	beq.n	8002ad6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d06c      	beq.n	8002ad6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a0a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d04e      	beq.n	8002ab4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a22:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2bff      	cmp	r3, #255	; 0xff
 8002a2c:	d906      	bls.n	8002a3c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	22ff      	movs	r2, #255	; 0xff
 8002a32:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e010      	b.n	8002a5e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a4e:	d003      	beq.n	8002a58 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	e002      	b.n	8002a5e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a5c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	8a79      	ldrh	r1, [r7, #18]
 8002a66:	2300      	movs	r3, #0
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 ff6d 	bl	800394c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b22      	cmp	r3, #34	; 0x22
 8002a8e:	d108      	bne.n	8002aa2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a9e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002aa0:	e057      	b.n	8002b52 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ab0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ab2:	e04e      	b.n	8002b52 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ac2:	d003      	beq.n	8002acc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 face 	bl	8003066 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002aca:	e042      	b.n	8002b52 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002acc:	2140      	movs	r1, #64	; 0x40
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fde2 	bl	8003698 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002ad4:	e03d      	b.n	8002b52 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d028      	beq.n	8002b32 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d023      	beq.n	8002b32 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d119      	bne.n	8002b28 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b02:	d025      	beq.n	8002b50 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b0c:	d108      	bne.n	8002b20 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b1c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002b1e:	e017      	b.n	8002b50 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 faa0 	bl	8003066 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002b26:	e013      	b.n	8002b50 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b28:	2140      	movs	r1, #64	; 0x40
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fdb4 	bl	8003698 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002b30:	e00e      	b.n	8002b50 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 fb25 	bl	8003198 <I2C_ITMasterCplt>
 8002b4e:	e000      	b.n	8002b52 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002b50:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002b70:	4b8d      	ldr	r3, [pc, #564]	; (8002da8 <I2C_Mem_ISR_DMA+0x244>)
 8002b72:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <I2C_Mem_ISR_DMA+0x1e>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e10e      	b.n	8002da0 <I2C_Mem_ISR_DMA+0x23c>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d016      	beq.n	8002bc2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d011      	beq.n	8002bc2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2210      	movs	r2, #16
 8002ba4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f043 0204 	orr.w	r2, r3, #4
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002bb2:	2120      	movs	r1, #32
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fefb 	bl	80039b0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fe83 	bl	80038c6 <I2C_Flush_TXDR>
 8002bc0:	e0e9      	b.n	8002d96 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00e      	beq.n	8002bea <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f04f 32ff 	mov.w	r2, #4294967295
 8002be6:	651a      	str	r2, [r3, #80]	; 0x50
 8002be8:	e0d5      	b.n	8002d96 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d05f      	beq.n	8002cb4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d05a      	beq.n	8002cb4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002bfe:	2101      	movs	r1, #1
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 ff59 	bl	8003ab8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002c06:	2110      	movs	r1, #16
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fed1 	bl	80039b0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d048      	beq.n	8002caa <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2bff      	cmp	r3, #255	; 0xff
 8002c20:	d910      	bls.n	8002c44 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	22ff      	movs	r2, #255	; 0xff
 8002c26:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2c:	b299      	uxth	r1, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	2300      	movs	r3, #0
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fe85 	bl	800394c <I2C_TransferConfig>
 8002c42:	e011      	b.n	8002c68 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c52:	b299      	uxth	r1, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fe72 	bl	800394c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b22      	cmp	r3, #34	; 0x22
 8002c84:	d108      	bne.n	8002c98 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c94:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c96:	e07e      	b.n	8002d96 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ca6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ca8:	e075      	b.n	8002d96 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002caa:	2140      	movs	r1, #64	; 0x40
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fcf3 	bl	8003698 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002cb2:	e070      	b.n	8002d96 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d05d      	beq.n	8002d7a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d058      	beq.n	8002d7a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002cc8:	2101      	movs	r1, #1
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fef4 	bl	8003ab8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002cd0:	2110      	movs	r1, #16
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 fe6c 	bl	80039b0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b22      	cmp	r3, #34	; 0x22
 8002ce2:	d101      	bne.n	8002ce8 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002ce4:	4b31      	ldr	r3, [pc, #196]	; (8002dac <I2C_Mem_ISR_DMA+0x248>)
 8002ce6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2bff      	cmp	r3, #255	; 0xff
 8002cf0:	d910      	bls.n	8002d14 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	22ff      	movs	r2, #255	; 0xff
 8002cf6:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfc:	b299      	uxth	r1, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fe1d 	bl	800394c <I2C_TransferConfig>
 8002d12:	e011      	b.n	8002d38 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d22:	b299      	uxth	r1, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fe0a 	bl	800394c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b22      	cmp	r3, #34	; 0x22
 8002d54:	d108      	bne.n	8002d68 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d64:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d66:	e016      	b.n	8002d96 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d76:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d78:	e00d      	b.n	8002d96 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 fa01 	bl	8003198 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	80002000 	.word	0x80002000
 8002dac:	80002400 	.word	0x80002400

08002db0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <I2C_Slave_ISR_DMA+0x24>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e0c0      	b.n	8002f56 <I2C_Slave_ISR_DMA+0x1a6>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d004      	beq.n	8002dfa <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fa98 	bl	8003328 <I2C_ITSlaveCplt>
 8002df8:	e0a8      	b.n	8002f4c <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8095 	beq.w	8002f30 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 808f 	beq.w	8002f30 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d104      	bne.n	8002e26 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d07d      	beq.n	8002f22 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00c      	beq.n	8002e48 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002e44:	2301      	movs	r3, #1
 8002e46:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00c      	beq.n	8002e6a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d007      	beq.n	8002e6a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d128      	bne.n	8002ec2 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b28      	cmp	r3, #40	; 0x28
 8002e7a:	d108      	bne.n	8002e8e <I2C_Slave_ISR_DMA+0xde>
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e82:	d104      	bne.n	8002e8e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fbb2 	bl	80035f0 <I2C_ITListenCplt>
 8002e8c:	e048      	b.n	8002f20 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b29      	cmp	r3, #41	; 0x29
 8002e98:	d10e      	bne.n	8002eb8 <I2C_Slave_ISR_DMA+0x108>
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ea0:	d00a      	beq.n	8002eb8 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fd0b 	bl	80038c6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f915 	bl	80030e0 <I2C_ITSlaveSeqCplt>
 8002eb6:	e033      	b.n	8002f20 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2210      	movs	r2, #16
 8002ebe:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002ec0:	e034      	b.n	8002f2c <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	f043 0204 	orr.w	r2, r3, #4
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002edc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <I2C_Slave_ISR_DMA+0x13c>
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eea:	d11f      	bne.n	8002f2c <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	2b21      	cmp	r3, #33	; 0x21
 8002ef0:	d002      	beq.n	8002ef8 <I2C_Slave_ISR_DMA+0x148>
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b29      	cmp	r3, #41	; 0x29
 8002ef6:	d103      	bne.n	8002f00 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2221      	movs	r2, #33	; 0x21
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
 8002efe:	e008      	b.n	8002f12 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	2b22      	cmp	r3, #34	; 0x22
 8002f04:	d002      	beq.n	8002f0c <I2C_Slave_ISR_DMA+0x15c>
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
 8002f08:	2b2a      	cmp	r3, #42	; 0x2a
 8002f0a:	d102      	bne.n	8002f12 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2222      	movs	r2, #34	; 0x22
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	4619      	mov	r1, r3
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fbbd 	bl	8003698 <I2C_ITError>
      if (treatdmanack == 1U)
 8002f1e:	e005      	b.n	8002f2c <I2C_Slave_ISR_DMA+0x17c>
 8002f20:	e004      	b.n	8002f2c <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2210      	movs	r2, #16
 8002f28:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f2a:	e00f      	b.n	8002f4c <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002f2c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f2e:	e00d      	b.n	8002f4c <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f809 	bl	8002f5e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f74:	2b28      	cmp	r3, #40	; 0x28
 8002f76:	d16a      	bne.n	800304e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	0c1b      	lsrs	r3, r3, #16
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002f96:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fa4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002fb2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d138      	bne.n	800302e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002fbc:	897b      	ldrh	r3, [r7, #10]
 8002fbe:	09db      	lsrs	r3, r3, #7
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	89bb      	ldrh	r3, [r7, #12]
 8002fc4:	4053      	eors	r3, r2
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f003 0306 	and.w	r3, r3, #6
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d11c      	bne.n	800300a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002fd0:	897b      	ldrh	r3, [r7, #10]
 8002fd2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d13b      	bne.n	800305e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ffc:	89ba      	ldrh	r2, [r7, #12]
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff fa63 	bl	80024ce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003008:	e029      	b.n	800305e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800300a:	893b      	ldrh	r3, [r7, #8]
 800300c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800300e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fd50 	bl	8003ab8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003020:	89ba      	ldrh	r2, [r7, #12]
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	4619      	mov	r1, r3
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fa51 	bl	80024ce <HAL_I2C_AddrCallback>
}
 800302c:	e017      	b.n	800305e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800302e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fd40 	bl	8003ab8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003040:	89ba      	ldrh	r2, [r7, #12]
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	4619      	mov	r1, r3
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff fa41 	bl	80024ce <HAL_I2C_AddrCallback>
}
 800304c:	e007      	b.n	800305e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2208      	movs	r2, #8
 8003054:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b21      	cmp	r3, #33	; 0x21
 8003080:	d115      	bne.n	80030ae <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2211      	movs	r2, #17
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003096:	2101      	movs	r1, #1
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fd0d 	bl	8003ab8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff f9e9 	bl	800247e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030ac:	e014      	b.n	80030d8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2212      	movs	r2, #18
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80030c2:	2102      	movs	r1, #2
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fcf7 	bl	8003ab8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff f9dd 	bl	8002492 <HAL_I2C_MasterRxCpltCallback>
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	e00c      	b.n	800312e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d007      	beq.n	800312e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800312c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b29      	cmp	r3, #41	; 0x29
 8003138:	d112      	bne.n	8003160 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2228      	movs	r2, #40	; 0x28
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2221      	movs	r2, #33	; 0x21
 8003146:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003148:	2101      	movs	r1, #1
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fcb4 	bl	8003ab8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff f9a4 	bl	80024a6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800315e:	e017      	b.n	8003190 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b2a      	cmp	r3, #42	; 0x2a
 800316a:	d111      	bne.n	8003190 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2228      	movs	r2, #40	; 0x28
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2222      	movs	r2, #34	; 0x22
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800317a:	2102      	movs	r1, #2
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fc9b 	bl	8003ab8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff f995 	bl	80024ba <HAL_I2C_SlaveRxCpltCallback>
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2220      	movs	r2, #32
 80031ac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b21      	cmp	r3, #33	; 0x21
 80031b8:	d107      	bne.n	80031ca <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80031ba:	2101      	movs	r1, #1
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fc7b 	bl	8003ab8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2211      	movs	r2, #17
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
 80031c8:	e00c      	b.n	80031e4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b22      	cmp	r3, #34	; 0x22
 80031d4:	d106      	bne.n	80031e4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80031d6:	2102      	movs	r1, #2
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fc6d 	bl	8003ab8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2212      	movs	r2, #18
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6859      	ldr	r1, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b4c      	ldr	r3, [pc, #304]	; (8003320 <I2C_ITMasterCplt+0x188>)
 80031f0:	400b      	ands	r3, r1
 80031f2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a49      	ldr	r2, [pc, #292]	; (8003324 <I2C_ITMasterCplt+0x18c>)
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2210      	movs	r2, #16
 8003210:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	f043 0204 	orr.w	r2, r3, #4
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b60      	cmp	r3, #96	; 0x60
 8003228:	d10a      	bne.n	8003240 <I2C_ITMasterCplt+0xa8>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	b2db      	uxtb	r3, r3
 800323c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800323e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fb40 	bl	80038c6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b60      	cmp	r3, #96	; 0x60
 8003256:	d002      	beq.n	800325e <I2C_ITMasterCplt+0xc6>
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d006      	beq.n	800326c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	4619      	mov	r1, r3
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 fa17 	bl	8003698 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800326a:	e054      	b.n	8003316 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b21      	cmp	r3, #33	; 0x21
 8003276:	d124      	bne.n	80032c2 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	d10b      	bne.n	80032aa <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff f92b 	bl	80024fe <HAL_I2C_MemTxCpltCallback>
}
 80032a8:	e035      	b.n	8003316 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff f8df 	bl	800247e <HAL_I2C_MasterTxCpltCallback>
}
 80032c0:	e029      	b.n	8003316 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b22      	cmp	r3, #34	; 0x22
 80032cc:	d123      	bne.n	8003316 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b40      	cmp	r3, #64	; 0x40
 80032e6:	d10b      	bne.n	8003300 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff f90a 	bl	8002512 <HAL_I2C_MemRxCpltCallback>
}
 80032fe:	e00a      	b.n	8003316 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff f8be 	bl	8002492 <HAL_I2C_MasterRxCpltCallback>
}
 8003316:	bf00      	nop
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	fe00e800 	.word	0xfe00e800
 8003324:	ffff0000 	.word	0xffff0000

08003328 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800334a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2220      	movs	r2, #32
 8003352:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003354:	7afb      	ldrb	r3, [r7, #11]
 8003356:	2b21      	cmp	r3, #33	; 0x21
 8003358:	d002      	beq.n	8003360 <I2C_ITSlaveCplt+0x38>
 800335a:	7afb      	ldrb	r3, [r7, #11]
 800335c:	2b29      	cmp	r3, #41	; 0x29
 800335e:	d108      	bne.n	8003372 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003360:	f248 0101 	movw	r1, #32769	; 0x8001
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fba7 	bl	8003ab8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2221      	movs	r2, #33	; 0x21
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
 8003370:	e019      	b.n	80033a6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003372:	7afb      	ldrb	r3, [r7, #11]
 8003374:	2b22      	cmp	r3, #34	; 0x22
 8003376:	d002      	beq.n	800337e <I2C_ITSlaveCplt+0x56>
 8003378:	7afb      	ldrb	r3, [r7, #11]
 800337a:	2b2a      	cmp	r3, #42	; 0x2a
 800337c:	d108      	bne.n	8003390 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800337e:	f248 0102 	movw	r1, #32770	; 0x8002
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fb98 	bl	8003ab8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2222      	movs	r2, #34	; 0x22
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
 800338e:	e00a      	b.n	80033a6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003390:	7afb      	ldrb	r3, [r7, #11]
 8003392:	2b28      	cmp	r3, #40	; 0x28
 8003394:	d107      	bne.n	80033a6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003396:	f248 0103 	movw	r1, #32771	; 0x8003
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fb8c 	bl	8003ab8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033b4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b89      	ldr	r3, [pc, #548]	; (80035e8 <I2C_ITSlaveCplt+0x2c0>)
 80033c2:	400b      	ands	r3, r1
 80033c4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fa7d 	bl	80038c6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d013      	beq.n	80033fe <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033e4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01f      	beq.n	800342e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033fc:	e017      	b.n	800342e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d012      	beq.n	800342e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003416:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d006      	beq.n	800342e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	b29a      	uxth	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d020      	beq.n	800347a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f023 0304 	bic.w	r3, r3, #4
 800343e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00c      	beq.n	800347a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	f043 0204 	orr.w	r2, r3, #4
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d049      	beq.n	800352e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d044      	beq.n	800352e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d128      	bne.n	8003500 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b28      	cmp	r3, #40	; 0x28
 80034b8:	d108      	bne.n	80034cc <I2C_ITSlaveCplt+0x1a4>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034c0:	d104      	bne.n	80034cc <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80034c2:	6979      	ldr	r1, [r7, #20]
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f893 	bl	80035f0 <I2C_ITListenCplt>
 80034ca:	e030      	b.n	800352e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b29      	cmp	r3, #41	; 0x29
 80034d6:	d10e      	bne.n	80034f6 <I2C_ITSlaveCplt+0x1ce>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034de:	d00a      	beq.n	80034f6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2210      	movs	r2, #16
 80034e6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f9ec 	bl	80038c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff fdf6 	bl	80030e0 <I2C_ITSlaveSeqCplt>
 80034f4:	e01b      	b.n	800352e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2210      	movs	r2, #16
 80034fc:	61da      	str	r2, [r3, #28]
 80034fe:	e016      	b.n	800352e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2210      	movs	r2, #16
 8003506:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	f043 0204 	orr.w	r2, r3, #4
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <I2C_ITSlaveCplt+0x1fa>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003520:	d105      	bne.n	800352e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	4619      	mov	r1, r3
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f8b5 	bl	8003698 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003540:	2b00      	cmp	r3, #0
 8003542:	d010      	beq.n	8003566 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003548:	4619      	mov	r1, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8a4 	bl	8003698 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b28      	cmp	r3, #40	; 0x28
 800355a:	d141      	bne.n	80035e0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800355c:	6979      	ldr	r1, [r7, #20]
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f846 	bl	80035f0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003564:	e03c      	b.n	80035e0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800356e:	d014      	beq.n	800359a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff fdb5 	bl	80030e0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <I2C_ITSlaveCplt+0x2c4>)
 800357a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fe ffa9 	bl	80024ea <HAL_I2C_ListenCpltCallback>
}
 8003598:	e022      	b.n	80035e0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b22      	cmp	r3, #34	; 0x22
 80035a4:	d10e      	bne.n	80035c4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7fe ff7c 	bl	80024ba <HAL_I2C_SlaveRxCpltCallback>
}
 80035c2:	e00d      	b.n	80035e0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe ff63 	bl	80024a6 <HAL_I2C_SlaveTxCpltCallback>
}
 80035e0:	bf00      	nop
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	fe00e800 	.word	0xfe00e800
 80035ec:	ffff0000 	.word	0xffff0000

080035f0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a25      	ldr	r2, [pc, #148]	; (8003694 <I2C_ITListenCplt+0xa4>)
 80035fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d022      	beq.n	800366c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003642:	2b00      	cmp	r3, #0
 8003644:	d012      	beq.n	800366c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003664:	f043 0204 	orr.w	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800366c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fa21 	bl	8003ab8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2210      	movs	r2, #16
 800367c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fe ff2f 	bl	80024ea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	ffff0000 	.word	0xffff0000

08003698 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a6d      	ldr	r2, [pc, #436]	; (800386c <I2C_ITError+0x1d4>)
 80036b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	2b28      	cmp	r3, #40	; 0x28
 80036ce:	d005      	beq.n	80036dc <I2C_ITError+0x44>
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	2b29      	cmp	r3, #41	; 0x29
 80036d4:	d002      	beq.n	80036dc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	2b2a      	cmp	r3, #42	; 0x2a
 80036da:	d10b      	bne.n	80036f4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036dc:	2103      	movs	r1, #3
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f9ea 	bl	8003ab8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2228      	movs	r2, #40	; 0x28
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a60      	ldr	r2, [pc, #384]	; (8003870 <I2C_ITError+0x1d8>)
 80036f0:	635a      	str	r2, [r3, #52]	; 0x34
 80036f2:	e030      	b.n	8003756 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036f4:	f248 0103 	movw	r1, #32771	; 0x8003
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f9dd 	bl	8003ab8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f8e1 	bl	80038c6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b60      	cmp	r3, #96	; 0x60
 800370e:	d01f      	beq.n	8003750 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b20      	cmp	r3, #32
 8003724:	d114      	bne.n	8003750 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b10      	cmp	r3, #16
 8003732:	d109      	bne.n	8003748 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2210      	movs	r2, #16
 800373a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003740:	f043 0204 	orr.w	r2, r3, #4
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2220      	movs	r2, #32
 800374e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	2b00      	cmp	r3, #0
 8003762:	d039      	beq.n	80037d8 <I2C_ITError+0x140>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b11      	cmp	r3, #17
 8003768:	d002      	beq.n	8003770 <I2C_ITError+0xd8>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b21      	cmp	r3, #33	; 0x21
 800376e:	d133      	bne.n	80037d8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800377e:	d107      	bne.n	8003790 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800378e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	4618      	mov	r0, r3
 8003796:	f7fe fa0d 	bl	8001bb4 <HAL_DMA_GetState>
 800379a:	4603      	mov	r3, r0
 800379c:	2b01      	cmp	r3, #1
 800379e:	d017      	beq.n	80037d0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	4a33      	ldr	r2, [pc, #204]	; (8003874 <I2C_ITError+0x1dc>)
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe f8e7 	bl	8001988 <HAL_DMA_Abort_IT>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d04d      	beq.n	800385c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037ca:	4610      	mov	r0, r2
 80037cc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037ce:	e045      	b.n	800385c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f851 	bl	8003878 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037d6:	e041      	b.n	800385c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d039      	beq.n	8003854 <I2C_ITError+0x1bc>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b12      	cmp	r3, #18
 80037e4:	d002      	beq.n	80037ec <I2C_ITError+0x154>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b22      	cmp	r3, #34	; 0x22
 80037ea:	d133      	bne.n	8003854 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037fa:	d107      	bne.n	800380c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800380a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe f9cf 	bl	8001bb4 <HAL_DMA_GetState>
 8003816:	4603      	mov	r3, r0
 8003818:	2b01      	cmp	r3, #1
 800381a:	d017      	beq.n	800384c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	4a14      	ldr	r2, [pc, #80]	; (8003874 <I2C_ITError+0x1dc>)
 8003822:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe f8a9 	bl	8001988 <HAL_DMA_Abort_IT>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d011      	beq.n	8003860 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003846:	4610      	mov	r0, r2
 8003848:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800384a:	e009      	b.n	8003860 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f813 	bl	8003878 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003852:	e005      	b.n	8003860 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f80f 	bl	8003878 <I2C_TreatErrorCallback>
  }
}
 800385a:	e002      	b.n	8003862 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800385c:	bf00      	nop
 800385e:	e000      	b.n	8003862 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003860:	bf00      	nop
}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	ffff0000 	.word	0xffff0000
 8003870:	0800279d 	.word	0x0800279d
 8003874:	0800390f 	.word	0x0800390f

08003878 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b60      	cmp	r3, #96	; 0x60
 800388a:	d10e      	bne.n	80038aa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fe fe49 	bl	800253a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038a8:	e009      	b.n	80038be <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7fe fe34 	bl	8002526 <HAL_I2C_ErrorCallback>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d103      	bne.n	80038e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2200      	movs	r2, #0
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d007      	beq.n	8003902 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0201 	orr.w	r2, r2, #1
 8003900:	619a      	str	r2, [r3, #24]
  }
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	2200      	movs	r2, #0
 800392a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003938:	2200      	movs	r2, #0
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f7ff ff9b 	bl	8003878 <I2C_TreatErrorCallback>
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	817b      	strh	r3, [r7, #10]
 800395a:	4613      	mov	r3, r2
 800395c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800395e:	897b      	ldrh	r3, [r7, #10]
 8003960:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003964:	7a7b      	ldrb	r3, [r7, #9]
 8003966:	041b      	lsls	r3, r3, #16
 8003968:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800396c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	4313      	orrs	r3, r2
 8003976:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800397a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	0d5b      	lsrs	r3, r3, #21
 8003986:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <I2C_TransferConfig+0x60>)
 800398c:	430b      	orrs	r3, r1
 800398e:	43db      	mvns	r3, r3
 8003990:	ea02 0103 	and.w	r1, r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	03ff63ff 	.word	0x03ff63ff

080039b0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	4a39      	ldr	r2, [pc, #228]	; (8003aac <I2C_Enable_IRQ+0xfc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d032      	beq.n	8003a30 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80039ce:	4a38      	ldr	r2, [pc, #224]	; (8003ab0 <I2C_Enable_IRQ+0x100>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d02d      	beq.n	8003a30 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80039d8:	4a36      	ldr	r2, [pc, #216]	; (8003ab4 <I2C_Enable_IRQ+0x104>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d028      	beq.n	8003a30 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80039de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	da03      	bge.n	80039ee <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80039ec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80039ee:	887b      	ldrh	r3, [r7, #2]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80039fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a00:	887b      	ldrh	r3, [r7, #2]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003a10:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a12:	887b      	ldrh	r3, [r7, #2]
 8003a14:	2b10      	cmp	r3, #16
 8003a16:	d103      	bne.n	8003a20 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a1e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a20:	887b      	ldrh	r3, [r7, #2]
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d133      	bne.n	8003a8e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f043 0320 	orr.w	r3, r3, #32
 8003a2c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a2e:	e02e      	b.n	8003a8e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	da03      	bge.n	8003a40 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003a3e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a40:	887b      	ldrh	r3, [r7, #2]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003a50:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a52:	887b      	ldrh	r3, [r7, #2]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003a62:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a64:	887b      	ldrh	r3, [r7, #2]
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d103      	bne.n	8003a72 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a70:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a72:	887b      	ldrh	r3, [r7, #2]
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d103      	bne.n	8003a80 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a7e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a80:	887b      	ldrh	r3, [r7, #2]
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d103      	bne.n	8003a8e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6819      	ldr	r1, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	0800298f 	.word	0x0800298f
 8003ab0:	08002db1 	.word	0x08002db1
 8003ab4:	08002b65 	.word	0x08002b65

08003ab8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ac8:	887b      	ldrh	r3, [r7, #2]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00f      	beq.n	8003af2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003ad8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ae6:	2b28      	cmp	r3, #40	; 0x28
 8003ae8:	d003      	beq.n	8003af2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003af0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003af2:	887b      	ldrh	r3, [r7, #2]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00f      	beq.n	8003b1c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003b02:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b10:	2b28      	cmp	r3, #40	; 0x28
 8003b12:	d003      	beq.n	8003b1c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b1a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	da03      	bge.n	8003b2c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003b2a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b2c:	887b      	ldrh	r3, [r7, #2]
 8003b2e:	2b10      	cmp	r3, #16
 8003b30:	d103      	bne.n	8003b3a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003b38:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b3a:	887b      	ldrh	r3, [r7, #2]
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d103      	bne.n	8003b48 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f043 0320 	orr.w	r3, r3, #32
 8003b46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b48:	887b      	ldrh	r3, [r7, #2]
 8003b4a:	2b40      	cmp	r3, #64	; 0x40
 8003b4c:	d103      	bne.n	8003b56 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b54:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6819      	ldr	r1, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	43da      	mvns	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	400a      	ands	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d138      	bne.n	8003bfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e032      	b.n	8003bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2224      	movs	r2, #36	; 0x24
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0201 	bic.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	e000      	b.n	8003bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
  }
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	d139      	bne.n	8003c94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e033      	b.n	8003c96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2224      	movs	r2, #36	; 0x24
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e000      	b.n	8003c96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c94:	2302      	movs	r3, #2
  }
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d141      	bne.n	8003d36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cb2:	4b4b      	ldr	r3, [pc, #300]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cbe:	d131      	bne.n	8003d24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc0:	4b47      	ldr	r3, [pc, #284]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc6:	4a46      	ldr	r2, [pc, #280]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ccc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd0:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cd8:	4a41      	ldr	r2, [pc, #260]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ce0:	4b40      	ldr	r3, [pc, #256]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2232      	movs	r2, #50	; 0x32
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	4a3f      	ldr	r2, [pc, #252]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	0c9b      	lsrs	r3, r3, #18
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf6:	e002      	b.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cfe:	4b38      	ldr	r3, [pc, #224]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0a:	d102      	bne.n	8003d12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f2      	bne.n	8003cf8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d12:	4b33      	ldr	r3, [pc, #204]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1e:	d158      	bne.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e057      	b.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d24:	4b2e      	ldr	r3, [pc, #184]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2a:	4a2d      	ldr	r2, [pc, #180]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d34:	e04d      	b.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3c:	d141      	bne.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d3e:	4b28      	ldr	r3, [pc, #160]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4a:	d131      	bne.n	8003db0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d4c:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d52:	4a23      	ldr	r2, [pc, #140]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d5c:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d64:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2232      	movs	r2, #50	; 0x32
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	0c9b      	lsrs	r3, r3, #18
 8003d7e:	3301      	adds	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d82:	e002      	b.n	8003d8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d8a:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d96:	d102      	bne.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f2      	bne.n	8003d84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d9e:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003daa:	d112      	bne.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e011      	b.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db6:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dc0:	e007      	b.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dca:	4a05      	ldr	r2, [pc, #20]	; (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40007000 	.word	0x40007000
 8003de4:	200000d0 	.word	0x200000d0
 8003de8:	431bde83 	.word	0x431bde83

08003dec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003df6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dfa:	6093      	str	r3, [r2, #8]
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40007000 	.word	0x40007000

08003e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e2fe      	b.n	800441c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d075      	beq.n	8003f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e2a:	4b97      	ldr	r3, [pc, #604]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e34:	4b94      	ldr	r3, [pc, #592]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b0c      	cmp	r3, #12
 8003e42:	d102      	bne.n	8003e4a <HAL_RCC_OscConfig+0x3e>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d002      	beq.n	8003e50 <HAL_RCC_OscConfig+0x44>
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d10b      	bne.n	8003e68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	4b8d      	ldr	r3, [pc, #564]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d05b      	beq.n	8003f14 <HAL_RCC_OscConfig+0x108>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d157      	bne.n	8003f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e2d9      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e70:	d106      	bne.n	8003e80 <HAL_RCC_OscConfig+0x74>
 8003e72:	4b85      	ldr	r3, [pc, #532]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a84      	ldr	r2, [pc, #528]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e01d      	b.n	8003ebc <HAL_RCC_OscConfig+0xb0>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x98>
 8003e8a:	4b7f      	ldr	r3, [pc, #508]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a7e      	ldr	r2, [pc, #504]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	4b7c      	ldr	r3, [pc, #496]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a7b      	ldr	r2, [pc, #492]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e00b      	b.n	8003ebc <HAL_RCC_OscConfig+0xb0>
 8003ea4:	4b78      	ldr	r3, [pc, #480]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a77      	ldr	r2, [pc, #476]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	4b75      	ldr	r3, [pc, #468]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a74      	ldr	r2, [pc, #464]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d013      	beq.n	8003eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fd fb7a 	bl	80015bc <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ecc:	f7fd fb76 	bl	80015bc <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	; 0x64
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e29e      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ede:	4b6a      	ldr	r3, [pc, #424]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0xc0>
 8003eea:	e014      	b.n	8003f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fd fb66 	bl	80015bc <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef4:	f7fd fb62 	bl	80015bc <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	; 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e28a      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f06:	4b60      	ldr	r3, [pc, #384]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xe8>
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d075      	beq.n	800400e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f22:	4b59      	ldr	r3, [pc, #356]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f2c:	4b56      	ldr	r3, [pc, #344]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b0c      	cmp	r3, #12
 8003f3a:	d102      	bne.n	8003f42 <HAL_RCC_OscConfig+0x136>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d002      	beq.n	8003f48 <HAL_RCC_OscConfig+0x13c>
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d11f      	bne.n	8003f88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f48:	4b4f      	ldr	r3, [pc, #316]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_OscConfig+0x154>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e25d      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f60:	4b49      	ldr	r3, [pc, #292]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	061b      	lsls	r3, r3, #24
 8003f6e:	4946      	ldr	r1, [pc, #280]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f74:	4b45      	ldr	r3, [pc, #276]	; (800408c <HAL_RCC_OscConfig+0x280>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fd fad3 	bl	8001524 <HAL_InitTick>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d043      	beq.n	800400c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e249      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d023      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f90:	4b3d      	ldr	r3, [pc, #244]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a3c      	ldr	r2, [pc, #240]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fd fb0e 	bl	80015bc <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fd fb0a 	bl	80015bc <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e232      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fb6:	4b34      	ldr	r3, [pc, #208]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc2:	4b31      	ldr	r3, [pc, #196]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	061b      	lsls	r3, r3, #24
 8003fd0:	492d      	ldr	r1, [pc, #180]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]
 8003fd6:	e01a      	b.n	800400e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd8:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a2a      	ldr	r2, [pc, #168]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003fde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fd faea 	bl	80015bc <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fec:	f7fd fae6 	bl	80015bc <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e20e      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ffe:	4b22      	ldr	r3, [pc, #136]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x1e0>
 800400a:	e000      	b.n	800400e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800400c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d041      	beq.n	800409e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01c      	beq.n	800405c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004022:	4b19      	ldr	r3, [pc, #100]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8004024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004028:	4a17      	ldr	r2, [pc, #92]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004032:	f7fd fac3 	bl	80015bc <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403a:	f7fd fabf 	bl	80015bc <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e1e7      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800404c:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 800404e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0ef      	beq.n	800403a <HAL_RCC_OscConfig+0x22e>
 800405a:	e020      	b.n	800409e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 800405e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <HAL_RCC_OscConfig+0x27c>)
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fd faa6 	bl	80015bc <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004072:	e00d      	b.n	8004090 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004074:	f7fd faa2 	bl	80015bc <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d906      	bls.n	8004090 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e1ca      	b.n	800441c <HAL_RCC_OscConfig+0x610>
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	200000d4 	.word	0x200000d4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004090:	4b8c      	ldr	r3, [pc, #560]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1ea      	bne.n	8004074 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80a6 	beq.w	80041f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ac:	2300      	movs	r3, #0
 80040ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040b0:	4b84      	ldr	r3, [pc, #528]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_OscConfig+0x2b4>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_RCC_OscConfig+0x2b6>
 80040c0:	2300      	movs	r3, #0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00d      	beq.n	80040e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	4b7f      	ldr	r3, [pc, #508]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	4a7e      	ldr	r2, [pc, #504]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6593      	str	r3, [r2, #88]	; 0x58
 80040d2:	4b7c      	ldr	r3, [pc, #496]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040de:	2301      	movs	r3, #1
 80040e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e2:	4b79      	ldr	r3, [pc, #484]	; (80042c8 <HAL_RCC_OscConfig+0x4bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d118      	bne.n	8004120 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ee:	4b76      	ldr	r3, [pc, #472]	; (80042c8 <HAL_RCC_OscConfig+0x4bc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a75      	ldr	r2, [pc, #468]	; (80042c8 <HAL_RCC_OscConfig+0x4bc>)
 80040f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fa:	f7fd fa5f 	bl	80015bc <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004102:	f7fd fa5b 	bl	80015bc <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e183      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004114:	4b6c      	ldr	r3, [pc, #432]	; (80042c8 <HAL_RCC_OscConfig+0x4bc>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d108      	bne.n	800413a <HAL_RCC_OscConfig+0x32e>
 8004128:	4b66      	ldr	r3, [pc, #408]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	4a65      	ldr	r2, [pc, #404]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004138:	e024      	b.n	8004184 <HAL_RCC_OscConfig+0x378>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b05      	cmp	r3, #5
 8004140:	d110      	bne.n	8004164 <HAL_RCC_OscConfig+0x358>
 8004142:	4b60      	ldr	r3, [pc, #384]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	4a5e      	ldr	r2, [pc, #376]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800414a:	f043 0304 	orr.w	r3, r3, #4
 800414e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004152:	4b5c      	ldr	r3, [pc, #368]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004158:	4a5a      	ldr	r2, [pc, #360]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004162:	e00f      	b.n	8004184 <HAL_RCC_OscConfig+0x378>
 8004164:	4b57      	ldr	r3, [pc, #348]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	4a56      	ldr	r2, [pc, #344]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800416c:	f023 0301 	bic.w	r3, r3, #1
 8004170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004174:	4b53      	ldr	r3, [pc, #332]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	4a52      	ldr	r2, [pc, #328]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800417c:	f023 0304 	bic.w	r3, r3, #4
 8004180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d016      	beq.n	80041ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418c:	f7fd fa16 	bl	80015bc <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004192:	e00a      	b.n	80041aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004194:	f7fd fa12 	bl	80015bc <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e138      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041aa:	4b46      	ldr	r3, [pc, #280]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0ed      	beq.n	8004194 <HAL_RCC_OscConfig+0x388>
 80041b8:	e015      	b.n	80041e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7fd f9ff 	bl	80015bc <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fd f9fb 	bl	80015bc <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e121      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041d8:	4b3a      	ldr	r3, [pc, #232]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1ed      	bne.n	80041c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041e6:	7ffb      	ldrb	r3, [r7, #31]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d105      	bne.n	80041f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ec:	4b35      	ldr	r3, [pc, #212]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	4a34      	ldr	r2, [pc, #208]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80041f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d03c      	beq.n	800427e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01c      	beq.n	8004246 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800420c:	4b2d      	ldr	r3, [pc, #180]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800420e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004212:	4a2c      	ldr	r2, [pc, #176]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421c:	f7fd f9ce 	bl	80015bc <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004224:	f7fd f9ca 	bl	80015bc <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e0f2      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004236:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004238:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ef      	beq.n	8004224 <HAL_RCC_OscConfig+0x418>
 8004244:	e01b      	b.n	800427e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004246:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004248:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800424c:	4a1d      	ldr	r2, [pc, #116]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004256:	f7fd f9b1 	bl	80015bc <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800425e:	f7fd f9ad 	bl	80015bc <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e0d5      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004270:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004272:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1ef      	bne.n	800425e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80c9 	beq.w	800441a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004288:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	2b0c      	cmp	r3, #12
 8004292:	f000 8083 	beq.w	800439c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d15e      	bne.n	800435c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80042a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fd f987 	bl	80015bc <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b0:	e00c      	b.n	80042cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b2:	f7fd f983 	bl	80015bc <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d905      	bls.n	80042cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e0ab      	b.n	800441c <HAL_RCC_OscConfig+0x610>
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042cc:	4b55      	ldr	r3, [pc, #340]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1ec      	bne.n	80042b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042d8:	4b52      	ldr	r3, [pc, #328]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	4b52      	ldr	r3, [pc, #328]	; (8004428 <HAL_RCC_OscConfig+0x61c>)
 80042de:	4013      	ands	r3, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6a11      	ldr	r1, [r2, #32]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042e8:	3a01      	subs	r2, #1
 80042ea:	0112      	lsls	r2, r2, #4
 80042ec:	4311      	orrs	r1, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80042f2:	0212      	lsls	r2, r2, #8
 80042f4:	4311      	orrs	r1, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042fa:	0852      	lsrs	r2, r2, #1
 80042fc:	3a01      	subs	r2, #1
 80042fe:	0552      	lsls	r2, r2, #21
 8004300:	4311      	orrs	r1, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004306:	0852      	lsrs	r2, r2, #1
 8004308:	3a01      	subs	r2, #1
 800430a:	0652      	lsls	r2, r2, #25
 800430c:	4311      	orrs	r1, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004312:	06d2      	lsls	r2, r2, #27
 8004314:	430a      	orrs	r2, r1
 8004316:	4943      	ldr	r1, [pc, #268]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 8004318:	4313      	orrs	r3, r2
 800431a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800431c:	4b41      	ldr	r3, [pc, #260]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a40      	ldr	r2, [pc, #256]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004326:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004328:	4b3e      	ldr	r3, [pc, #248]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a3d      	ldr	r2, [pc, #244]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 800432e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004332:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fd f942 	bl	80015bc <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433c:	f7fd f93e 	bl	80015bc <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e066      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434e:	4b35      	ldr	r3, [pc, #212]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x530>
 800435a:	e05e      	b.n	800441a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435c:	4b31      	ldr	r3, [pc, #196]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a30      	ldr	r2, [pc, #192]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 8004362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fd f928 	bl	80015bc <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fd f924 	bl	80015bc <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e04c      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004382:	4b28      	ldr	r3, [pc, #160]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800438e:	4b25      	ldr	r3, [pc, #148]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	4924      	ldr	r1, [pc, #144]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 8004394:	4b25      	ldr	r3, [pc, #148]	; (800442c <HAL_RCC_OscConfig+0x620>)
 8004396:	4013      	ands	r3, r2
 8004398:	60cb      	str	r3, [r1, #12]
 800439a:	e03e      	b.n	800441a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e039      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043a8:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <HAL_RCC_OscConfig+0x618>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f003 0203 	and.w	r2, r3, #3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d12c      	bne.n	8004416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	3b01      	subs	r3, #1
 80043c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d123      	bne.n	8004416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d11b      	bne.n	8004416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d113      	bne.n	8004416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	085b      	lsrs	r3, r3, #1
 80043fa:	3b01      	subs	r3, #1
 80043fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043fe:	429a      	cmp	r2, r3
 8004400:	d109      	bne.n	8004416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	3b01      	subs	r3, #1
 8004410:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d001      	beq.n	800441a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	019f800c 	.word	0x019f800c
 800442c:	feeefffc 	.word	0xfeeefffc

08004430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e11e      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004448:	4b91      	ldr	r3, [pc, #580]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d910      	bls.n	8004478 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b8e      	ldr	r3, [pc, #568]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 020f 	bic.w	r2, r3, #15
 800445e:	498c      	ldr	r1, [pc, #560]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b8a      	ldr	r3, [pc, #552]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e106      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d073      	beq.n	800456c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d129      	bne.n	80044e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800448c:	4b81      	ldr	r3, [pc, #516]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0f4      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800449c:	f000 f99e 	bl	80047dc <RCC_GetSysClockFreqFromPLLSource>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4a7c      	ldr	r2, [pc, #496]	; (8004698 <HAL_RCC_ClockConfig+0x268>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d93f      	bls.n	800452a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044aa:	4b7a      	ldr	r3, [pc, #488]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d033      	beq.n	800452a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d12f      	bne.n	800452a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044ca:	4b72      	ldr	r3, [pc, #456]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044d2:	4a70      	ldr	r2, [pc, #448]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e024      	b.n	800452a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d107      	bne.n	80044f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e8:	4b6a      	ldr	r3, [pc, #424]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0c6      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f8:	4b66      	ldr	r3, [pc, #408]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0be      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004508:	f000 f8ce 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 800450c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4a61      	ldr	r2, [pc, #388]	; (8004698 <HAL_RCC_ClockConfig+0x268>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d909      	bls.n	800452a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004516:	4b5f      	ldr	r3, [pc, #380]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800451e:	4a5d      	ldr	r2, [pc, #372]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004524:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800452a:	4b5a      	ldr	r3, [pc, #360]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f023 0203 	bic.w	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4957      	ldr	r1, [pc, #348]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004538:	4313      	orrs	r3, r2
 800453a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800453c:	f7fd f83e 	bl	80015bc <HAL_GetTick>
 8004540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004542:	e00a      	b.n	800455a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004544:	f7fd f83a 	bl	80015bc <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e095      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455a:	4b4e      	ldr	r3, [pc, #312]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 020c 	and.w	r2, r3, #12
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	429a      	cmp	r2, r3
 800456a:	d1eb      	bne.n	8004544 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d023      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004584:	4b43      	ldr	r3, [pc, #268]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4a42      	ldr	r2, [pc, #264]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 800458a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800458e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800459c:	4b3d      	ldr	r3, [pc, #244]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045a4:	4a3b      	ldr	r2, [pc, #236]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ac:	4b39      	ldr	r3, [pc, #228]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4936      	ldr	r1, [pc, #216]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
 80045be:	e008      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d105      	bne.n	80045d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045c6:	4b33      	ldr	r3, [pc, #204]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	4a32      	ldr	r2, [pc, #200]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045d2:	4b2f      	ldr	r3, [pc, #188]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d21d      	bcs.n	800461c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e0:	4b2b      	ldr	r3, [pc, #172]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f023 020f 	bic.w	r2, r3, #15
 80045e8:	4929      	ldr	r1, [pc, #164]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045f0:	f7fc ffe4 	bl	80015bc <HAL_GetTick>
 80045f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f6:	e00a      	b.n	800460e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f8:	f7fc ffe0 	bl	80015bc <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e03b      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	4b20      	ldr	r3, [pc, #128]	; (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d1ed      	bne.n	80045f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004628:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4917      	ldr	r1, [pc, #92]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004646:	4b13      	ldr	r3, [pc, #76]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	490f      	ldr	r1, [pc, #60]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800465a:	f000 f825 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 800465e:	4602      	mov	r2, r0
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	490c      	ldr	r1, [pc, #48]	; (800469c <HAL_RCC_ClockConfig+0x26c>)
 800466c:	5ccb      	ldrb	r3, [r1, r3]
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	fa22 f303 	lsr.w	r3, r2, r3
 8004676:	4a0a      	ldr	r2, [pc, #40]	; (80046a0 <HAL_RCC_ClockConfig+0x270>)
 8004678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800467a:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <HAL_RCC_ClockConfig+0x274>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7fc ff50 	bl	8001524 <HAL_InitTick>
 8004684:	4603      	mov	r3, r0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40022000 	.word	0x40022000
 8004694:	40021000 	.word	0x40021000
 8004698:	04c4b400 	.word	0x04c4b400
 800469c:	08006fb4 	.word	0x08006fb4
 80046a0:	200000d0 	.word	0x200000d0
 80046a4:	200000d4 	.word	0x200000d4

080046a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046ae:	4b2c      	ldr	r3, [pc, #176]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d102      	bne.n	80046c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046ba:	4b2a      	ldr	r3, [pc, #168]	; (8004764 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	e047      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046c0:	4b27      	ldr	r3, [pc, #156]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d102      	bne.n	80046d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046cc:	4b26      	ldr	r3, [pc, #152]	; (8004768 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	e03e      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80046d2:	4b23      	ldr	r3, [pc, #140]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b0c      	cmp	r3, #12
 80046dc:	d136      	bne.n	800474c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046de:	4b20      	ldr	r3, [pc, #128]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046e8:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	3301      	adds	r3, #1
 80046f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d10c      	bne.n	8004716 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046fc:	4a1a      	ldr	r2, [pc, #104]	; (8004768 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	4a16      	ldr	r2, [pc, #88]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004706:	68d2      	ldr	r2, [r2, #12]
 8004708:	0a12      	lsrs	r2, r2, #8
 800470a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	617b      	str	r3, [r7, #20]
      break;
 8004714:	e00c      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004716:	4a13      	ldr	r2, [pc, #76]	; (8004764 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	4a10      	ldr	r2, [pc, #64]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004720:	68d2      	ldr	r2, [r2, #12]
 8004722:	0a12      	lsrs	r2, r2, #8
 8004724:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004728:	fb02 f303 	mul.w	r3, r2, r3
 800472c:	617b      	str	r3, [r7, #20]
      break;
 800472e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	0e5b      	lsrs	r3, r3, #25
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	3301      	adds	r3, #1
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	e001      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004750:	693b      	ldr	r3, [r7, #16]
}
 8004752:	4618      	mov	r0, r3
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000
 8004764:	00f42400 	.word	0x00f42400
 8004768:	016e3600 	.word	0x016e3600

0800476c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004770:	4b03      	ldr	r3, [pc, #12]	; (8004780 <HAL_RCC_GetHCLKFreq+0x14>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	200000d0 	.word	0x200000d0

08004784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004788:	f7ff fff0 	bl	800476c <HAL_RCC_GetHCLKFreq>
 800478c:	4602      	mov	r2, r0
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4904      	ldr	r1, [pc, #16]	; (80047ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800479a:	5ccb      	ldrb	r3, [r1, r3]
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40021000 	.word	0x40021000
 80047ac:	08006fc4 	.word	0x08006fc4

080047b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047b4:	f7ff ffda 	bl	800476c <HAL_RCC_GetHCLKFreq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	0adb      	lsrs	r3, r3, #11
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	4904      	ldr	r1, [pc, #16]	; (80047d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047c6:	5ccb      	ldrb	r3, [r1, r3]
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40021000 	.word	0x40021000
 80047d8:	08006fc4 	.word	0x08006fc4

080047dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047e2:	4b1e      	ldr	r3, [pc, #120]	; (800485c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	091b      	lsrs	r3, r3, #4
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	3301      	adds	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d10c      	bne.n	800481a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004800:	4a17      	ldr	r2, [pc, #92]	; (8004860 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	4a14      	ldr	r2, [pc, #80]	; (800485c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800480a:	68d2      	ldr	r2, [r2, #12]
 800480c:	0a12      	lsrs	r2, r2, #8
 800480e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	617b      	str	r3, [r7, #20]
    break;
 8004818:	e00c      	b.n	8004834 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800481a:	4a12      	ldr	r2, [pc, #72]	; (8004864 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004822:	4a0e      	ldr	r2, [pc, #56]	; (800485c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004824:	68d2      	ldr	r2, [r2, #12]
 8004826:	0a12      	lsrs	r2, r2, #8
 8004828:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800482c:	fb02 f303 	mul.w	r3, r2, r3
 8004830:	617b      	str	r3, [r7, #20]
    break;
 8004832:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	0e5b      	lsrs	r3, r3, #25
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	3301      	adds	r3, #1
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	fbb2 f3f3 	udiv	r3, r2, r3
 800484c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800484e:	687b      	ldr	r3, [r7, #4]
}
 8004850:	4618      	mov	r0, r3
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	40021000 	.word	0x40021000
 8004860:	016e3600 	.word	0x016e3600
 8004864:	00f42400 	.word	0x00f42400

08004868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004870:	2300      	movs	r3, #0
 8004872:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004874:	2300      	movs	r3, #0
 8004876:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8098 	beq.w	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004886:	2300      	movs	r3, #0
 8004888:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488a:	4b43      	ldr	r3, [pc, #268]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10d      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004896:	4b40      	ldr	r3, [pc, #256]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489a:	4a3f      	ldr	r2, [pc, #252]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800489c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a0:	6593      	str	r3, [r2, #88]	; 0x58
 80048a2:	4b3d      	ldr	r3, [pc, #244]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ae:	2301      	movs	r3, #1
 80048b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048b2:	4b3a      	ldr	r3, [pc, #232]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a39      	ldr	r2, [pc, #228]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048be:	f7fc fe7d 	bl	80015bc <HAL_GetTick>
 80048c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048c4:	e009      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c6:	f7fc fe79 	bl	80015bc <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d902      	bls.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	74fb      	strb	r3, [r7, #19]
        break;
 80048d8:	e005      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048da:	4b30      	ldr	r3, [pc, #192]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0ef      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d159      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d01e      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	429a      	cmp	r2, r3
 8004906:	d019      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004908:	4b23      	ldr	r3, [pc, #140]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004912:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004914:	4b20      	ldr	r3, [pc, #128]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491a:	4a1f      	ldr	r2, [pc, #124]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004924:	4b1c      	ldr	r3, [pc, #112]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	4a1b      	ldr	r2, [pc, #108]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800492c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004934:	4a18      	ldr	r2, [pc, #96]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d016      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fc fe39 	bl	80015bc <HAL_GetTick>
 800494a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800494c:	e00b      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494e:	f7fc fe35 	bl	80015bc <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	f241 3288 	movw	r2, #5000	; 0x1388
 800495c:	4293      	cmp	r3, r2
 800495e:	d902      	bls.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	74fb      	strb	r3, [r7, #19]
            break;
 8004964:	e006      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004966:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0ec      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004974:	7cfb      	ldrb	r3, [r7, #19]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800497a:	4b07      	ldr	r3, [pc, #28]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004988:	4903      	ldr	r1, [pc, #12]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004990:	e008      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004992:	7cfb      	ldrb	r3, [r7, #19]
 8004994:	74bb      	strb	r3, [r7, #18]
 8004996:	e005      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004998:	40021000 	.word	0x40021000
 800499c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049a4:	7c7b      	ldrb	r3, [r7, #17]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d105      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049aa:	4ba7      	ldr	r3, [pc, #668]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ae:	4aa6      	ldr	r2, [pc, #664]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049c2:	4ba1      	ldr	r3, [pc, #644]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	f023 0203 	bic.w	r2, r3, #3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	499d      	ldr	r1, [pc, #628]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049e4:	4b98      	ldr	r3, [pc, #608]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ea:	f023 020c 	bic.w	r2, r3, #12
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4995      	ldr	r1, [pc, #596]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a06:	4b90      	ldr	r3, [pc, #576]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	498c      	ldr	r1, [pc, #560]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a28:	4b87      	ldr	r3, [pc, #540]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	4984      	ldr	r1, [pc, #528]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a4a:	4b7f      	ldr	r3, [pc, #508]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	497b      	ldr	r1, [pc, #492]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a6c:	4b76      	ldr	r3, [pc, #472]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	4973      	ldr	r1, [pc, #460]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a8e:	4b6e      	ldr	r3, [pc, #440]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	496a      	ldr	r1, [pc, #424]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ab0:	4b65      	ldr	r3, [pc, #404]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	4962      	ldr	r1, [pc, #392]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ad2:	4b5d      	ldr	r3, [pc, #372]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	4959      	ldr	r1, [pc, #356]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004af4:	4b54      	ldr	r3, [pc, #336]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	4951      	ldr	r1, [pc, #324]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b16:	4b4c      	ldr	r3, [pc, #304]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	4948      	ldr	r1, [pc, #288]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d015      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b38:	4b43      	ldr	r3, [pc, #268]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	4940      	ldr	r1, [pc, #256]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b56:	d105      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b58:	4b3b      	ldr	r3, [pc, #236]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4a3a      	ldr	r2, [pc, #232]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b70:	4b35      	ldr	r3, [pc, #212]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7e:	4932      	ldr	r1, [pc, #200]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b8e:	d105      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b90:	4b2d      	ldr	r3, [pc, #180]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4a2c      	ldr	r2, [pc, #176]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b9a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ba8:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	4924      	ldr	r1, [pc, #144]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bc6:	d105      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc8:	4b1f      	ldr	r3, [pc, #124]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4a1e      	ldr	r2, [pc, #120]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bd2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d015      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004be0:	4b19      	ldr	r3, [pc, #100]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	4916      	ldr	r1, [pc, #88]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfe:	d105      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c00:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a10      	ldr	r2, [pc, #64]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c0a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d019      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	4908      	ldr	r1, [pc, #32]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c36:	d109      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c38:	4b03      	ldr	r3, [pc, #12]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4a02      	ldr	r2, [pc, #8]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c42:	60d3      	str	r3, [r2, #12]
 8004c44:	e002      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c46:	bf00      	nop
 8004c48:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d015      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c58:	4b29      	ldr	r3, [pc, #164]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	4926      	ldr	r1, [pc, #152]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c76:	d105      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c78:	4b21      	ldr	r3, [pc, #132]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4a20      	ldr	r2, [pc, #128]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c82:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d015      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004c90:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c96:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9e:	4918      	ldr	r1, [pc, #96]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cae:	d105      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cb0:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d015      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd6:	490a      	ldr	r1, [pc, #40]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce6:	d105      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4a04      	ldr	r2, [pc, #16]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cf2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cf4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40021000 	.word	0x40021000

08004d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e09d      	b.n	8004e52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d108      	bne.n	8004d30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d26:	d009      	beq.n	8004d3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	61da      	str	r2, [r3, #28]
 8004d2e:	e005      	b.n	8004d3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d106      	bne.n	8004d5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fc fa8a 	bl	8001270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d7c:	d902      	bls.n	8004d84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	e002      	b.n	8004d8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d92:	d007      	beq.n	8004da4 <HAL_SPI_Init+0xa0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d9c:	d002      	beq.n	8004da4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de6:	ea42 0103 	orr.w	r1, r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	0c1b      	lsrs	r3, r3, #16
 8004e00:	f003 0204 	and.w	r2, r3, #4
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e20:	ea42 0103 	orr.w	r1, r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e74:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e7c:	7dbb      	ldrb	r3, [r7, #22]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d00d      	beq.n	8004e9e <HAL_SPI_TransmitReceive_IT+0x42>
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e88:	d106      	bne.n	8004e98 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d102      	bne.n	8004e98 <HAL_SPI_TransmitReceive_IT+0x3c>
 8004e92:	7dbb      	ldrb	r3, [r7, #22]
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d002      	beq.n	8004e9e <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e9c:	e07d      	b.n	8004f9a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <HAL_SPI_TransmitReceive_IT+0x54>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_SPI_TransmitReceive_IT+0x54>
 8004eaa:	887b      	ldrh	r3, [r7, #2]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d102      	bne.n	8004eb6 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004eb4:	e071      	b.n	8004f9a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_SPI_TransmitReceive_IT+0x68>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e06b      	b.n	8004f9c <HAL_SPI_TransmitReceive_IT+0x140>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d003      	beq.n	8004ee0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2205      	movs	r2, #5
 8004edc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	887a      	ldrh	r2, [r7, #2]
 8004ef0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	887a      	ldrh	r2, [r7, #2]
 8004ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	887a      	ldrh	r2, [r7, #2]
 8004f02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	887a      	ldrh	r2, [r7, #2]
 8004f0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f16:	d906      	bls.n	8004f26 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4a23      	ldr	r2, [pc, #140]	; (8004fa8 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8004f1c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4a22      	ldr	r2, [pc, #136]	; (8004fac <HAL_SPI_TransmitReceive_IT+0x150>)
 8004f22:	651a      	str	r2, [r3, #80]	; 0x50
 8004f24:	e005      	b.n	8004f32 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4a21      	ldr	r2, [pc, #132]	; (8004fb0 <HAL_SPI_TransmitReceive_IT+0x154>)
 8004f2a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a21      	ldr	r2, [pc, #132]	; (8004fb4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8004f30:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f3a:	d802      	bhi.n	8004f42 <HAL_SPI_TransmitReceive_IT+0xe6>
 8004f3c:	887b      	ldrh	r3, [r7, #2]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d908      	bls.n	8004f54 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f50:	605a      	str	r2, [r3, #4]
 8004f52:	e007      	b.n	8004f64 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f62:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6e:	2b40      	cmp	r3, #64	; 0x40
 8004f70:	d007      	beq.n	8004f82 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f80:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004f98:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	08005343 	.word	0x08005343
 8004fac:	080053a9 	.word	0x080053a9
 8004fb0:	080051f3 	.word	0x080051f3
 8004fb4:	080052b1 	.word	0x080052b1

08004fb8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10e      	bne.n	8004ff8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d009      	beq.n	8004ff8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d004      	beq.n	8004ff8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	4798      	blx	r3
    return;
 8004ff6:	e0ce      	b.n	8005196 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <HAL_SPI_IRQHandler+0x5e>
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	4798      	blx	r3
    return;
 8005014:	e0bf      	b.n	8005196 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <HAL_SPI_IRQHandler+0x7e>
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d105      	bne.n	8005036 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 80b0 	beq.w	8005196 <HAL_SPI_IRQHandler+0x1de>
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 80aa 	beq.w	8005196 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d023      	beq.n	8005094 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b03      	cmp	r3, #3
 8005056:	d011      	beq.n	800507c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505c:	f043 0204 	orr.w	r2, r3, #4
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	e00b      	b.n	8005094 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800507c:	2300      	movs	r3, #0
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	693b      	ldr	r3, [r7, #16]
        return;
 8005092:	e080      	b.n	8005196 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d014      	beq.n	80050c8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a2:	f043 0201 	orr.w	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00c      	beq.n	80050ec <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d6:	f043 0208 	orr.w	r2, r3, #8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80050de:	2300      	movs	r3, #0
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d04f      	beq.n	8005194 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005102:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d104      	bne.n	8005120 <HAL_SPI_IRQHandler+0x168>
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d034      	beq.n	800518a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0203 	bic.w	r2, r2, #3
 800512e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	2b00      	cmp	r3, #0
 8005136:	d011      	beq.n	800515c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513c:	4a17      	ldr	r2, [pc, #92]	; (800519c <HAL_SPI_IRQHandler+0x1e4>)
 800513e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005144:	4618      	mov	r0, r3
 8005146:	f7fc fc1f 	bl	8001988 <HAL_DMA_Abort_IT>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005154:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	2b00      	cmp	r3, #0
 8005162:	d016      	beq.n	8005192 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005168:	4a0c      	ldr	r2, [pc, #48]	; (800519c <HAL_SPI_IRQHandler+0x1e4>)
 800516a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005170:	4618      	mov	r0, r3
 8005172:	f7fc fc09 	bl	8001988 <HAL_DMA_Abort_IT>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005180:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005188:	e003      	b.n	8005192 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f812 	bl	80051b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005190:	e000      	b.n	8005194 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005192:	bf00      	nop
    return;
 8005194:	bf00      	nop
  }
}
 8005196:	3720      	adds	r7, #32
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	080051c9 	.word	0x080051c9

080051a0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff ffe5 	bl	80051b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051ea:	bf00      	nop
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b01      	cmp	r3, #1
 8005204:	d923      	bls.n	800524e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	b292      	uxth	r2, r2
 8005212:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	1c9a      	adds	r2, r3, #2
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b02      	subs	r3, #2
 8005228:	b29a      	uxth	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b01      	cmp	r3, #1
 800523a:	d11f      	bne.n	800527c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800524a:	605a      	str	r2, [r3, #4]
 800524c:	e016      	b.n	800527c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f103 020c 	add.w	r2, r3, #12
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	7812      	ldrb	r2, [r2, #0]
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10f      	bne.n	80052a8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005296:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d102      	bne.n	80052a8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fa14 	bl	80056d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80052a8:	bf00      	nop
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d912      	bls.n	80052e8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	881a      	ldrh	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	1c9a      	adds	r2, r3, #2
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b02      	subs	r3, #2
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052e6:	e012      	b.n	800530e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	7812      	ldrb	r2, [r2, #0]
 80052f4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005304:	b29b      	uxth	r3, r3
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d110      	bne.n	800533a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005326:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f9cb 	bl	80056d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	b292      	uxth	r2, r2
 8005356:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	1c9a      	adds	r2, r3, #2
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10f      	bne.n	80053a0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800538e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d102      	bne.n	80053a0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f998 	bl	80056d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80053a0:	bf00      	nop
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	881a      	ldrh	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	1c9a      	adds	r2, r3, #2
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d110      	bne.n	8005400 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053ec:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d102      	bne.n	8005400 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f968 	bl	80056d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005418:	f7fc f8d0 	bl	80015bc <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	4413      	add	r3, r2
 8005426:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005428:	f7fc f8c8 	bl	80015bc <HAL_GetTick>
 800542c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800542e:	4b39      	ldr	r3, [pc, #228]	; (8005514 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	015b      	lsls	r3, r3, #5
 8005434:	0d1b      	lsrs	r3, r3, #20
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	fb02 f303 	mul.w	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800543e:	e054      	b.n	80054ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	d050      	beq.n	80054ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005448:	f7fc f8b8 	bl	80015bc <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	429a      	cmp	r2, r3
 8005456:	d902      	bls.n	800545e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d13d      	bne.n	80054da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800546c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005476:	d111      	bne.n	800549c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005480:	d004      	beq.n	800548c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d107      	bne.n	800549c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054a4:	d10f      	bne.n	80054c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e017      	b.n	800550a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4013      	ands	r3, r2
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	bf0c      	ite	eq
 80054fa:	2301      	moveq	r3, #1
 80054fc:	2300      	movne	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	429a      	cmp	r2, r3
 8005506:	d19b      	bne.n	8005440 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3720      	adds	r7, #32
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	200000d0 	.word	0x200000d0

08005518 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08a      	sub	sp, #40	; 0x28
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800552a:	f7fc f847 	bl	80015bc <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	1a9b      	subs	r3, r3, r2
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	4413      	add	r3, r2
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800553a:	f7fc f83f 	bl	80015bc <HAL_GetTick>
 800553e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005548:	4b3d      	ldr	r3, [pc, #244]	; (8005640 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	00da      	lsls	r2, r3, #3
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	0d1b      	lsrs	r3, r3, #20
 8005558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555a:	fb02 f303 	mul.w	r3, r2, r3
 800555e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005560:	e060      	b.n	8005624 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005568:	d107      	bne.n	800557a <SPI_WaitFifoStateUntilTimeout+0x62>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	b2db      	uxtb	r3, r3
 8005576:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005578:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005580:	d050      	beq.n	8005624 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005582:	f7fc f81b 	bl	80015bc <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558e:	429a      	cmp	r2, r3
 8005590:	d902      	bls.n	8005598 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	2b00      	cmp	r3, #0
 8005596:	d13d      	bne.n	8005614 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055b0:	d111      	bne.n	80055d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ba:	d004      	beq.n	80055c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c4:	d107      	bne.n	80055d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055de:	d10f      	bne.n	8005600 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e010      	b.n	8005636 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	3b01      	subs	r3, #1
 8005622:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	4013      	ands	r3, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	429a      	cmp	r2, r3
 8005632:	d196      	bne.n	8005562 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3728      	adds	r7, #40	; 0x28
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	200000d0 	.word	0x200000d0

08005644 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af02      	add	r7, sp, #8
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2200      	movs	r2, #0
 8005658:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f7ff ff5b 	bl	8005518 <SPI_WaitFifoStateUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d007      	beq.n	8005678 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566c:	f043 0220 	orr.w	r2, r3, #32
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e027      	b.n	80056c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2200      	movs	r2, #0
 8005680:	2180      	movs	r1, #128	; 0x80
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f7ff fec0 	bl	8005408 <SPI_WaitFlagStateUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005692:	f043 0220 	orr.w	r2, r3, #32
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e014      	b.n	80056c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f7ff ff34 	bl	8005518 <SPI_WaitFifoStateUntilTimeout>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ba:	f043 0220 	orr.w	r2, r3, #32
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e000      	b.n	80056c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056d8:	f7fb ff70 	bl	80015bc <HAL_GetTick>
 80056dc:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0220 	bic.w	r2, r2, #32
 80056ec:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	2164      	movs	r1, #100	; 0x64
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff ffa6 	bl	8005644 <SPI_EndRxTxTransaction>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d005      	beq.n	800570a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005702:	f043 0220 	orr.w	r2, r3, #32
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570e:	2b00      	cmp	r3, #0
 8005710:	d115      	bne.n	800573e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b04      	cmp	r3, #4
 800571c:	d107      	bne.n	800572e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7ff fd3a 	bl	80051a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800572c:	e00e      	b.n	800574c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fb fc36 	bl	8000fa8 <HAL_SPI_TxRxCpltCallback>
}
 800573c:	e006      	b.n	800574c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff fd34 	bl	80051b4 <HAL_SPI_ErrorCallback>
}
 800574c:	bf00      	nop
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e049      	b.n	80057fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fb fdc4 	bl	8001308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3304      	adds	r3, #4
 8005790:	4619      	mov	r1, r3
 8005792:	4610      	mov	r0, r2
 8005794:	f000 fb3c 	bl	8005e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	d001      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e054      	b.n	80058c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a26      	ldr	r2, [pc, #152]	; (80058d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d022      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x80>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005846:	d01d      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x80>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a22      	ldr	r2, [pc, #136]	; (80058d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d018      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x80>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a21      	ldr	r2, [pc, #132]	; (80058dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d013      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x80>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1f      	ldr	r2, [pc, #124]	; (80058e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00e      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x80>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1e      	ldr	r2, [pc, #120]	; (80058e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d009      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x80>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1c      	ldr	r2, [pc, #112]	; (80058e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x80>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1b      	ldr	r2, [pc, #108]	; (80058ec <HAL_TIM_Base_Start_IT+0xe8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d115      	bne.n	80058b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	4b19      	ldr	r3, [pc, #100]	; (80058f0 <HAL_TIM_Base_Start_IT+0xec>)
 800588c:	4013      	ands	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b06      	cmp	r3, #6
 8005894:	d015      	beq.n	80058c2 <HAL_TIM_Base_Start_IT+0xbe>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589c:	d011      	beq.n	80058c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0201 	orr.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ae:	e008      	b.n	80058c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	e000      	b.n	80058c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40000c00 	.word	0x40000c00
 80058e4:	40013400 	.word	0x40013400
 80058e8:	40014000 	.word	0x40014000
 80058ec:	40015000 	.word	0x40015000
 80058f0:	00010007 	.word	0x00010007

080058f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d020      	beq.n	8005958 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01b      	beq.n	8005958 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0202 	mvn.w	r2, #2
 8005928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fa48 	bl	8005dd4 <HAL_TIM_IC_CaptureCallback>
 8005944:	e005      	b.n	8005952 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fa3a 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fa4b 	bl	8005de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d020      	beq.n	80059a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01b      	beq.n	80059a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0204 	mvn.w	r2, #4
 8005974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fa22 	bl	8005dd4 <HAL_TIM_IC_CaptureCallback>
 8005990:	e005      	b.n	800599e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fa14 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fa25 	bl	8005de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d020      	beq.n	80059f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01b      	beq.n	80059f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0208 	mvn.w	r2, #8
 80059c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2204      	movs	r2, #4
 80059c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f9fc 	bl	8005dd4 <HAL_TIM_IC_CaptureCallback>
 80059dc:	e005      	b.n	80059ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f9ee 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f9ff 	bl	8005de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d020      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01b      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0210 	mvn.w	r2, #16
 8005a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2208      	movs	r2, #8
 8005a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f9d6 	bl	8005dd4 <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f9c8 	bl	8005dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f9d9 	bl	8005de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00c      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0201 	mvn.w	r2, #1
 8005a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fb fa80 	bl	8000f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d104      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00c      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d007      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fbb1 	bl	80061f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00c      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fba9 	bl	8006204 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00c      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d007      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f993 	bl	8005dfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f003 0320 	and.w	r3, r3, #32
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00c      	beq.n	8005afa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f06f 0220 	mvn.w	r2, #32
 8005af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fb71 	bl	80061dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00c      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d007      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fb7d 	bl	8006218 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00c      	beq.n	8005b42 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d007      	beq.n	8005b42 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fb75 	bl	800622c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00c      	beq.n	8005b66 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d007      	beq.n	8005b66 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fb6d 	bl	8006240 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00c      	beq.n	8005b8a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d007      	beq.n	8005b8a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fb65 	bl	8006254 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1c>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e0f6      	b.n	8005d9e <HAL_TIM_ConfigClockSource+0x20a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005bce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a6f      	ldr	r2, [pc, #444]	; (8005da8 <HAL_TIM_ConfigClockSource+0x214>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	f000 80c1 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005bf0:	4a6d      	ldr	r2, [pc, #436]	; (8005da8 <HAL_TIM_ConfigClockSource+0x214>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	f200 80c6 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bf8:	4a6c      	ldr	r2, [pc, #432]	; (8005dac <HAL_TIM_ConfigClockSource+0x218>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	f000 80b9 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005c00:	4a6a      	ldr	r2, [pc, #424]	; (8005dac <HAL_TIM_ConfigClockSource+0x218>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	f200 80be 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c08:	4a69      	ldr	r2, [pc, #420]	; (8005db0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	f000 80b1 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005c10:	4a67      	ldr	r2, [pc, #412]	; (8005db0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	f200 80b6 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c18:	4a66      	ldr	r2, [pc, #408]	; (8005db4 <HAL_TIM_ConfigClockSource+0x220>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	f000 80a9 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005c20:	4a64      	ldr	r2, [pc, #400]	; (8005db4 <HAL_TIM_ConfigClockSource+0x220>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	f200 80ae 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c28:	4a63      	ldr	r2, [pc, #396]	; (8005db8 <HAL_TIM_ConfigClockSource+0x224>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	f000 80a1 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005c30:	4a61      	ldr	r2, [pc, #388]	; (8005db8 <HAL_TIM_ConfigClockSource+0x224>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	f200 80a6 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c38:	4a60      	ldr	r2, [pc, #384]	; (8005dbc <HAL_TIM_ConfigClockSource+0x228>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	f000 8099 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005c40:	4a5e      	ldr	r2, [pc, #376]	; (8005dbc <HAL_TIM_ConfigClockSource+0x228>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	f200 809e 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c4c:	f000 8091 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005c50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c54:	f200 8096 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c5c:	f000 8089 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c64:	f200 808e 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c6c:	d03e      	beq.n	8005cec <HAL_TIM_ConfigClockSource+0x158>
 8005c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c72:	f200 8087 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7a:	f000 8086 	beq.w	8005d8a <HAL_TIM_ConfigClockSource+0x1f6>
 8005c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c82:	d87f      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c84:	2b70      	cmp	r3, #112	; 0x70
 8005c86:	d01a      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0x12a>
 8005c88:	2b70      	cmp	r3, #112	; 0x70
 8005c8a:	d87b      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c8c:	2b60      	cmp	r3, #96	; 0x60
 8005c8e:	d050      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x19e>
 8005c90:	2b60      	cmp	r3, #96	; 0x60
 8005c92:	d877      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c94:	2b50      	cmp	r3, #80	; 0x50
 8005c96:	d03c      	beq.n	8005d12 <HAL_TIM_ConfigClockSource+0x17e>
 8005c98:	2b50      	cmp	r3, #80	; 0x50
 8005c9a:	d873      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	d058      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x1be>
 8005ca0:	2b40      	cmp	r3, #64	; 0x40
 8005ca2:	d86f      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ca4:	2b30      	cmp	r3, #48	; 0x30
 8005ca6:	d064      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005ca8:	2b30      	cmp	r3, #48	; 0x30
 8005caa:	d86b      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d060      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	d867      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d05c      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005cb8:	2b10      	cmp	r3, #16
 8005cba:	d05a      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005cbc:	e062      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cce:	f000 f9cf 	bl	8006070 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	609a      	str	r2, [r3, #8]
      break;
 8005cea:	e04f      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cfc:	f000 f9b8 	bl	8006070 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d0e:	609a      	str	r2, [r3, #8]
      break;
 8005d10:	e03c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f000 f92a 	bl	8005f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2150      	movs	r1, #80	; 0x50
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 f983 	bl	8006036 <TIM_ITRx_SetConfig>
      break;
 8005d30:	e02c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f000 f949 	bl	8005fd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2160      	movs	r1, #96	; 0x60
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 f973 	bl	8006036 <TIM_ITRx_SetConfig>
      break;
 8005d50:	e01c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f000 f90a 	bl	8005f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2140      	movs	r1, #64	; 0x40
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f963 	bl	8006036 <TIM_ITRx_SetConfig>
      break;
 8005d70:	e00c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f000 f95a 	bl	8006036 <TIM_ITRx_SetConfig>
      break;
 8005d82:	e003      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
      break;
 8005d88:	e000      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005d8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	00100070 	.word	0x00100070
 8005dac:	00100060 	.word	0x00100060
 8005db0:	00100050 	.word	0x00100050
 8005db4:	00100040 	.word	0x00100040
 8005db8:	00100030 	.word	0x00100030
 8005dbc:	00100020 	.word	0x00100020

08005dc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a4c      	ldr	r2, [pc, #304]	; (8005f54 <TIM_Base_SetConfig+0x144>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d017      	beq.n	8005e58 <TIM_Base_SetConfig+0x48>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2e:	d013      	beq.n	8005e58 <TIM_Base_SetConfig+0x48>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a49      	ldr	r2, [pc, #292]	; (8005f58 <TIM_Base_SetConfig+0x148>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00f      	beq.n	8005e58 <TIM_Base_SetConfig+0x48>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a48      	ldr	r2, [pc, #288]	; (8005f5c <TIM_Base_SetConfig+0x14c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00b      	beq.n	8005e58 <TIM_Base_SetConfig+0x48>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a47      	ldr	r2, [pc, #284]	; (8005f60 <TIM_Base_SetConfig+0x150>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d007      	beq.n	8005e58 <TIM_Base_SetConfig+0x48>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a46      	ldr	r2, [pc, #280]	; (8005f64 <TIM_Base_SetConfig+0x154>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_Base_SetConfig+0x48>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a45      	ldr	r2, [pc, #276]	; (8005f68 <TIM_Base_SetConfig+0x158>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d108      	bne.n	8005e6a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a39      	ldr	r2, [pc, #228]	; (8005f54 <TIM_Base_SetConfig+0x144>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d023      	beq.n	8005eba <TIM_Base_SetConfig+0xaa>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e78:	d01f      	beq.n	8005eba <TIM_Base_SetConfig+0xaa>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a36      	ldr	r2, [pc, #216]	; (8005f58 <TIM_Base_SetConfig+0x148>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d01b      	beq.n	8005eba <TIM_Base_SetConfig+0xaa>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a35      	ldr	r2, [pc, #212]	; (8005f5c <TIM_Base_SetConfig+0x14c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d017      	beq.n	8005eba <TIM_Base_SetConfig+0xaa>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a34      	ldr	r2, [pc, #208]	; (8005f60 <TIM_Base_SetConfig+0x150>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <TIM_Base_SetConfig+0xaa>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a33      	ldr	r2, [pc, #204]	; (8005f64 <TIM_Base_SetConfig+0x154>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00f      	beq.n	8005eba <TIM_Base_SetConfig+0xaa>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a33      	ldr	r2, [pc, #204]	; (8005f6c <TIM_Base_SetConfig+0x15c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00b      	beq.n	8005eba <TIM_Base_SetConfig+0xaa>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a32      	ldr	r2, [pc, #200]	; (8005f70 <TIM_Base_SetConfig+0x160>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d007      	beq.n	8005eba <TIM_Base_SetConfig+0xaa>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a31      	ldr	r2, [pc, #196]	; (8005f74 <TIM_Base_SetConfig+0x164>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d003      	beq.n	8005eba <TIM_Base_SetConfig+0xaa>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a2c      	ldr	r2, [pc, #176]	; (8005f68 <TIM_Base_SetConfig+0x158>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d108      	bne.n	8005ecc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a18      	ldr	r2, [pc, #96]	; (8005f54 <TIM_Base_SetConfig+0x144>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d013      	beq.n	8005f20 <TIM_Base_SetConfig+0x110>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a1a      	ldr	r2, [pc, #104]	; (8005f64 <TIM_Base_SetConfig+0x154>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00f      	beq.n	8005f20 <TIM_Base_SetConfig+0x110>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a1a      	ldr	r2, [pc, #104]	; (8005f6c <TIM_Base_SetConfig+0x15c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00b      	beq.n	8005f20 <TIM_Base_SetConfig+0x110>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a19      	ldr	r2, [pc, #100]	; (8005f70 <TIM_Base_SetConfig+0x160>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d007      	beq.n	8005f20 <TIM_Base_SetConfig+0x110>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a18      	ldr	r2, [pc, #96]	; (8005f74 <TIM_Base_SetConfig+0x164>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d003      	beq.n	8005f20 <TIM_Base_SetConfig+0x110>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a13      	ldr	r2, [pc, #76]	; (8005f68 <TIM_Base_SetConfig+0x158>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d103      	bne.n	8005f28 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d105      	bne.n	8005f46 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f023 0201 	bic.w	r2, r3, #1
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	611a      	str	r2, [r3, #16]
  }
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40012c00 	.word	0x40012c00
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	40000800 	.word	0x40000800
 8005f60:	40000c00 	.word	0x40000c00
 8005f64:	40013400 	.word	0x40013400
 8005f68:	40015000 	.word	0x40015000
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40014400 	.word	0x40014400
 8005f74:	40014800 	.word	0x40014800

08005f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f023 0201 	bic.w	r2, r3, #1
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f023 030a 	bic.w	r3, r3, #10
 8005fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	621a      	str	r2, [r3, #32]
}
 8005fca:	bf00      	nop
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b087      	sub	sp, #28
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f023 0210 	bic.w	r2, r3, #16
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006000:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	031b      	lsls	r3, r3, #12
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006012:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	621a      	str	r2, [r3, #32]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800604c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	f043 0307 	orr.w	r3, r3, #7
 800605c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	609a      	str	r2, [r3, #8]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800608a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	021a      	lsls	r2, r3, #8
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	431a      	orrs	r2, r3
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4313      	orrs	r3, r2
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	bf00      	nop
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e074      	b.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a34      	ldr	r2, [pc, #208]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d009      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a33      	ldr	r2, [pc, #204]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d004      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a31      	ldr	r2, [pc, #196]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d108      	bne.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800610c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4313      	orrs	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800611e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a21      	ldr	r2, [pc, #132]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d022      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006148:	d01d      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1f      	ldr	r2, [pc, #124]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d018      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1d      	ldr	r2, [pc, #116]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d013      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a1c      	ldr	r2, [pc, #112]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00e      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a15      	ldr	r2, [pc, #84]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d009      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a18      	ldr	r2, [pc, #96]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d004      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a11      	ldr	r2, [pc, #68]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d10c      	bne.n	80061a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800618c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	4313      	orrs	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40012c00 	.word	0x40012c00
 80061c4:	40013400 	.word	0x40013400
 80061c8:	40015000 	.word	0x40015000
 80061cc:	40000400 	.word	0x40000400
 80061d0:	40000800 	.word	0x40000800
 80061d4:	40000c00 	.word	0x40000c00
 80061d8:	40014000 	.word	0x40014000

080061dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e042      	b.n	8006300 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7fa ff97 	bl	80011c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2224      	movs	r2, #36	; 0x24
 8006296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0201 	bic.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fb24 	bl	8006900 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f825 	bl	8006308 <UART_SetConfig>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e01b      	b.n	8006300 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0201 	orr.w	r2, r2, #1
 80062f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fba3 	bl	8006a44 <UART_CheckIdleState>
 80062fe:	4603      	mov	r3, r0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800630c:	b08c      	sub	sp, #48	; 0x30
 800630e:	af00      	add	r7, sp, #0
 8006310:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	431a      	orrs	r2, r3
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	431a      	orrs	r2, r3
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	4313      	orrs	r3, r2
 800632e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	4baa      	ldr	r3, [pc, #680]	; (80065e0 <UART_SetConfig+0x2d8>)
 8006338:	4013      	ands	r3, r2
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	6812      	ldr	r2, [r2, #0]
 800633e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006340:	430b      	orrs	r3, r1
 8006342:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a9f      	ldr	r2, [pc, #636]	; (80065e4 <UART_SetConfig+0x2dc>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d004      	beq.n	8006374 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006370:	4313      	orrs	r3, r2
 8006372:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800637e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	6812      	ldr	r2, [r2, #0]
 8006386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006388:	430b      	orrs	r3, r1
 800638a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	f023 010f 	bic.w	r1, r3, #15
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a90      	ldr	r2, [pc, #576]	; (80065e8 <UART_SetConfig+0x2e0>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d125      	bne.n	80063f8 <UART_SetConfig+0xf0>
 80063ac:	4b8f      	ldr	r3, [pc, #572]	; (80065ec <UART_SetConfig+0x2e4>)
 80063ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d81a      	bhi.n	80063f0 <UART_SetConfig+0xe8>
 80063ba:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <UART_SetConfig+0xb8>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063d1 	.word	0x080063d1
 80063c4:	080063e1 	.word	0x080063e1
 80063c8:	080063d9 	.word	0x080063d9
 80063cc:	080063e9 	.word	0x080063e9
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063d6:	e116      	b.n	8006606 <UART_SetConfig+0x2fe>
 80063d8:	2302      	movs	r3, #2
 80063da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063de:	e112      	b.n	8006606 <UART_SetConfig+0x2fe>
 80063e0:	2304      	movs	r3, #4
 80063e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e6:	e10e      	b.n	8006606 <UART_SetConfig+0x2fe>
 80063e8:	2308      	movs	r3, #8
 80063ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ee:	e10a      	b.n	8006606 <UART_SetConfig+0x2fe>
 80063f0:	2310      	movs	r3, #16
 80063f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063f6:	e106      	b.n	8006606 <UART_SetConfig+0x2fe>
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a7c      	ldr	r2, [pc, #496]	; (80065f0 <UART_SetConfig+0x2e8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d138      	bne.n	8006474 <UART_SetConfig+0x16c>
 8006402:	4b7a      	ldr	r3, [pc, #488]	; (80065ec <UART_SetConfig+0x2e4>)
 8006404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006408:	f003 030c 	and.w	r3, r3, #12
 800640c:	2b0c      	cmp	r3, #12
 800640e:	d82d      	bhi.n	800646c <UART_SetConfig+0x164>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <UART_SetConfig+0x110>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	0800644d 	.word	0x0800644d
 800641c:	0800646d 	.word	0x0800646d
 8006420:	0800646d 	.word	0x0800646d
 8006424:	0800646d 	.word	0x0800646d
 8006428:	0800645d 	.word	0x0800645d
 800642c:	0800646d 	.word	0x0800646d
 8006430:	0800646d 	.word	0x0800646d
 8006434:	0800646d 	.word	0x0800646d
 8006438:	08006455 	.word	0x08006455
 800643c:	0800646d 	.word	0x0800646d
 8006440:	0800646d 	.word	0x0800646d
 8006444:	0800646d 	.word	0x0800646d
 8006448:	08006465 	.word	0x08006465
 800644c:	2300      	movs	r3, #0
 800644e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006452:	e0d8      	b.n	8006606 <UART_SetConfig+0x2fe>
 8006454:	2302      	movs	r3, #2
 8006456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800645a:	e0d4      	b.n	8006606 <UART_SetConfig+0x2fe>
 800645c:	2304      	movs	r3, #4
 800645e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006462:	e0d0      	b.n	8006606 <UART_SetConfig+0x2fe>
 8006464:	2308      	movs	r3, #8
 8006466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800646a:	e0cc      	b.n	8006606 <UART_SetConfig+0x2fe>
 800646c:	2310      	movs	r3, #16
 800646e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006472:	e0c8      	b.n	8006606 <UART_SetConfig+0x2fe>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a5e      	ldr	r2, [pc, #376]	; (80065f4 <UART_SetConfig+0x2ec>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d125      	bne.n	80064ca <UART_SetConfig+0x1c2>
 800647e:	4b5b      	ldr	r3, [pc, #364]	; (80065ec <UART_SetConfig+0x2e4>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006484:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006488:	2b30      	cmp	r3, #48	; 0x30
 800648a:	d016      	beq.n	80064ba <UART_SetConfig+0x1b2>
 800648c:	2b30      	cmp	r3, #48	; 0x30
 800648e:	d818      	bhi.n	80064c2 <UART_SetConfig+0x1ba>
 8006490:	2b20      	cmp	r3, #32
 8006492:	d00a      	beq.n	80064aa <UART_SetConfig+0x1a2>
 8006494:	2b20      	cmp	r3, #32
 8006496:	d814      	bhi.n	80064c2 <UART_SetConfig+0x1ba>
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <UART_SetConfig+0x19a>
 800649c:	2b10      	cmp	r3, #16
 800649e:	d008      	beq.n	80064b2 <UART_SetConfig+0x1aa>
 80064a0:	e00f      	b.n	80064c2 <UART_SetConfig+0x1ba>
 80064a2:	2300      	movs	r3, #0
 80064a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064a8:	e0ad      	b.n	8006606 <UART_SetConfig+0x2fe>
 80064aa:	2302      	movs	r3, #2
 80064ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064b0:	e0a9      	b.n	8006606 <UART_SetConfig+0x2fe>
 80064b2:	2304      	movs	r3, #4
 80064b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064b8:	e0a5      	b.n	8006606 <UART_SetConfig+0x2fe>
 80064ba:	2308      	movs	r3, #8
 80064bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064c0:	e0a1      	b.n	8006606 <UART_SetConfig+0x2fe>
 80064c2:	2310      	movs	r3, #16
 80064c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064c8:	e09d      	b.n	8006606 <UART_SetConfig+0x2fe>
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a4a      	ldr	r2, [pc, #296]	; (80065f8 <UART_SetConfig+0x2f0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d125      	bne.n	8006520 <UART_SetConfig+0x218>
 80064d4:	4b45      	ldr	r3, [pc, #276]	; (80065ec <UART_SetConfig+0x2e4>)
 80064d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064de:	2bc0      	cmp	r3, #192	; 0xc0
 80064e0:	d016      	beq.n	8006510 <UART_SetConfig+0x208>
 80064e2:	2bc0      	cmp	r3, #192	; 0xc0
 80064e4:	d818      	bhi.n	8006518 <UART_SetConfig+0x210>
 80064e6:	2b80      	cmp	r3, #128	; 0x80
 80064e8:	d00a      	beq.n	8006500 <UART_SetConfig+0x1f8>
 80064ea:	2b80      	cmp	r3, #128	; 0x80
 80064ec:	d814      	bhi.n	8006518 <UART_SetConfig+0x210>
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <UART_SetConfig+0x1f0>
 80064f2:	2b40      	cmp	r3, #64	; 0x40
 80064f4:	d008      	beq.n	8006508 <UART_SetConfig+0x200>
 80064f6:	e00f      	b.n	8006518 <UART_SetConfig+0x210>
 80064f8:	2300      	movs	r3, #0
 80064fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064fe:	e082      	b.n	8006606 <UART_SetConfig+0x2fe>
 8006500:	2302      	movs	r3, #2
 8006502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006506:	e07e      	b.n	8006606 <UART_SetConfig+0x2fe>
 8006508:	2304      	movs	r3, #4
 800650a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800650e:	e07a      	b.n	8006606 <UART_SetConfig+0x2fe>
 8006510:	2308      	movs	r3, #8
 8006512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006516:	e076      	b.n	8006606 <UART_SetConfig+0x2fe>
 8006518:	2310      	movs	r3, #16
 800651a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800651e:	e072      	b.n	8006606 <UART_SetConfig+0x2fe>
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a35      	ldr	r2, [pc, #212]	; (80065fc <UART_SetConfig+0x2f4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d12a      	bne.n	8006580 <UART_SetConfig+0x278>
 800652a:	4b30      	ldr	r3, [pc, #192]	; (80065ec <UART_SetConfig+0x2e4>)
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006534:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006538:	d01a      	beq.n	8006570 <UART_SetConfig+0x268>
 800653a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800653e:	d81b      	bhi.n	8006578 <UART_SetConfig+0x270>
 8006540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006544:	d00c      	beq.n	8006560 <UART_SetConfig+0x258>
 8006546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800654a:	d815      	bhi.n	8006578 <UART_SetConfig+0x270>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <UART_SetConfig+0x250>
 8006550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006554:	d008      	beq.n	8006568 <UART_SetConfig+0x260>
 8006556:	e00f      	b.n	8006578 <UART_SetConfig+0x270>
 8006558:	2300      	movs	r3, #0
 800655a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800655e:	e052      	b.n	8006606 <UART_SetConfig+0x2fe>
 8006560:	2302      	movs	r3, #2
 8006562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006566:	e04e      	b.n	8006606 <UART_SetConfig+0x2fe>
 8006568:	2304      	movs	r3, #4
 800656a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800656e:	e04a      	b.n	8006606 <UART_SetConfig+0x2fe>
 8006570:	2308      	movs	r3, #8
 8006572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006576:	e046      	b.n	8006606 <UART_SetConfig+0x2fe>
 8006578:	2310      	movs	r3, #16
 800657a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800657e:	e042      	b.n	8006606 <UART_SetConfig+0x2fe>
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a17      	ldr	r2, [pc, #92]	; (80065e4 <UART_SetConfig+0x2dc>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d13a      	bne.n	8006600 <UART_SetConfig+0x2f8>
 800658a:	4b18      	ldr	r3, [pc, #96]	; (80065ec <UART_SetConfig+0x2e4>)
 800658c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006590:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006594:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006598:	d01a      	beq.n	80065d0 <UART_SetConfig+0x2c8>
 800659a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800659e:	d81b      	bhi.n	80065d8 <UART_SetConfig+0x2d0>
 80065a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065a4:	d00c      	beq.n	80065c0 <UART_SetConfig+0x2b8>
 80065a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065aa:	d815      	bhi.n	80065d8 <UART_SetConfig+0x2d0>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <UART_SetConfig+0x2b0>
 80065b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b4:	d008      	beq.n	80065c8 <UART_SetConfig+0x2c0>
 80065b6:	e00f      	b.n	80065d8 <UART_SetConfig+0x2d0>
 80065b8:	2300      	movs	r3, #0
 80065ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065be:	e022      	b.n	8006606 <UART_SetConfig+0x2fe>
 80065c0:	2302      	movs	r3, #2
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c6:	e01e      	b.n	8006606 <UART_SetConfig+0x2fe>
 80065c8:	2304      	movs	r3, #4
 80065ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ce:	e01a      	b.n	8006606 <UART_SetConfig+0x2fe>
 80065d0:	2308      	movs	r3, #8
 80065d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065d6:	e016      	b.n	8006606 <UART_SetConfig+0x2fe>
 80065d8:	2310      	movs	r3, #16
 80065da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065de:	e012      	b.n	8006606 <UART_SetConfig+0x2fe>
 80065e0:	cfff69f3 	.word	0xcfff69f3
 80065e4:	40008000 	.word	0x40008000
 80065e8:	40013800 	.word	0x40013800
 80065ec:	40021000 	.word	0x40021000
 80065f0:	40004400 	.word	0x40004400
 80065f4:	40004800 	.word	0x40004800
 80065f8:	40004c00 	.word	0x40004c00
 80065fc:	40005000 	.word	0x40005000
 8006600:	2310      	movs	r3, #16
 8006602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4aae      	ldr	r2, [pc, #696]	; (80068c4 <UART_SetConfig+0x5bc>)
 800660c:	4293      	cmp	r3, r2
 800660e:	f040 8097 	bne.w	8006740 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006612:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006616:	2b08      	cmp	r3, #8
 8006618:	d823      	bhi.n	8006662 <UART_SetConfig+0x35a>
 800661a:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <UART_SetConfig+0x318>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006645 	.word	0x08006645
 8006624:	08006663 	.word	0x08006663
 8006628:	0800664d 	.word	0x0800664d
 800662c:	08006663 	.word	0x08006663
 8006630:	08006653 	.word	0x08006653
 8006634:	08006663 	.word	0x08006663
 8006638:	08006663 	.word	0x08006663
 800663c:	08006663 	.word	0x08006663
 8006640:	0800665b 	.word	0x0800665b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006644:	f7fe f89e 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8006648:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800664a:	e010      	b.n	800666e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800664c:	4b9e      	ldr	r3, [pc, #632]	; (80068c8 <UART_SetConfig+0x5c0>)
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006650:	e00d      	b.n	800666e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006652:	f7fe f829 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8006656:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006658:	e009      	b.n	800666e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800665a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006660:	e005      	b.n	800666e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800666c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8130 	beq.w	80068d6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	4a94      	ldr	r2, [pc, #592]	; (80068cc <UART_SetConfig+0x5c4>)
 800667c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006680:	461a      	mov	r2, r3
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	fbb3 f3f2 	udiv	r3, r3, r2
 8006688:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	4613      	mov	r3, r2
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	4413      	add	r3, r2
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	429a      	cmp	r2, r3
 8006698:	d305      	bcc.n	80066a6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d903      	bls.n	80066ae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066ac:	e113      	b.n	80068d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	2200      	movs	r2, #0
 80066b2:	60bb      	str	r3, [r7, #8]
 80066b4:	60fa      	str	r2, [r7, #12]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	4a84      	ldr	r2, [pc, #528]	; (80068cc <UART_SetConfig+0x5c4>)
 80066bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2200      	movs	r2, #0
 80066c4:	603b      	str	r3, [r7, #0]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066d0:	f7f9 fda2 	bl	8000218 <__aeabi_uldivmod>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4610      	mov	r0, r2
 80066da:	4619      	mov	r1, r3
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	020b      	lsls	r3, r1, #8
 80066e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066ea:	0202      	lsls	r2, r0, #8
 80066ec:	6979      	ldr	r1, [r7, #20]
 80066ee:	6849      	ldr	r1, [r1, #4]
 80066f0:	0849      	lsrs	r1, r1, #1
 80066f2:	2000      	movs	r0, #0
 80066f4:	460c      	mov	r4, r1
 80066f6:	4605      	mov	r5, r0
 80066f8:	eb12 0804 	adds.w	r8, r2, r4
 80066fc:	eb43 0905 	adc.w	r9, r3, r5
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	469a      	mov	sl, r3
 8006708:	4693      	mov	fp, r2
 800670a:	4652      	mov	r2, sl
 800670c:	465b      	mov	r3, fp
 800670e:	4640      	mov	r0, r8
 8006710:	4649      	mov	r1, r9
 8006712:	f7f9 fd81 	bl	8000218 <__aeabi_uldivmod>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	4613      	mov	r3, r2
 800671c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006724:	d308      	bcc.n	8006738 <UART_SetConfig+0x430>
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800672c:	d204      	bcs.n	8006738 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6a3a      	ldr	r2, [r7, #32]
 8006734:	60da      	str	r2, [r3, #12]
 8006736:	e0ce      	b.n	80068d6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800673e:	e0ca      	b.n	80068d6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006748:	d166      	bne.n	8006818 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800674a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800674e:	2b08      	cmp	r3, #8
 8006750:	d827      	bhi.n	80067a2 <UART_SetConfig+0x49a>
 8006752:	a201      	add	r2, pc, #4	; (adr r2, 8006758 <UART_SetConfig+0x450>)
 8006754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006758:	0800677d 	.word	0x0800677d
 800675c:	08006785 	.word	0x08006785
 8006760:	0800678d 	.word	0x0800678d
 8006764:	080067a3 	.word	0x080067a3
 8006768:	08006793 	.word	0x08006793
 800676c:	080067a3 	.word	0x080067a3
 8006770:	080067a3 	.word	0x080067a3
 8006774:	080067a3 	.word	0x080067a3
 8006778:	0800679b 	.word	0x0800679b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800677c:	f7fe f802 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8006780:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006782:	e014      	b.n	80067ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006784:	f7fe f814 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 8006788:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800678a:	e010      	b.n	80067ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800678c:	4b4e      	ldr	r3, [pc, #312]	; (80068c8 <UART_SetConfig+0x5c0>)
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006790:	e00d      	b.n	80067ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006792:	f7fd ff89 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8006796:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006798:	e009      	b.n	80067ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067a0:	e005      	b.n	80067ae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8090 	beq.w	80068d6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	4a44      	ldr	r2, [pc, #272]	; (80068cc <UART_SetConfig+0x5c4>)
 80067bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c0:	461a      	mov	r2, r3
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067c8:	005a      	lsls	r2, r3, #1
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	441a      	add	r2, r3
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	2b0f      	cmp	r3, #15
 80067e0:	d916      	bls.n	8006810 <UART_SetConfig+0x508>
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e8:	d212      	bcs.n	8006810 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	f023 030f 	bic.w	r3, r3, #15
 80067f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	085b      	lsrs	r3, r3, #1
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	b29a      	uxth	r2, r3
 8006800:	8bfb      	ldrh	r3, [r7, #30]
 8006802:	4313      	orrs	r3, r2
 8006804:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	8bfa      	ldrh	r2, [r7, #30]
 800680c:	60da      	str	r2, [r3, #12]
 800680e:	e062      	b.n	80068d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006816:	e05e      	b.n	80068d6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006818:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800681c:	2b08      	cmp	r3, #8
 800681e:	d828      	bhi.n	8006872 <UART_SetConfig+0x56a>
 8006820:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <UART_SetConfig+0x520>)
 8006822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006826:	bf00      	nop
 8006828:	0800684d 	.word	0x0800684d
 800682c:	08006855 	.word	0x08006855
 8006830:	0800685d 	.word	0x0800685d
 8006834:	08006873 	.word	0x08006873
 8006838:	08006863 	.word	0x08006863
 800683c:	08006873 	.word	0x08006873
 8006840:	08006873 	.word	0x08006873
 8006844:	08006873 	.word	0x08006873
 8006848:	0800686b 	.word	0x0800686b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800684c:	f7fd ff9a 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8006850:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006852:	e014      	b.n	800687e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006854:	f7fd ffac 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 8006858:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800685a:	e010      	b.n	800687e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800685c:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <UART_SetConfig+0x5c0>)
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006860:	e00d      	b.n	800687e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006862:	f7fd ff21 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8006866:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006868:	e009      	b.n	800687e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800686a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006870:	e005      	b.n	800687e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800687c:	bf00      	nop
    }

    if (pclk != 0U)
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	2b00      	cmp	r3, #0
 8006882:	d028      	beq.n	80068d6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	4a10      	ldr	r2, [pc, #64]	; (80068cc <UART_SetConfig+0x5c4>)
 800688a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800688e:	461a      	mov	r2, r3
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	fbb3 f2f2 	udiv	r2, r3, r2
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	085b      	lsrs	r3, r3, #1
 800689c:	441a      	add	r2, r3
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	2b0f      	cmp	r3, #15
 80068ac:	d910      	bls.n	80068d0 <UART_SetConfig+0x5c8>
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b4:	d20c      	bcs.n	80068d0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60da      	str	r2, [r3, #12]
 80068c0:	e009      	b.n	80068d6 <UART_SetConfig+0x5ce>
 80068c2:	bf00      	nop
 80068c4:	40008000 	.word	0x40008000
 80068c8:	00f42400 	.word	0x00f42400
 80068cc:	08006fcc 	.word	0x08006fcc
      }
      else
      {
        ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2201      	movs	r2, #1
 80068da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2200      	movs	r2, #0
 80068ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	2200      	movs	r2, #0
 80068f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80068f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3730      	adds	r7, #48	; 0x30
 80068fa:	46bd      	mov	sp, r7
 80068fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00a      	beq.n	800692a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00a      	beq.n	800696e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006994:	f003 0310 	and.w	r3, r3, #16
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01a      	beq.n	8006a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069fe:	d10a      	bne.n	8006a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	605a      	str	r2, [r3, #4]
  }
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b098      	sub	sp, #96	; 0x60
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a54:	f7fa fdb2 	bl	80015bc <HAL_GetTick>
 8006a58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d12f      	bne.n	8006ac8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a70:	2200      	movs	r2, #0
 8006a72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f88e 	bl	8006b98 <UART_WaitOnFlagUntilTimeout>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d022      	beq.n	8006ac8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a96:	653b      	str	r3, [r7, #80]	; 0x50
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e6      	bne.n	8006a82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e063      	b.n	8006b90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0304 	and.w	r3, r3, #4
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	d149      	bne.n	8006b6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ad6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f857 	bl	8006b98 <UART_WaitOnFlagUntilTimeout>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d03c      	beq.n	8006b6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	623b      	str	r3, [r7, #32]
   return(result);
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b10:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e6      	bne.n	8006af0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3308      	adds	r3, #8
 8006b28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b42:	61fa      	str	r2, [r7, #28]
 8006b44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	69b9      	ldr	r1, [r7, #24]
 8006b48:	69fa      	ldr	r2, [r7, #28]
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e5      	bne.n	8006b22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e012      	b.n	8006b90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3758      	adds	r7, #88	; 0x58
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	603b      	str	r3, [r7, #0]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ba8:	e04f      	b.n	8006c4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb0:	d04b      	beq.n	8006c4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bb2:	f7fa fd03 	bl	80015bc <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d302      	bcc.n	8006bc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e04e      	b.n	8006c6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0304 	and.w	r3, r3, #4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d037      	beq.n	8006c4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b80      	cmp	r3, #128	; 0x80
 8006bde:	d034      	beq.n	8006c4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b40      	cmp	r3, #64	; 0x40
 8006be4:	d031      	beq.n	8006c4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	f003 0308 	and.w	r3, r3, #8
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d110      	bne.n	8006c16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 f838 	bl	8006c72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2208      	movs	r2, #8
 8006c06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e029      	b.n	8006c6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c24:	d111      	bne.n	8006c4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 f81e 	bl	8006c72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e00f      	b.n	8006c6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69da      	ldr	r2, [r3, #28]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	4013      	ands	r3, r2
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	bf0c      	ite	eq
 8006c5a:	2301      	moveq	r3, #1
 8006c5c:	2300      	movne	r3, #0
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	461a      	mov	r2, r3
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d0a0      	beq.n	8006baa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b095      	sub	sp, #84	; 0x54
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c98:	643b      	str	r3, [r7, #64]	; 0x40
 8006c9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e6      	bne.n	8006c7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cc2:	f023 0301 	bic.w	r3, r3, #1
 8006cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cd8:	e841 2300 	strex	r3, r2, [r1]
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e3      	bne.n	8006cac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d118      	bne.n	8006d1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f023 0310 	bic.w	r3, r3, #16
 8006d00:	647b      	str	r3, [r7, #68]	; 0x44
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d0a:	61bb      	str	r3, [r7, #24]
 8006d0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	6979      	ldr	r1, [r7, #20]
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	613b      	str	r3, [r7, #16]
   return(result);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e6      	bne.n	8006cec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2220      	movs	r2, #32
 8006d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006d32:	bf00      	nop
 8006d34:	3754      	adds	r7, #84	; 0x54
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b085      	sub	sp, #20
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e027      	b.n	8006da4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2224      	movs	r2, #36	; 0x24
 8006d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0201 	bic.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d101      	bne.n	8006dc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	e02d      	b.n	8006e24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2224      	movs	r2, #36	; 0x24
 8006dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0201 	bic.w	r2, r2, #1
 8006dee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f84f 	bl	8006ea8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d101      	bne.n	8006e44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e40:	2302      	movs	r3, #2
 8006e42:	e02d      	b.n	8006ea0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2224      	movs	r2, #36	; 0x24
 8006e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0201 	bic.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f811 	bl	8006ea8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d108      	bne.n	8006eca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ec8:	e031      	b.n	8006f2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006eca:	2308      	movs	r3, #8
 8006ecc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ece:	2308      	movs	r3, #8
 8006ed0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	0e5b      	lsrs	r3, r3, #25
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	0f5b      	lsrs	r3, r3, #29
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	f003 0307 	and.w	r3, r3, #7
 8006ef0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	7b3a      	ldrb	r2, [r7, #12]
 8006ef6:	4911      	ldr	r1, [pc, #68]	; (8006f3c <UARTEx_SetNbDataToProcess+0x94>)
 8006ef8:	5c8a      	ldrb	r2, [r1, r2]
 8006efa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006efe:	7b3a      	ldrb	r2, [r7, #12]
 8006f00:	490f      	ldr	r1, [pc, #60]	; (8006f40 <UARTEx_SetNbDataToProcess+0x98>)
 8006f02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f04:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	7b7a      	ldrb	r2, [r7, #13]
 8006f14:	4909      	ldr	r1, [pc, #36]	; (8006f3c <UARTEx_SetNbDataToProcess+0x94>)
 8006f16:	5c8a      	ldrb	r2, [r1, r2]
 8006f18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f1c:	7b7a      	ldrb	r2, [r7, #13]
 8006f1e:	4908      	ldr	r1, [pc, #32]	; (8006f40 <UARTEx_SetNbDataToProcess+0x98>)
 8006f20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f22:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	08006fe4 	.word	0x08006fe4
 8006f40:	08006fec 	.word	0x08006fec

08006f44 <memset>:
 8006f44:	4402      	add	r2, r0
 8006f46:	4603      	mov	r3, r0
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d100      	bne.n	8006f4e <memset+0xa>
 8006f4c:	4770      	bx	lr
 8006f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f52:	e7f9      	b.n	8006f48 <memset+0x4>

08006f54 <__libc_init_array>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	4d0d      	ldr	r5, [pc, #52]	; (8006f8c <__libc_init_array+0x38>)
 8006f58:	4c0d      	ldr	r4, [pc, #52]	; (8006f90 <__libc_init_array+0x3c>)
 8006f5a:	1b64      	subs	r4, r4, r5
 8006f5c:	10a4      	asrs	r4, r4, #2
 8006f5e:	2600      	movs	r6, #0
 8006f60:	42a6      	cmp	r6, r4
 8006f62:	d109      	bne.n	8006f78 <__libc_init_array+0x24>
 8006f64:	4d0b      	ldr	r5, [pc, #44]	; (8006f94 <__libc_init_array+0x40>)
 8006f66:	4c0c      	ldr	r4, [pc, #48]	; (8006f98 <__libc_init_array+0x44>)
 8006f68:	f000 f818 	bl	8006f9c <_init>
 8006f6c:	1b64      	subs	r4, r4, r5
 8006f6e:	10a4      	asrs	r4, r4, #2
 8006f70:	2600      	movs	r6, #0
 8006f72:	42a6      	cmp	r6, r4
 8006f74:	d105      	bne.n	8006f82 <__libc_init_array+0x2e>
 8006f76:	bd70      	pop	{r4, r5, r6, pc}
 8006f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7c:	4798      	blx	r3
 8006f7e:	3601      	adds	r6, #1
 8006f80:	e7ee      	b.n	8006f60 <__libc_init_array+0xc>
 8006f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f86:	4798      	blx	r3
 8006f88:	3601      	adds	r6, #1
 8006f8a:	e7f2      	b.n	8006f72 <__libc_init_array+0x1e>
 8006f8c:	08006ffc 	.word	0x08006ffc
 8006f90:	08006ffc 	.word	0x08006ffc
 8006f94:	08006ffc 	.word	0x08006ffc
 8006f98:	08007000 	.word	0x08007000

08006f9c <_init>:
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9e:	bf00      	nop
 8006fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa2:	bc08      	pop	{r3}
 8006fa4:	469e      	mov	lr, r3
 8006fa6:	4770      	bx	lr

08006fa8 <_fini>:
 8006fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006faa:	bf00      	nop
 8006fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fae:	bc08      	pop	{r3}
 8006fb0:	469e      	mov	lr, r3
 8006fb2:	4770      	bx	lr
