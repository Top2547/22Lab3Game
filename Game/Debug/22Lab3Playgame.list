
22Lab3Playgame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004964  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004b3c  08004b3c  00014b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b7c  08004b7c  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b84  08004b84  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b88  08004b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08004b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  200000d8  08004c64  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08004c64  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .debug_info   000148f4  00000000  00000000  0002014b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c0  00000000  00000000  00034a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00037100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6a  00000000  00000000  00038358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e75  00000000  00000000  000391c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015491  00000000  00000000  0005f037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa18a  00000000  00000000  000744c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e94  00000000  00000000  0016e654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001734e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000d8 	.word	0x200000d8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004b24 	.word	0x08004b24

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000dc 	.word	0x200000dc
 8000214:	08004b24 	.word	0x08004b24

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fda9 	bl	800106e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f818 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f9dc 	bl	80008dc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f860 	bl	80005e8 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000528:	f000 f93a 	bl	80007a0 <MX_TIM2_Init>
  MX_SPI3_Init();
 800052c:	f000 f8a6 	bl	800067c <MX_SPI3_Init>
  MX_TIM1_Init();
 8000530:	f000 f8e2 	bl	80006f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000534:	f000 f982 	bl	800083c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //  SPITxRx_Setup();//for mode 1,1
    IODIRB_Setup();
 8000538:	f000 fa60 	bl	80009fc <IODIRB_Setup>
    HAL_TIM_Base_Start_IT(&htim3);
 800053c:	4803      	ldr	r0, [pc, #12]	; (800054c <main+0x38>)
 800053e:	f002 ff25 	bl	800338c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPITxRx_readIO();
 8000542:	f000 fa7b 	bl	8000a3c <SPITxRx_readIO>
	  //ReadSwitch();
	  Game();
 8000546:	f000 faad 	bl	8000aa4 <Game>
	  SPITxRx_readIO();
 800054a:	e7fa      	b.n	8000542 <main+0x2e>
 800054c:	20000284 	.word	0x20000284

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0318 	add.w	r3, r7, #24
 800055a:	2238      	movs	r2, #56	; 0x38
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f004 fab4 	bl	8004acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000572:	2000      	movs	r0, #0
 8000574:	f001 f95a 	bl	800182c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000578:	2302      	movs	r3, #2
 800057a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000582:	2340      	movs	r3, #64	; 0x40
 8000584:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800058e:	2304      	movs	r3, #4
 8000590:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000592:	2355      	movs	r3, #85	; 0x55
 8000594:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0318 	add.w	r3, r7, #24
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 f9f4 	bl	8001994 <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005b2:	f000 fbc1 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2303      	movs	r3, #3
 80005bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2104      	movs	r1, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fcf2 	bl	8001fb8 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005da:	f000 fbad 	bl	8000d38 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 80005ee:	4a22      	ldr	r2, [pc, #136]	; (8000678 <MX_LPUART1_UART_Init+0x90>)
 80005f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005f2:	4b20      	ldr	r3, [pc, #128]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 80005f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 800061a:	2200      	movs	r2, #0
 800061c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000620:	2200      	movs	r2, #0
 8000622:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000626:	2200      	movs	r2, #0
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 800062c:	f003 fbe0 	bl	8003df0 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000636:	f000 fb7f 	bl	8000d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063a:	2100      	movs	r1, #0
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 800063e:	f004 f97b 	bl	8004938 <HAL_UARTEx_SetTxFifoThreshold>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000648:	f000 fb76 	bl	8000d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000650:	f004 f9b0 	bl	80049b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800065a:	f000 fb6d 	bl	8000d38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000660:	f004 f931 	bl	80048c6 <HAL_UARTEx_DisableFifoMode>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800066a:	f000 fb65 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200000f4 	.word	0x200000f4
 8000678:	40008000 	.word	0x40008000

0800067c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_SPI3_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <MX_SPI3_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_SPI3_Init+0x74>)
 8000688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800068c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_SPI3_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_SPI3_Init+0x74>)
 8000696:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800069a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_SPI3_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006b2:	2238      	movs	r2, #56	; 0x38
 80006b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006ca:	2207      	movs	r2, #7
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006d6:	2208      	movs	r2, #8
 80006d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006dc:	f002 f8d6 	bl	800288c <HAL_SPI_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 fb27 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000188 	.word	0x20000188
 80006f4:	40003c00 	.word	0x40003c00

080006f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_TIM1_Init+0xa0>)
 8000718:	4a20      	ldr	r2, [pc, #128]	; (800079c <MX_TIM1_Init+0xa4>)
 800071a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16999;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_TIM1_Init+0xa0>)
 800071e:	f244 2267 	movw	r2, #16999	; 0x4267
 8000722:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_TIM1_Init+0xa0>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_TIM1_Init+0xa0>)
 800072c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000730:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_TIM1_Init+0xa0>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_TIM1_Init+0xa0>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_TIM1_Init+0xa0>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000744:	4814      	ldr	r0, [pc, #80]	; (8000798 <MX_TIM1_Init+0xa0>)
 8000746:	f002 fdc9 	bl	80032dc <HAL_TIM_Base_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000750:	f000 faf2 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000758:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4619      	mov	r1, r3
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_TIM1_Init+0xa0>)
 8000762:	f002 ffdb 	bl	800371c <HAL_TIM_ConfigClockSource>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800076c:	f000 fae4 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_TIM1_Init+0xa0>)
 8000782:	f003 fa59 	bl	8003c38 <HAL_TIMEx_MasterConfigSynchronization>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800078c:	f000 fad4 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001ec 	.word	0x200001ec
 800079c:	40012c00 	.word	0x40012c00

080007a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_TIM2_Init+0x98>)
 80007c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1699;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_TIM2_Init+0x98>)
 80007c8:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80007cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_TIM2_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_TIM2_Init+0x98>)
 80007d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_TIM2_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_TIM2_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e8:	4813      	ldr	r0, [pc, #76]	; (8000838 <MX_TIM2_Init+0x98>)
 80007ea:	f002 fd77 	bl	80032dc <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80007f4:	f000 faa0 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	4619      	mov	r1, r3
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_TIM2_Init+0x98>)
 8000806:	f002 ff89 	bl	800371c <HAL_TIM_ConfigClockSource>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000810:	f000 fa92 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_TIM2_Init+0x98>)
 8000822:	f003 fa09 	bl	8003c38 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800082c:	f000 fa84 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000238 	.word	0x20000238

0800083c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_TIM3_Init+0x98>)
 800085c:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <MX_TIM3_Init+0x9c>)
 800085e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 8000860:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_TIM3_Init+0x98>)
 8000862:	f244 2267 	movw	r2, #16999	; 0x4267
 8000866:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_TIM3_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_TIM3_Init+0x98>)
 8000870:	f242 720f 	movw	r2, #9999	; 0x270f
 8000874:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_TIM3_Init+0x98>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_TIM3_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000882:	4814      	ldr	r0, [pc, #80]	; (80008d4 <MX_TIM3_Init+0x98>)
 8000884:	f002 fd2a 	bl	80032dc <HAL_TIM_Base_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800088e:	f000 fa53 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000896:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4619      	mov	r1, r3
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_TIM3_Init+0x98>)
 80008a0:	f002 ff3c 	bl	800371c <HAL_TIM_ConfigClockSource>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80008aa:	f000 fa45 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_TIM3_Init+0x98>)
 80008bc:	f003 f9bc 	bl	8003c38 <HAL_TIMEx_MasterConfigSynchronization>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80008c6:	f000 fa37 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000284 	.word	0x20000284
 80008d8:	40000400 	.word	0x40000400

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b3f      	ldr	r3, [pc, #252]	; (80009f0 <MX_GPIO_Init+0x114>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a3e      	ldr	r2, [pc, #248]	; (80009f0 <MX_GPIO_Init+0x114>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b3c      	ldr	r3, [pc, #240]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090a:	4b39      	ldr	r3, [pc, #228]	; (80009f0 <MX_GPIO_Init+0x114>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a38      	ldr	r2, [pc, #224]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b36      	ldr	r3, [pc, #216]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0320 	and.w	r3, r3, #32
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4a32      	ldr	r2, [pc, #200]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <MX_GPIO_Init+0x114>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a2c      	ldr	r2, [pc, #176]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4a26      	ldr	r2, [pc, #152]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_GPIO_Init+0x114>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2120      	movs	r1, #32
 800096e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000972:	f000 ff1f 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2104      	movs	r1, #4
 800097a:	481e      	ldr	r0, [pc, #120]	; (80009f4 <MX_GPIO_Init+0x118>)
 800097c:	f000 ff1a 	bl	80017b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000986:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	4818      	ldr	r0, [pc, #96]	; (80009f8 <MX_GPIO_Init+0x11c>)
 8000998:	f000 fd72 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800099c:	2320      	movs	r3, #32
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b6:	f000 fd63 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ba:	2304      	movs	r3, #4
 80009bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4808      	ldr	r0, [pc, #32]	; (80009f4 <MX_GPIO_Init+0x118>)
 80009d2:	f000 fd55 	bl	8001480 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2028      	movs	r0, #40	; 0x28
 80009dc:	f000 fcb5 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e0:	2028      	movs	r0, #40	; 0x28
 80009e2:	f000 fccc 	bl	800137e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48000c00 	.word	0x48000c00
 80009f8:	48000800 	.word	0x48000800

080009fc <IODIRB_Setup>:
//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
//HAL_Delay(1);
//}

void IODIRB_Setup()//at BEGIN 2
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2104      	movs	r1, #4
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <IODIRB_Setup+0x30>)
 8000a06:	f000 fed5 	bl	80017b4 <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000000;//write
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <IODIRB_Setup+0x34>)
 8000a0c:	2240      	movs	r2, #64	; 0x40
 8000a0e:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x01;//IODIRB
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <IODIRB_Setup+0x34>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0b00000000;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <IODIRB_Setup+0x34>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	709a      	strb	r2, [r3, #2]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <IODIRB_Setup+0x38>)
 8000a20:	4903      	ldr	r1, [pc, #12]	; (8000a30 <IODIRB_Setup+0x34>)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <IODIRB_Setup+0x3c>)
 8000a24:	f001 ffde 	bl	80029e4 <HAL_SPI_TransmitReceive_IT>
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	48000c00 	.word	0x48000c00
 8000a30:	200002dc 	.word	0x200002dc
 8000a34:	200002d0 	.word	0x200002d0
 8000a38:	20000188 	.word	0x20000188

08000a3c <SPITxRx_readIO>:

void SPITxRx_readIO()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 8000a40:	2104      	movs	r1, #4
 8000a42:	4813      	ldr	r0, [pc, #76]	; (8000a90 <SPITxRx_readIO+0x54>)
 8000a44:	f000 fe9e 	bl	8001784 <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d01e      	beq.n	8000a8c <SPITxRx_readIO+0x50>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2104      	movs	r1, #4
 8000a52:	480f      	ldr	r0, [pc, #60]	; (8000a90 <SPITxRx_readIO+0x54>)
 8000a54:	f000 feae 	bl	80017b4 <HAL_GPIO_WritePin>
		if (Mode == 0)
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <SPITxRx_readIO+0x58>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d109      	bne.n	8000a74 <SPITxRx_readIO+0x38>
		{
			SPITx[0] = 0b01000001;//read
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <SPITxRx_readIO+0x5c>)
 8000a62:	2241      	movs	r2, #65	; 0x41
 8000a64:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x12;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <SPITxRx_readIO+0x5c>)
 8000a68:	2212      	movs	r2, #18
 8000a6a:	705a      	strb	r2, [r3, #1]
			SPITx[2] = 0;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <SPITxRx_readIO+0x5c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	709a      	strb	r2, [r3, #2]
 8000a72:	e005      	b.n	8000a80 <SPITxRx_readIO+0x44>
		}
		else if(Mode == 1)
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <SPITxRx_readIO+0x58>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d101      	bne.n	8000a80 <SPITxRx_readIO+0x44>
		{
			Game();
 8000a7c:	f000 f812 	bl	8000aa4 <Game>
		}
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000a80:	2303      	movs	r3, #3
 8000a82:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <SPITxRx_readIO+0x60>)
 8000a84:	4904      	ldr	r1, [pc, #16]	; (8000a98 <SPITxRx_readIO+0x5c>)
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <SPITxRx_readIO+0x64>)
 8000a88:	f001 ffac 	bl	80029e4 <HAL_SPI_TransmitReceive_IT>
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	48000c00 	.word	0x48000c00
 8000a94:	200002e6 	.word	0x200002e6
 8000a98:	200002dc 	.word	0x200002dc
 8000a9c:	200002d0 	.word	0x200002d0
 8000aa0:	20000188 	.word	0x20000188

08000aa4 <Game>:
	//				Switch = 4;
	//			}
//}

void Game()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	if (State == 1)
 8000aa8:	4b78      	ldr	r3, [pc, #480]	; (8000c8c <Game+0x1e8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	f040 80a0 	bne.w	8000bf2 <Game+0x14e>
		{
			if (SPIRx[2]==239)
 8000ab2:	4b77      	ldr	r3, [pc, #476]	; (8000c90 <Game+0x1ec>)
 8000ab4:	789b      	ldrb	r3, [r3, #2]
 8000ab6:	2bef      	cmp	r3, #239	; 0xef
 8000ab8:	d11e      	bne.n	8000af8 <Game+0x54>
				{
				Pattern_Check[Nub] = 1;
 8000aba:	4b76      	ldr	r3, [pc, #472]	; (8000c94 <Game+0x1f0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a76      	ldr	r2, [pc, #472]	; (8000c98 <Game+0x1f4>)
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000ac6:	4b75      	ldr	r3, [pc, #468]	; (8000c9c <Game+0x1f8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4b73      	ldr	r3, [pc, #460]	; (8000c9c <Game+0x1f8>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	4973      	ldr	r1, [pc, #460]	; (8000ca0 <Game+0x1fc>)
 8000ad4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ad8:	4972      	ldr	r1, [pc, #456]	; (8000ca4 <Game+0x200>)
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 1;
 8000ade:	4b72      	ldr	r3, [pc, #456]	; (8000ca8 <Game+0x204>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000ae4:	4b6b      	ldr	r3, [pc, #428]	; (8000c94 <Game+0x1f0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	4a6a      	ldr	r2, [pc, #424]	; (8000c94 <Game+0x1f0>)
 8000aec:	6013      	str	r3, [r2, #0]
				HAL_Delay(500);
 8000aee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af2:	f000 fb2d 	bl	8001150 <HAL_Delay>
 8000af6:	e067      	b.n	8000bc8 <Game+0x124>
				}
			else if (SPIRx[2]==223)
 8000af8:	4b65      	ldr	r3, [pc, #404]	; (8000c90 <Game+0x1ec>)
 8000afa:	789b      	ldrb	r3, [r3, #2]
 8000afc:	2bdf      	cmp	r3, #223	; 0xdf
 8000afe:	d11e      	bne.n	8000b3e <Game+0x9a>
				{
				Pattern_Check[Nub] = 2;
 8000b00:	4b64      	ldr	r3, [pc, #400]	; (8000c94 <Game+0x1f0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a64      	ldr	r2, [pc, #400]	; (8000c98 <Game+0x1f4>)
 8000b06:	2102      	movs	r1, #2
 8000b08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000b0c:	4b63      	ldr	r3, [pc, #396]	; (8000c9c <Game+0x1f8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	1e5a      	subs	r2, r3, #1
 8000b12:	4b62      	ldr	r3, [pc, #392]	; (8000c9c <Game+0x1f8>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	4961      	ldr	r1, [pc, #388]	; (8000ca0 <Game+0x1fc>)
 8000b1a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b1e:	4961      	ldr	r1, [pc, #388]	; (8000ca4 <Game+0x200>)
 8000b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 2;
 8000b24:	4b60      	ldr	r3, [pc, #384]	; (8000ca8 <Game+0x204>)
 8000b26:	2202      	movs	r2, #2
 8000b28:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000b2a:	4b5a      	ldr	r3, [pc, #360]	; (8000c94 <Game+0x1f0>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	4a58      	ldr	r2, [pc, #352]	; (8000c94 <Game+0x1f0>)
 8000b32:	6013      	str	r3, [r2, #0]
				HAL_Delay(500);
 8000b34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b38:	f000 fb0a 	bl	8001150 <HAL_Delay>
 8000b3c:	e044      	b.n	8000bc8 <Game+0x124>
				}
			else if (SPIRx[2]==176)
 8000b3e:	4b54      	ldr	r3, [pc, #336]	; (8000c90 <Game+0x1ec>)
 8000b40:	789b      	ldrb	r3, [r3, #2]
 8000b42:	2bb0      	cmp	r3, #176	; 0xb0
 8000b44:	d11e      	bne.n	8000b84 <Game+0xe0>
				{
				Pattern_Check[Nub] = 3;
 8000b46:	4b53      	ldr	r3, [pc, #332]	; (8000c94 <Game+0x1f0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a53      	ldr	r2, [pc, #332]	; (8000c98 <Game+0x1f4>)
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000b52:	4b52      	ldr	r3, [pc, #328]	; (8000c9c <Game+0x1f8>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	1e5a      	subs	r2, r3, #1
 8000b58:	4b50      	ldr	r3, [pc, #320]	; (8000c9c <Game+0x1f8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	4950      	ldr	r1, [pc, #320]	; (8000ca0 <Game+0x1fc>)
 8000b60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b64:	494f      	ldr	r1, [pc, #316]	; (8000ca4 <Game+0x200>)
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 3;
 8000b6a:	4b4f      	ldr	r3, [pc, #316]	; (8000ca8 <Game+0x204>)
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000b70:	4b48      	ldr	r3, [pc, #288]	; (8000c94 <Game+0x1f0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	4a47      	ldr	r2, [pc, #284]	; (8000c94 <Game+0x1f0>)
 8000b78:	6013      	str	r3, [r2, #0]
				HAL_Delay(500);
 8000b7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7e:	f000 fae7 	bl	8001150 <HAL_Delay>
 8000b82:	e021      	b.n	8000bc8 <Game+0x124>
				}
			else if (SPIRx[2]==127)
 8000b84:	4b42      	ldr	r3, [pc, #264]	; (8000c90 <Game+0x1ec>)
 8000b86:	789b      	ldrb	r3, [r3, #2]
 8000b88:	2b7f      	cmp	r3, #127	; 0x7f
 8000b8a:	d11d      	bne.n	8000bc8 <Game+0x124>
				{
				Pattern_Check[Nub] = 4;
 8000b8c:	4b41      	ldr	r3, [pc, #260]	; (8000c94 <Game+0x1f0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a41      	ldr	r2, [pc, #260]	; (8000c98 <Game+0x1f4>)
 8000b92:	2104      	movs	r1, #4
 8000b94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				Pattern_Sol[Numcheck_Count-1] = Random_Number[Numcheck_Count-1];
 8000b98:	4b40      	ldr	r3, [pc, #256]	; (8000c9c <Game+0x1f8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	1e5a      	subs	r2, r3, #1
 8000b9e:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <Game+0x1f8>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	493e      	ldr	r1, [pc, #248]	; (8000ca0 <Game+0x1fc>)
 8000ba6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000baa:	493e      	ldr	r1, [pc, #248]	; (8000ca4 <Game+0x200>)
 8000bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Switch = 4;
 8000bb0:	4b3d      	ldr	r3, [pc, #244]	; (8000ca8 <Game+0x204>)
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	701a      	strb	r2, [r3, #0]
				Nub = Nub + 1;
 8000bb6:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <Game+0x1f0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a35      	ldr	r2, [pc, #212]	; (8000c94 <Game+0x1f0>)
 8000bbe:	6013      	str	r3, [r2, #0]
				HAL_Delay(500);
 8000bc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bc4:	f000 fac4 	bl	8001150 <HAL_Delay>
				}
			if (Nub == Numcheck_Count)
 8000bc8:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <Game+0x1f0>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <Game+0x1f8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d158      	bne.n	8000c86 <Game+0x1e2>
			{
				Nub = 0;
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <Game+0x1f0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
				State = 0;
 8000bda:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <Game+0x1e8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
				i = 0;
 8000be0:	4b32      	ldr	r3, [pc, #200]	; (8000cac <Game+0x208>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
				Numcheck_Count = Numcheck_Count + 1;
 8000be6:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <Game+0x1f8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	4a2b      	ldr	r2, [pc, #172]	; (8000c9c <Game+0x1f8>)
 8000bee:	6013      	str	r3, [r2, #0]
			if (i == Numcheck_Count)
			{
				State = 1;
			}
		}
}
 8000bf0:	e049      	b.n	8000c86 <Game+0x1e2>
	else if (State == 0)
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <Game+0x1e8>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d145      	bne.n	8000c86 <Game+0x1e2>
			SPITx[0] = 0b01000000;//write
 8000bfa:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <Game+0x20c>)
 8000bfc:	2240      	movs	r2, #64	; 0x40
 8000bfe:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15;//OLATB
 8000c00:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <Game+0x20c>)
 8000c02:	2215      	movs	r2, #21
 8000c04:	705a      	strb	r2, [r3, #1]
			if (Random_Number[i] == 1)
 8000c06:	4b29      	ldr	r3, [pc, #164]	; (8000cac <Game+0x208>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a25      	ldr	r2, [pc, #148]	; (8000ca0 <Game+0x1fc>)
 8000c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d106      	bne.n	8000c22 <Game+0x17e>
				SPITx[2] = 0b00111111;
 8000c14:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <Game+0x20c>)
 8000c16:	223f      	movs	r2, #63	; 0x3f
 8000c18:	709a      	strb	r2, [r3, #2]
				test =1;
 8000c1a:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <Game+0x210>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	e028      	b.n	8000c74 <Game+0x1d0>
			else if (Random_Number[i] == 2)
 8000c22:	4b22      	ldr	r3, [pc, #136]	; (8000cac <Game+0x208>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <Game+0x1fc>)
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d106      	bne.n	8000c3e <Game+0x19a>
				SPITx[2] = 0b11001111;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <Game+0x20c>)
 8000c32:	22cf      	movs	r2, #207	; 0xcf
 8000c34:	709a      	strb	r2, [r3, #2]
				test =2;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <Game+0x210>)
 8000c38:	2202      	movs	r2, #2
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	e01a      	b.n	8000c74 <Game+0x1d0>
			else if (Random_Number[i] == 3)
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <Game+0x208>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <Game+0x1fc>)
 8000c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d106      	bne.n	8000c5a <Game+0x1b6>
				SPITx[2] = 0b11110011;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <Game+0x20c>)
 8000c4e:	22f3      	movs	r2, #243	; 0xf3
 8000c50:	709a      	strb	r2, [r3, #2]
				test =3;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <Game+0x210>)
 8000c54:	2203      	movs	r2, #3
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	e00c      	b.n	8000c74 <Game+0x1d0>
			else if (Random_Number[i] == 4)
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <Game+0x208>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <Game+0x1fc>)
 8000c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d105      	bne.n	8000c74 <Game+0x1d0>
				SPITx[2] = 0b11111100;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <Game+0x20c>)
 8000c6a:	22fc      	movs	r2, #252	; 0xfc
 8000c6c:	709a      	strb	r2, [r3, #2]
				test =4;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <Game+0x210>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	601a      	str	r2, [r3, #0]
			if (i == Numcheck_Count)
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <Game+0x208>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <Game+0x1f8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d102      	bne.n	8000c86 <Game+0x1e2>
				State = 1;
 8000c80:	4b02      	ldr	r3, [pc, #8]	; (8000c8c <Game+0x1e8>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000047c 	.word	0x2000047c
 8000c90:	200002d0 	.word	0x200002d0
 8000c94:	20000488 	.word	0x20000488
 8000c98:	200003b4 	.word	0x200003b4
 8000c9c:	20000480 	.word	0x20000480
 8000ca0:	20000004 	.word	0x20000004
 8000ca4:	200002ec 	.word	0x200002ec
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	200002e8 	.word	0x200002e8
 8000cb0:	200002dc 	.word	0x200002dc
 8000cb4:	20000484 	.word	0x20000484

08000cb8 <HAL_TIM_PeriodElapsedCallback>:
//
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d10d      	bne.n	8000ce4 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		i+=1;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000cd0:	6013      	str	r3, [r2, #0]
		if (i > Numcheck_Count)
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	dd02      	ble.n	8000ce4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			i=0;
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	20000284 	.word	0x20000284
 8000cf4:	200002e8 	.word	0x200002e8
 8000cf8:	20000480 	.word	0x20000480

08000cfc <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	Mode+=1;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000d0e:	701a      	strb	r2, [r3, #0]
	if (Mode>1)
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d902      	bls.n	8000d1e <HAL_SPI_TxRxCpltCallback+0x22>
	{
		Mode = 0;
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2104      	movs	r1, #4
 8000d22:	4804      	ldr	r0, [pc, #16]	; (8000d34 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000d24:	f000 fd46 	bl	80017b4 <HAL_GPIO_WritePin>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200002e6 	.word	0x200002e6
 8000d34:	48000c00 	.word	0x48000c00

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_MspInit+0x44>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_MspInit+0x44>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6613      	str	r3, [r2, #96]	; 0x60
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_MspInit+0x44>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x44>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x44>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x44>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d7a:	f000 fdfb 	bl	8001974 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b09e      	sub	sp, #120	; 0x78
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	2254      	movs	r2, #84	; 0x54
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 fe8d 	bl	8004acc <memset>
  if(huart->Instance==LPUART1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a1f      	ldr	r2, [pc, #124]	; (8000e34 <HAL_UART_MspInit+0xa8>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d136      	bne.n	8000e2a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 fb11 	bl	80023f0 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd4:	f7ff ffb0 	bl	8000d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ddc:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df4:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000e08:	230c      	movs	r3, #12
 8000e0a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e18:	230c      	movs	r3, #12
 8000e1a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e26:	f000 fb2b 	bl	8001480 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3778      	adds	r7, #120	; 0x78
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40008000 	.word	0x40008000
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <HAL_SPI_MspInit+0x8c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d130      	bne.n	8000ec0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e68:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_SPI_MspInit+0x90>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ea0:	2306      	movs	r3, #6
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <HAL_SPI_MspInit+0x94>)
 8000eac:	f000 fae8 	bl	8001480 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2033      	movs	r0, #51	; 0x33
 8000eb6:	f000 fa48 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000eba:	2033      	movs	r0, #51	; 0x33
 8000ebc:	f000 fa5f 	bl	800137e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40003c00 	.word	0x40003c00
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48000800 	.word	0x48000800

08000ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <HAL_TIM_Base_MspInit+0x8c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d10c      	bne.n	8000f00 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <HAL_TIM_Base_MspInit+0x90>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eea:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <HAL_TIM_Base_MspInit+0x90>)
 8000eec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ef0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_TIM_Base_MspInit+0x90>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000efe:	e02a      	b.n	8000f56 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f08:	d10c      	bne.n	8000f24 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_TIM_Base_MspInit+0x90>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0e:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <HAL_TIM_Base_MspInit+0x90>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6593      	str	r3, [r2, #88]	; 0x58
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <HAL_TIM_Base_MspInit+0x90>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
}
 8000f22:	e018      	b.n	8000f56 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <HAL_TIM_Base_MspInit+0x94>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d113      	bne.n	8000f56 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_TIM_Base_MspInit+0x90>)
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <HAL_TIM_Base_MspInit+0x90>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_TIM_Base_MspInit+0x90>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	201d      	movs	r0, #29
 8000f4c:	f000 f9fd 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f50:	201d      	movs	r0, #29
 8000f52:	f000 fa14 	bl	800137e <HAL_NVIC_EnableIRQ>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40012c00 	.word	0x40012c00
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40000400 	.word	0x40000400

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb8:	f000 f8ac 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <TIM3_IRQHandler+0x10>)
 8000fc6:	f002 fa59 	bl	800347c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000284 	.word	0x20000284

08000fd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fdc:	f000 fc02 	bl	80017e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <SPI3_IRQHandler+0x10>)
 8000fea:	f001 fda9 	bl	8002b40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000188 	.word	0x20000188

08000ff8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800101e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001020:	f7ff ffea 	bl	8000ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <LoopForever+0x6>)
  ldr r1, =_edata
 8001026:	490d      	ldr	r1, [pc, #52]	; (800105c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <LoopForever+0xe>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800102c:	e002      	b.n	8001034 <LoopCopyDataInit>

0800102e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001032:	3304      	adds	r3, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001038:	d3f9      	bcc.n	800102e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <LoopForever+0x12>)
  ldr r4, =_ebss
 800103c:	4c0a      	ldr	r4, [pc, #40]	; (8001068 <LoopForever+0x16>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001040:	e001      	b.n	8001046 <LoopFillZerobss>

08001042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001044:	3204      	adds	r2, #4

08001046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001048:	d3fb      	bcc.n	8001042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104a:	f003 fd47 	bl	8004adc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800104e:	f7ff fa61 	bl	8000514 <main>

08001052 <LoopForever>:

LoopForever:
    b LoopForever
 8001052:	e7fe      	b.n	8001052 <LoopForever>
  ldr   r0, =_estack
 8001054:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001060:	08004b8c 	.word	0x08004b8c
  ldr r2, =_sbss
 8001064:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001068:	20000490 	.word	0x20000490

0800106c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC1_2_IRQHandler>

0800106e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f95b 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f80e 	bl	80010a0 <HAL_InitTick>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	e001      	b.n	8001094 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001090:	f7ff fe58 	bl	8000d44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001094:	79fb      	ldrb	r3, [r7, #7]

}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_InitTick+0x68>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d022      	beq.n	80010fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <HAL_InitTick+0x6c>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <HAL_InitTick+0x68>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80010c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 f966 	bl	800139a <HAL_SYSTICK_Config>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10f      	bne.n	80010f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	d809      	bhi.n	80010ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010da:	2200      	movs	r2, #0
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	f04f 30ff 	mov.w	r0, #4294967295
 80010e2:	f000 f932 	bl	800134a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_InitTick+0x70>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	e007      	b.n	80010fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	73fb      	strb	r3, [r7, #15]
 80010f2:	e004      	b.n	80010fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e001      	b.n	80010fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200000d4 	.word	0x200000d4
 800110c:	200000cc 	.word	0x200000cc
 8001110:	200000d0 	.word	0x200000d0

08001114 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_IncTick+0x1c>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <HAL_IncTick+0x20>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4413      	add	r3, r2
 8001122:	4a03      	ldr	r2, [pc, #12]	; (8001130 <HAL_IncTick+0x1c>)
 8001124:	6013      	str	r3, [r2, #0]
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	2000048c 	.word	0x2000048c
 8001134:	200000d4 	.word	0x200000d4

08001138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_GetTick+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	2000048c 	.word	0x2000048c

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff ffee 	bl	8001138 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d004      	beq.n	8001174 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_Delay+0x40>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	4413      	add	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001174:	bf00      	nop
 8001176:	f7ff ffdf 	bl	8001138 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	429a      	cmp	r2, r3
 8001184:	d8f7      	bhi.n	8001176 <HAL_Delay+0x26>
  {
  }
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200000d4 	.word	0x200000d4

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff29 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff40 	bl	80011dc <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff90 	bl	8001288 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5f 	bl	8001234 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff33 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa4 	bl	80012f0 <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d00d      	beq.n	80013e6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2204      	movs	r2, #4
 80013ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e047      	b.n	8001476 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 020e 	bic.w	r2, r2, #14
 80013f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0201 	bic.w	r2, r2, #1
 8001404:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001414:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f003 021f 	and.w	r2, r3, #31
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	2101      	movs	r1, #1
 8001424:	fa01 f202 	lsl.w	r2, r1, r2
 8001428:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001432:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00c      	beq.n	8001456 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001446:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800144a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001454:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	4798      	blx	r3
    }
  }
  return status;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800148e:	e15a      	b.n	8001746 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	2101      	movs	r1, #1
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	4013      	ands	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 814c 	beq.w	8001740 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d005      	beq.n	80014c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d130      	bne.n	8001522 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2203      	movs	r2, #3
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014f6:	2201      	movs	r2, #1
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	f003 0201 	and.w	r2, r3, #1
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b03      	cmp	r3, #3
 800152c:	d017      	beq.n	800155e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	2203      	movs	r2, #3
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d123      	bne.n	80015b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3208      	adds	r2, #8
 8001572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	220f      	movs	r2, #15
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	08da      	lsrs	r2, r3, #3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3208      	adds	r2, #8
 80015ac:	6939      	ldr	r1, [r7, #16]
 80015ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	2203      	movs	r2, #3
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0203 	and.w	r2, r3, #3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80a6 	beq.w	8001740 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f4:	4b5b      	ldr	r3, [pc, #364]	; (8001764 <HAL_GPIO_Init+0x2e4>)
 80015f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f8:	4a5a      	ldr	r2, [pc, #360]	; (8001764 <HAL_GPIO_Init+0x2e4>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001600:	4b58      	ldr	r3, [pc, #352]	; (8001764 <HAL_GPIO_Init+0x2e4>)
 8001602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800160c:	4a56      	ldr	r2, [pc, #344]	; (8001768 <HAL_GPIO_Init+0x2e8>)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	220f      	movs	r2, #15
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001636:	d01f      	beq.n	8001678 <HAL_GPIO_Init+0x1f8>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a4c      	ldr	r2, [pc, #304]	; (800176c <HAL_GPIO_Init+0x2ec>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d019      	beq.n	8001674 <HAL_GPIO_Init+0x1f4>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a4b      	ldr	r2, [pc, #300]	; (8001770 <HAL_GPIO_Init+0x2f0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d013      	beq.n	8001670 <HAL_GPIO_Init+0x1f0>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a4a      	ldr	r2, [pc, #296]	; (8001774 <HAL_GPIO_Init+0x2f4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d00d      	beq.n	800166c <HAL_GPIO_Init+0x1ec>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a49      	ldr	r2, [pc, #292]	; (8001778 <HAL_GPIO_Init+0x2f8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d007      	beq.n	8001668 <HAL_GPIO_Init+0x1e8>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a48      	ldr	r2, [pc, #288]	; (800177c <HAL_GPIO_Init+0x2fc>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d101      	bne.n	8001664 <HAL_GPIO_Init+0x1e4>
 8001660:	2305      	movs	r3, #5
 8001662:	e00a      	b.n	800167a <HAL_GPIO_Init+0x1fa>
 8001664:	2306      	movs	r3, #6
 8001666:	e008      	b.n	800167a <HAL_GPIO_Init+0x1fa>
 8001668:	2304      	movs	r3, #4
 800166a:	e006      	b.n	800167a <HAL_GPIO_Init+0x1fa>
 800166c:	2303      	movs	r3, #3
 800166e:	e004      	b.n	800167a <HAL_GPIO_Init+0x1fa>
 8001670:	2302      	movs	r3, #2
 8001672:	e002      	b.n	800167a <HAL_GPIO_Init+0x1fa>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <HAL_GPIO_Init+0x1fa>
 8001678:	2300      	movs	r3, #0
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	f002 0203 	and.w	r2, r2, #3
 8001680:	0092      	lsls	r2, r2, #2
 8001682:	4093      	lsls	r3, r2
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800168a:	4937      	ldr	r1, [pc, #220]	; (8001768 <HAL_GPIO_Init+0x2e8>)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001698:	4b39      	ldr	r3, [pc, #228]	; (8001780 <HAL_GPIO_Init+0x300>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016bc:	4a30      	ldr	r2, [pc, #192]	; (8001780 <HAL_GPIO_Init+0x300>)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016c2:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <HAL_GPIO_Init+0x300>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016e6:	4a26      	ldr	r2, [pc, #152]	; (8001780 <HAL_GPIO_Init+0x300>)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016ec:	4b24      	ldr	r3, [pc, #144]	; (8001780 <HAL_GPIO_Init+0x300>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001710:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <HAL_GPIO_Init+0x300>)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <HAL_GPIO_Init+0x300>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800173a:	4a11      	ldr	r2, [pc, #68]	; (8001780 <HAL_GPIO_Init+0x300>)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	fa22 f303 	lsr.w	r3, r2, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	f47f ae9d 	bne.w	8001490 <HAL_GPIO_Init+0x10>
  }
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40021000 	.word	0x40021000
 8001768:	40010000 	.word	0x40010000
 800176c:	48000400 	.word	0x48000400
 8001770:	48000800 	.word	0x48000800
 8001774:	48000c00 	.word	0x48000c00
 8001778:	48001000 	.word	0x48001000
 800177c:	48001400 	.word	0x48001400
 8001780:	40010400 	.word	0x40010400

08001784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	4013      	ands	r3, r2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
 80017a0:	e001      	b.n	80017a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	807b      	strh	r3, [r7, #2]
 80017c0:	4613      	mov	r3, r2
 80017c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f0:	695a      	ldr	r2, [r3, #20]
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f806 	bl	8001814 <HAL_GPIO_EXTI_Callback>
  }
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40010400 	.word	0x40010400

08001814 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d141      	bne.n	80018be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800183a:	4b4b      	ldr	r3, [pc, #300]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001846:	d131      	bne.n	80018ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001848:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800184e:	4a46      	ldr	r2, [pc, #280]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001854:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001858:	4b43      	ldr	r3, [pc, #268]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001860:	4a41      	ldr	r2, [pc, #260]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001866:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001868:	4b40      	ldr	r3, [pc, #256]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2232      	movs	r2, #50	; 0x32
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	4a3f      	ldr	r2, [pc, #252]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001874:	fba2 2303 	umull	r2, r3, r2, r3
 8001878:	0c9b      	lsrs	r3, r3, #18
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800187e:	e002      	b.n	8001886 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3b01      	subs	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001892:	d102      	bne.n	800189a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f2      	bne.n	8001880 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800189a:	4b33      	ldr	r3, [pc, #204]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a6:	d158      	bne.n	800195a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e057      	b.n	800195c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018ac:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018b2:	4a2d      	ldr	r2, [pc, #180]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018bc:	e04d      	b.n	800195a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018c4:	d141      	bne.n	800194a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018c6:	4b28      	ldr	r3, [pc, #160]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d2:	d131      	bne.n	8001938 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018da:	4a23      	ldr	r2, [pc, #140]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ec:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2232      	movs	r2, #50	; 0x32
 80018fa:	fb02 f303 	mul.w	r3, r2, r3
 80018fe:	4a1c      	ldr	r2, [pc, #112]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001900:	fba2 2303 	umull	r2, r3, r2, r3
 8001904:	0c9b      	lsrs	r3, r3, #18
 8001906:	3301      	adds	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800190a:	e002      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3b01      	subs	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800191e:	d102      	bne.n	8001926 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f2      	bne.n	800190c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001932:	d112      	bne.n	800195a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e011      	b.n	800195c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001944:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001948:	e007      	b.n	800195a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001954:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001958:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	40007000 	.word	0x40007000
 800196c:	200000cc 	.word	0x200000cc
 8001970:	431bde83 	.word	0x431bde83

08001974 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a04      	ldr	r2, [pc, #16]	; (8001990 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800197e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001982:	6093      	str	r3, [r2, #8]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40007000 	.word	0x40007000

08001994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e2fe      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d075      	beq.n	8001a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b2:	4b97      	ldr	r3, [pc, #604]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019bc:	4b94      	ldr	r3, [pc, #592]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d102      	bne.n	80019d2 <HAL_RCC_OscConfig+0x3e>
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d002      	beq.n	80019d8 <HAL_RCC_OscConfig+0x44>
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d10b      	bne.n	80019f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	4b8d      	ldr	r3, [pc, #564]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d05b      	beq.n	8001a9c <HAL_RCC_OscConfig+0x108>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d157      	bne.n	8001a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e2d9      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f8:	d106      	bne.n	8001a08 <HAL_RCC_OscConfig+0x74>
 80019fa:	4b85      	ldr	r3, [pc, #532]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a84      	ldr	r2, [pc, #528]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e01d      	b.n	8001a44 <HAL_RCC_OscConfig+0xb0>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x98>
 8001a12:	4b7f      	ldr	r3, [pc, #508]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a7e      	ldr	r2, [pc, #504]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b7c      	ldr	r3, [pc, #496]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a7b      	ldr	r2, [pc, #492]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0xb0>
 8001a2c:	4b78      	ldr	r3, [pc, #480]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a77      	ldr	r2, [pc, #476]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b75      	ldr	r3, [pc, #468]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a74      	ldr	r2, [pc, #464]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d013      	beq.n	8001a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fb74 	bl	8001138 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff fb70 	bl	8001138 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	; 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e29e      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a66:	4b6a      	ldr	r3, [pc, #424]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0xc0>
 8001a72:	e014      	b.n	8001a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff fb60 	bl	8001138 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fb5c 	bl	8001138 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e28a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a8e:	4b60      	ldr	r3, [pc, #384]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0xe8>
 8001a9a:	e000      	b.n	8001a9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d075      	beq.n	8001b96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aaa:	4b59      	ldr	r3, [pc, #356]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab4:	4b56      	ldr	r3, [pc, #344]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	2b0c      	cmp	r3, #12
 8001ac2:	d102      	bne.n	8001aca <HAL_RCC_OscConfig+0x136>
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d002      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x13c>
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d11f      	bne.n	8001b10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad0:	4b4f      	ldr	r3, [pc, #316]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x154>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e25d      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b49      	ldr	r3, [pc, #292]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	061b      	lsls	r3, r3, #24
 8001af6:	4946      	ldr	r1, [pc, #280]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001afc:	4b45      	ldr	r3, [pc, #276]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff facd 	bl	80010a0 <HAL_InitTick>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d043      	beq.n	8001b94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e249      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d023      	beq.n	8001b60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b18:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a3c      	ldr	r2, [pc, #240]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fb08 	bl	8001138 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fb04 	bl	8001138 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e232      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b3e:	4b34      	ldr	r3, [pc, #208]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4a:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	061b      	lsls	r3, r3, #24
 8001b58:	492d      	ldr	r1, [pc, #180]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
 8001b5e:	e01a      	b.n	8001b96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b60:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a2a      	ldr	r2, [pc, #168]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001b66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fae4 	bl	8001138 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b74:	f7ff fae0 	bl	8001138 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e20e      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b86:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x1e0>
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d041      	beq.n	8001c26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01c      	beq.n	8001be4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb0:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7ff fabd 	bl	8001138 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc2:	f7ff fab9 	bl	8001138 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1e7      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0ef      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x22e>
 8001be2:	e020      	b.n	8001c26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_RCC_OscConfig+0x27c>)
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff faa0 	bl	8001138 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bfa:	e00d      	b.n	8001c18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fa9c 	bl	8001138 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d906      	bls.n	8001c18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e1ca      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	200000d0 	.word	0x200000d0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c18:	4b8c      	ldr	r3, [pc, #560]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1ea      	bne.n	8001bfc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80a6 	beq.w	8001d80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c38:	4b84      	ldr	r3, [pc, #528]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_OscConfig+0x2b4>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x2b6>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00d      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b7f      	ldr	r3, [pc, #508]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	4a7e      	ldr	r2, [pc, #504]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6593      	str	r3, [r2, #88]	; 0x58
 8001c5a:	4b7c      	ldr	r3, [pc, #496]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c66:	2301      	movs	r3, #1
 8001c68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c6a:	4b79      	ldr	r3, [pc, #484]	; (8001e50 <HAL_RCC_OscConfig+0x4bc>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d118      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c76:	4b76      	ldr	r3, [pc, #472]	; (8001e50 <HAL_RCC_OscConfig+0x4bc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a75      	ldr	r2, [pc, #468]	; (8001e50 <HAL_RCC_OscConfig+0x4bc>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c82:	f7ff fa59 	bl	8001138 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8a:	f7ff fa55 	bl	8001138 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e183      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9c:	4b6c      	ldr	r3, [pc, #432]	; (8001e50 <HAL_RCC_OscConfig+0x4bc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d108      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x32e>
 8001cb0:	4b66      	ldr	r3, [pc, #408]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb6:	4a65      	ldr	r2, [pc, #404]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc0:	e024      	b.n	8001d0c <HAL_RCC_OscConfig+0x378>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d110      	bne.n	8001cec <HAL_RCC_OscConfig+0x358>
 8001cca:	4b60      	ldr	r3, [pc, #384]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd0:	4a5e      	ldr	r2, [pc, #376]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cda:	4b5c      	ldr	r3, [pc, #368]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce0:	4a5a      	ldr	r2, [pc, #360]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cea:	e00f      	b.n	8001d0c <HAL_RCC_OscConfig+0x378>
 8001cec:	4b57      	ldr	r3, [pc, #348]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf2:	4a56      	ldr	r2, [pc, #344]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cfc:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d02:	4a52      	ldr	r2, [pc, #328]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d016      	beq.n	8001d42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff fa10 	bl	8001138 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fa0c 	bl	8001138 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e138      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ed      	beq.n	8001d1c <HAL_RCC_OscConfig+0x388>
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d42:	f7ff f9f9 	bl	8001138 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7ff f9f5 	bl	8001138 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e121      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d60:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1ed      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d6e:	7ffb      	ldrb	r3, [r7, #31]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d105      	bne.n	8001d80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d74:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	4a34      	ldr	r2, [pc, #208]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d03c      	beq.n	8001e06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01c      	beq.n	8001dce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d94:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d9a:	4a2c      	ldr	r2, [pc, #176]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7ff f9c8 	bl	8001138 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dac:	f7ff f9c4 	bl	8001138 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e0f2      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0ef      	beq.n	8001dac <HAL_RCC_OscConfig+0x418>
 8001dcc:	e01b      	b.n	8001e06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dce:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dde:	f7ff f9ab 	bl	8001138 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001de6:	f7ff f9a7 	bl	8001138 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0d5      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1ef      	bne.n	8001de6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80c9 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b0c      	cmp	r3, #12
 8001e1a:	f000 8083 	beq.w	8001f24 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d15e      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <HAL_RCC_OscConfig+0x4b8>)
 8001e2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e32:	f7ff f981 	bl	8001138 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e38:	e00c      	b.n	8001e54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3a:	f7ff f97d 	bl	8001138 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d905      	bls.n	8001e54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e0ab      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e54:	4b55      	ldr	r3, [pc, #340]	; (8001fac <HAL_RCC_OscConfig+0x618>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ec      	bne.n	8001e3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e60:	4b52      	ldr	r3, [pc, #328]	; (8001fac <HAL_RCC_OscConfig+0x618>)
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	4b52      	ldr	r3, [pc, #328]	; (8001fb0 <HAL_RCC_OscConfig+0x61c>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6a11      	ldr	r1, [r2, #32]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e70:	3a01      	subs	r2, #1
 8001e72:	0112      	lsls	r2, r2, #4
 8001e74:	4311      	orrs	r1, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e7a:	0212      	lsls	r2, r2, #8
 8001e7c:	4311      	orrs	r1, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e82:	0852      	lsrs	r2, r2, #1
 8001e84:	3a01      	subs	r2, #1
 8001e86:	0552      	lsls	r2, r2, #21
 8001e88:	4311      	orrs	r1, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e8e:	0852      	lsrs	r2, r2, #1
 8001e90:	3a01      	subs	r2, #1
 8001e92:	0652      	lsls	r2, r2, #25
 8001e94:	4311      	orrs	r1, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e9a:	06d2      	lsls	r2, r2, #27
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	4943      	ldr	r1, [pc, #268]	; (8001fac <HAL_RCC_OscConfig+0x618>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b41      	ldr	r3, [pc, #260]	; (8001fac <HAL_RCC_OscConfig+0x618>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a40      	ldr	r2, [pc, #256]	; (8001fac <HAL_RCC_OscConfig+0x618>)
 8001eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb0:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <HAL_RCC_OscConfig+0x618>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4a3d      	ldr	r2, [pc, #244]	; (8001fac <HAL_RCC_OscConfig+0x618>)
 8001eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f93c 	bl	8001138 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7ff f938 	bl	8001138 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e066      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed6:	4b35      	ldr	r3, [pc, #212]	; (8001fac <HAL_RCC_OscConfig+0x618>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x530>
 8001ee2:	e05e      	b.n	8001fa2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee4:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_RCC_OscConfig+0x618>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a30      	ldr	r2, [pc, #192]	; (8001fac <HAL_RCC_OscConfig+0x618>)
 8001eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff f922 	bl	8001138 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff f91e 	bl	8001138 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e04c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f0a:	4b28      	ldr	r3, [pc, #160]	; (8001fac <HAL_RCC_OscConfig+0x618>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001f16:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_RCC_OscConfig+0x618>)
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	4924      	ldr	r1, [pc, #144]	; (8001fac <HAL_RCC_OscConfig+0x618>)
 8001f1c:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <HAL_RCC_OscConfig+0x620>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	60cb      	str	r3, [r1, #12]
 8001f22:	e03e      	b.n	8001fa2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e039      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_RCC_OscConfig+0x618>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f003 0203 	and.w	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d12c      	bne.n	8001f9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d123      	bne.n	8001f9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d11b      	bne.n	8001f9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d113      	bne.n	8001f9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	3b01      	subs	r3, #1
 8001f84:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d109      	bne.n	8001f9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	3b01      	subs	r3, #1
 8001f98:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3720      	adds	r7, #32
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	019f800c 	.word	0x019f800c
 8001fb4:	feeefffc 	.word	0xfeeefffc

08001fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e11e      	b.n	800220e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b91      	ldr	r3, [pc, #580]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d910      	bls.n	8002000 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b8e      	ldr	r3, [pc, #568]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 020f 	bic.w	r2, r3, #15
 8001fe6:	498c      	ldr	r1, [pc, #560]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b8a      	ldr	r3, [pc, #552]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e106      	b.n	800220e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d073      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d129      	bne.n	8002068 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002014:	4b81      	ldr	r3, [pc, #516]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0f4      	b.n	800220e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002024:	f000 f99e 	bl	8002364 <RCC_GetSysClockFreqFromPLLSource>
 8002028:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4a7c      	ldr	r2, [pc, #496]	; (8002220 <HAL_RCC_ClockConfig+0x268>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d93f      	bls.n	80020b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002032:	4b7a      	ldr	r3, [pc, #488]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002046:	2b00      	cmp	r3, #0
 8002048:	d033      	beq.n	80020b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800204e:	2b00      	cmp	r3, #0
 8002050:	d12f      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002052:	4b72      	ldr	r3, [pc, #456]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800205a:	4a70      	ldr	r2, [pc, #448]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 800205c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002060:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	e024      	b.n	80020b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d107      	bne.n	8002080 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002070:	4b6a      	ldr	r3, [pc, #424]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0c6      	b.n	800220e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002080:	4b66      	ldr	r3, [pc, #408]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0be      	b.n	800220e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002090:	f000 f8ce 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 8002094:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4a61      	ldr	r2, [pc, #388]	; (8002220 <HAL_RCC_ClockConfig+0x268>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d909      	bls.n	80020b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800209e:	4b5f      	ldr	r3, [pc, #380]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020a6:	4a5d      	ldr	r2, [pc, #372]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 80020a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020b2:	4b5a      	ldr	r3, [pc, #360]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f023 0203 	bic.w	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4957      	ldr	r1, [pc, #348]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c4:	f7ff f838 	bl	8001138 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7ff f834 	bl	8001138 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e095      	b.n	800220e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	4b4e      	ldr	r3, [pc, #312]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 020c 	and.w	r2, r3, #12
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1eb      	bne.n	80020cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d023      	beq.n	8002148 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800210c:	4b43      	ldr	r3, [pc, #268]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a42      	ldr	r2, [pc, #264]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 8002112:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002116:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d007      	beq.n	8002134 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002124:	4b3d      	ldr	r3, [pc, #244]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800212c:	4a3b      	ldr	r2, [pc, #236]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 800212e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002132:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002134:	4b39      	ldr	r3, [pc, #228]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4936      	ldr	r1, [pc, #216]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
 8002146:	e008      	b.n	800215a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2b80      	cmp	r3, #128	; 0x80
 800214c:	d105      	bne.n	800215a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800214e:	4b33      	ldr	r3, [pc, #204]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	4a32      	ldr	r2, [pc, #200]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 8002154:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002158:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800215a:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d21d      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002168:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 020f 	bic.w	r2, r3, #15
 8002170:	4929      	ldr	r1, [pc, #164]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	4313      	orrs	r3, r2
 8002176:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002178:	f7fe ffde 	bl	8001138 <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	e00a      	b.n	8002196 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7fe ffda 	bl	8001138 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e03b      	b.n	800220e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_RCC_ClockConfig+0x260>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d1ed      	bne.n	8002180 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4917      	ldr	r1, [pc, #92]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	490f      	ldr	r1, [pc, #60]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021e2:	f000 f825 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_RCC_ClockConfig+0x264>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	490c      	ldr	r1, [pc, #48]	; (8002224 <HAL_RCC_ClockConfig+0x26c>)
 80021f4:	5ccb      	ldrb	r3, [r1, r3]
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <HAL_RCC_ClockConfig+0x270>)
 8002200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_RCC_ClockConfig+0x274>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe ff4a 	bl	80010a0 <HAL_InitTick>
 800220c:	4603      	mov	r3, r0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40022000 	.word	0x40022000
 800221c:	40021000 	.word	0x40021000
 8002220:	04c4b400 	.word	0x04c4b400
 8002224:	08004b3c 	.word	0x08004b3c
 8002228:	200000cc 	.word	0x200000cc
 800222c:	200000d0 	.word	0x200000d0

08002230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b04      	cmp	r3, #4
 8002240:	d102      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002242:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	e047      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d102      	bne.n	800225a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002254:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	e03e      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800225a:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b0c      	cmp	r3, #12
 8002264:	d136      	bne.n	80022d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	3301      	adds	r3, #1
 800227c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d10c      	bne.n	800229e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002284:	4a1a      	ldr	r2, [pc, #104]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	fbb2 f3f3 	udiv	r3, r2, r3
 800228c:	4a16      	ldr	r2, [pc, #88]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800228e:	68d2      	ldr	r2, [r2, #12]
 8002290:	0a12      	lsrs	r2, r2, #8
 8002292:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	617b      	str	r3, [r7, #20]
      break;
 800229c:	e00c      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800229e:	4a13      	ldr	r2, [pc, #76]	; (80022ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022a8:	68d2      	ldr	r2, [r2, #12]
 80022aa:	0a12      	lsrs	r2, r2, #8
 80022ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022b0:	fb02 f303 	mul.w	r3, r2, r3
 80022b4:	617b      	str	r3, [r7, #20]
      break;
 80022b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0e5b      	lsrs	r3, r3, #25
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	3301      	adds	r3, #1
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	e001      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022d8:	693b      	ldr	r3, [r7, #16]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	00f42400 	.word	0x00f42400
 80022f0:	016e3600 	.word	0x016e3600

080022f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_RCC_GetHCLKFreq+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	200000cc 	.word	0x200000cc

0800230c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002310:	f7ff fff0 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 8002314:	4602      	mov	r2, r0
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4904      	ldr	r1, [pc, #16]	; (8002334 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	08004b4c 	.word	0x08004b4c

08002338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800233c:	f7ff ffda 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	0adb      	lsrs	r3, r3, #11
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	4904      	ldr	r1, [pc, #16]	; (8002360 <HAL_RCC_GetPCLK2Freq+0x28>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	08004b4c 	.word	0x08004b4c

08002364 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3301      	adds	r3, #1
 8002380:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d10c      	bne.n	80023a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002388:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002392:	68d2      	ldr	r2, [r2, #12]
 8002394:	0a12      	lsrs	r2, r2, #8
 8002396:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	617b      	str	r3, [r7, #20]
    break;
 80023a0:	e00c      	b.n	80023bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023ac:	68d2      	ldr	r2, [r2, #12]
 80023ae:	0a12      	lsrs	r2, r2, #8
 80023b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
    break;
 80023ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0e5b      	lsrs	r3, r3, #25
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	3301      	adds	r3, #1
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80023d6:	687b      	ldr	r3, [r7, #4]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	40021000 	.word	0x40021000
 80023e8:	016e3600 	.word	0x016e3600
 80023ec:	00f42400 	.word	0x00f42400

080023f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023f8:	2300      	movs	r3, #0
 80023fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023fc:	2300      	movs	r3, #0
 80023fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 8098 	beq.w	800253e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002412:	4b43      	ldr	r3, [pc, #268]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10d      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	4b40      	ldr	r3, [pc, #256]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	4a3f      	ldr	r2, [pc, #252]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	6593      	str	r3, [r2, #88]	; 0x58
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002436:	2301      	movs	r3, #1
 8002438:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800243a:	4b3a      	ldr	r3, [pc, #232]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a39      	ldr	r2, [pc, #228]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002444:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002446:	f7fe fe77 	bl	8001138 <HAL_GetTick>
 800244a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800244c:	e009      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244e:	f7fe fe73 	bl	8001138 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d902      	bls.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	74fb      	strb	r3, [r7, #19]
        break;
 8002460:	e005      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002462:	4b30      	ldr	r3, [pc, #192]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0ef      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800246e:	7cfb      	ldrb	r3, [r7, #19]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d159      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002474:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d01e      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	429a      	cmp	r2, r3
 800248e:	d019      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002490:	4b23      	ldr	r3, [pc, #140]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800249c:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800249e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a2:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024bc:	4a18      	ldr	r2, [pc, #96]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d016      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7fe fe33 	bl	8001138 <HAL_GetTick>
 80024d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d4:	e00b      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe fe2f 	bl	8001138 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d902      	bls.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	74fb      	strb	r3, [r7, #19]
            break;
 80024ec:	e006      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ec      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10b      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002510:	4903      	ldr	r1, [pc, #12]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002518:	e008      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	74bb      	strb	r3, [r7, #18]
 800251e:	e005      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002520:	40021000 	.word	0x40021000
 8002524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800252c:	7c7b      	ldrb	r3, [r7, #17]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d105      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002532:	4ba7      	ldr	r3, [pc, #668]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	4aa6      	ldr	r2, [pc, #664]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800254a:	4ba1      	ldr	r3, [pc, #644]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002550:	f023 0203 	bic.w	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	499d      	ldr	r1, [pc, #628]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800256c:	4b98      	ldr	r3, [pc, #608]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	f023 020c 	bic.w	r2, r3, #12
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	4995      	ldr	r1, [pc, #596]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800258e:	4b90      	ldr	r3, [pc, #576]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002594:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	498c      	ldr	r1, [pc, #560]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025b0:	4b87      	ldr	r3, [pc, #540]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	4984      	ldr	r1, [pc, #528]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025d2:	4b7f      	ldr	r3, [pc, #508]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	497b      	ldr	r1, [pc, #492]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025f4:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	4973      	ldr	r1, [pc, #460]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002616:	4b6e      	ldr	r3, [pc, #440]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	496a      	ldr	r1, [pc, #424]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002638:	4b65      	ldr	r3, [pc, #404]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	4962      	ldr	r1, [pc, #392]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800265a:	4b5d      	ldr	r3, [pc, #372]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	4959      	ldr	r1, [pc, #356]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800267c:	4b54      	ldr	r3, [pc, #336]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002682:	f023 0203 	bic.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268a:	4951      	ldr	r1, [pc, #324]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800269e:	4b4c      	ldr	r3, [pc, #304]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	4948      	ldr	r1, [pc, #288]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d015      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026c0:	4b43      	ldr	r3, [pc, #268]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4940      	ldr	r1, [pc, #256]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026de:	d105      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e0:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4a3a      	ldr	r2, [pc, #232]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d015      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026f8:	4b35      	ldr	r3, [pc, #212]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002706:	4932      	ldr	r1, [pc, #200]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002716:	d105      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002718:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a2c      	ldr	r2, [pc, #176]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002722:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d015      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002730:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	4924      	ldr	r1, [pc, #144]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274e:	d105      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002750:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a1e      	ldr	r2, [pc, #120]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800275a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002768:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	4916      	ldr	r1, [pc, #88]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002786:	d105      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002792:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d019      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4908      	ldr	r1, [pc, #32]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027be:	d109      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a02      	ldr	r2, [pc, #8]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ca:	60d3      	str	r3, [r2, #12]
 80027cc:	e002      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d015      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027e0:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	4926      	ldr	r1, [pc, #152]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027fe:	d105      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002800:	4b21      	ldr	r3, [pc, #132]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4a20      	ldr	r2, [pc, #128]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d015      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002826:	4918      	ldr	r1, [pc, #96]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002836:	d105      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800283e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002842:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d015      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002852:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002856:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	490a      	ldr	r1, [pc, #40]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800286e:	d105      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a04      	ldr	r2, [pc, #16]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800287a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800287c:	7cbb      	ldrb	r3, [r7, #18]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000

0800288c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e09d      	b.n	80029da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d108      	bne.n	80028b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ae:	d009      	beq.n	80028c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
 80028b6:	e005      	b.n	80028c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7fe faac 	bl	8000e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002904:	d902      	bls.n	800290c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	e002      	b.n	8002912 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800290c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002910:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800291a:	d007      	beq.n	800292c <HAL_SPI_Init+0xa0>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002924:	d002      	beq.n	800292c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296e:	ea42 0103 	orr.w	r1, r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	0c1b      	lsrs	r3, r3, #16
 8002988:	f003 0204 	and.w	r2, r3, #4
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	f003 0310 	and.w	r3, r3, #16
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80029a8:	ea42 0103 	orr.w	r1, r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029fc:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a04:	7dbb      	ldrb	r3, [r7, #22]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d00d      	beq.n	8002a26 <HAL_SPI_TransmitReceive_IT+0x42>
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a10:	d106      	bne.n	8002a20 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d102      	bne.n	8002a20 <HAL_SPI_TransmitReceive_IT+0x3c>
 8002a1a:	7dbb      	ldrb	r3, [r7, #22]
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d002      	beq.n	8002a26 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
 8002a22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a24:	e07d      	b.n	8002b22 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_SPI_TransmitReceive_IT+0x54>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_SPI_TransmitReceive_IT+0x54>
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d102      	bne.n	8002a3e <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a3c:	e071      	b.n	8002b22 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_SPI_TransmitReceive_IT+0x68>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e06b      	b.n	8002b24 <HAL_SPI_TransmitReceive_IT+0x140>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d003      	beq.n	8002a68 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2205      	movs	r2, #5
 8002a64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	887a      	ldrh	r2, [r7, #2]
 8002a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	887a      	ldrh	r2, [r7, #2]
 8002a8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	887a      	ldrh	r2, [r7, #2]
 8002a92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a9e:	d906      	bls.n	8002aae <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4a23      	ldr	r2, [pc, #140]	; (8002b30 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002aa4:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002aaa:	651a      	str	r2, [r3, #80]	; 0x50
 8002aac:	e005      	b.n	8002aba <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4a21      	ldr	r2, [pc, #132]	; (8002b38 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002ab2:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <HAL_SPI_TransmitReceive_IT+0x158>)
 8002ab8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ac2:	d802      	bhi.n	8002aca <HAL_SPI_TransmitReceive_IT+0xe6>
 8002ac4:	887b      	ldrh	r3, [r7, #2]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d908      	bls.n	8002adc <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	e007      	b.n	8002aec <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002aea:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b40      	cmp	r3, #64	; 0x40
 8002af8:	d007      	beq.n	8002b0a <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b08:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002b20:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	08002ecb 	.word	0x08002ecb
 8002b34:	08002f31 	.word	0x08002f31
 8002b38:	08002d7b 	.word	0x08002d7b
 8002b3c:	08002e39 	.word	0x08002e39

08002b40 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10e      	bne.n	8002b80 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d009      	beq.n	8002b80 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	4798      	blx	r3
    return;
 8002b7e:	e0ce      	b.n	8002d1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HAL_SPI_IRQHandler+0x5e>
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d004      	beq.n	8002b9e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
    return;
 8002b9c:	e0bf      	b.n	8002d1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <HAL_SPI_IRQHandler+0x7e>
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d105      	bne.n	8002bbe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80b0 	beq.w	8002d1e <HAL_SPI_IRQHandler+0x1de>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80aa 	beq.w	8002d1e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d023      	beq.n	8002c1c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d011      	beq.n	8002c04 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be4:	f043 0204 	orr.w	r2, r3, #4
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	e00b      	b.n	8002c1c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]
        return;
 8002c1a:	e080      	b.n	8002d1e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d014      	beq.n	8002c50 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00c      	beq.n	8002c74 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5e:	f043 0208 	orr.w	r2, r3, #8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d04f      	beq.n	8002d1c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c8a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <HAL_SPI_IRQHandler+0x168>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d034      	beq.n	8002d12 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0203 	bic.w	r2, r2, #3
 8002cb6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d011      	beq.n	8002ce4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc4:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <HAL_SPI_IRQHandler+0x1e4>)
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe fb70 	bl	80013b2 <HAL_DMA_Abort_IT>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d016      	beq.n	8002d1a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf0:	4a0c      	ldr	r2, [pc, #48]	; (8002d24 <HAL_SPI_IRQHandler+0x1e4>)
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe fb5a 	bl	80013b2 <HAL_DMA_Abort_IT>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002d10:	e003      	b.n	8002d1a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f812 	bl	8002d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002d18:	e000      	b.n	8002d1c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002d1a:	bf00      	nop
    return;
 8002d1c:	bf00      	nop
  }
}
 8002d1e:	3720      	adds	r7, #32
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	08002d51 	.word	0x08002d51

08002d28 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f7ff ffe5 	bl	8002d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d923      	bls.n	8002dd6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	1c9a      	adds	r2, r3, #2
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b02      	subs	r3, #2
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d11f      	bne.n	8002e04 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	e016      	b.n	8002e04 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f103 020c 	add.w	r2, r3, #12
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	7812      	ldrb	r2, [r2, #0]
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10f      	bne.n	8002e30 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e1e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fa14 	bl	8003258 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d912      	bls.n	8002e70 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4e:	881a      	ldrh	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	1c9a      	adds	r2, r3, #2
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b02      	subs	r3, #2
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e6e:	e012      	b.n	8002e96 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	330c      	adds	r3, #12
 8002e7a:	7812      	ldrb	r2, [r2, #0]
 8002e7c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d110      	bne.n	8002ec2 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eae:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f9cb 	bl	8003258 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	b292      	uxth	r2, r2
 8002ede:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	1c9a      	adds	r2, r3, #2
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10f      	bne.n	8002f28 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f16:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d102      	bne.n	8002f28 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f998 	bl	8003258 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	881a      	ldrh	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	1c9a      	adds	r2, r3, #2
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d110      	bne.n	8002f88 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f74:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f968 	bl	8003258 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fa0:	f7fe f8ca 	bl	8001138 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fb0:	f7fe f8c2 	bl	8001138 <HAL_GetTick>
 8002fb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	015b      	lsls	r3, r3, #5
 8002fbc:	0d1b      	lsrs	r3, r3, #20
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	fb02 f303 	mul.w	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fc6:	e054      	b.n	8003072 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fce:	d050      	beq.n	8003072 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fd0:	f7fe f8b2 	bl	8001138 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d902      	bls.n	8002fe6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d13d      	bne.n	8003062 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ff4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ffe:	d111      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003008:	d004      	beq.n	8003014 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003012:	d107      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003022:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302c:	d10f      	bne.n	800304e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800304c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e017      	b.n	8003092 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	3b01      	subs	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4013      	ands	r3, r2
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	bf0c      	ite	eq
 8003082:	2301      	moveq	r3, #1
 8003084:	2300      	movne	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	429a      	cmp	r2, r3
 800308e:	d19b      	bne.n	8002fc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3720      	adds	r7, #32
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	200000cc 	.word	0x200000cc

080030a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80030b2:	f7fe f841 	bl	8001138 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	4413      	add	r3, r2
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80030c2:	f7fe f839 	bl	8001138 <HAL_GetTick>
 80030c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	330c      	adds	r3, #12
 80030ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030d0:	4b3d      	ldr	r3, [pc, #244]	; (80031c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00da      	lsls	r2, r3, #3
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	0d1b      	lsrs	r3, r3, #20
 80030e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80030e8:	e060      	b.n	80031ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030f0:	d107      	bne.n	8003102 <SPI_WaitFifoStateUntilTimeout+0x62>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003100:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d050      	beq.n	80031ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800310a:	f7fe f815 	bl	8001138 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003116:	429a      	cmp	r2, r3
 8003118:	d902      	bls.n	8003120 <SPI_WaitFifoStateUntilTimeout+0x80>
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	2b00      	cmp	r3, #0
 800311e:	d13d      	bne.n	800319c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800312e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003138:	d111      	bne.n	800315e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003142:	d004      	beq.n	800314e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314c:	d107      	bne.n	800315e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800315c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003166:	d10f      	bne.n	8003188 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003186:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e010      	b.n	80031be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	4013      	ands	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d196      	bne.n	80030ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3728      	adds	r7, #40	; 0x28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	200000cc 	.word	0x200000cc

080031cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2200      	movs	r2, #0
 80031e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f7ff ff5b 	bl	80030a0 <SPI_WaitFifoStateUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e027      	b.n	8003250 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2200      	movs	r2, #0
 8003208:	2180      	movs	r1, #128	; 0x80
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7ff fec0 	bl	8002f90 <SPI_WaitFlagStateUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321a:	f043 0220 	orr.w	r2, r3, #32
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e014      	b.n	8003250 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2200      	movs	r2, #0
 800322e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f7ff ff34 	bl	80030a0 <SPI_WaitFifoStateUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003242:	f043 0220 	orr.w	r2, r3, #32
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e000      	b.n	8003250 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003260:	f7fd ff6a 	bl	8001138 <HAL_GetTick>
 8003264:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0220 	bic.w	r2, r2, #32
 8003274:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	2164      	movs	r1, #100	; 0x64
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff ffa6 	bl	80031cc <SPI_EndRxTxTransaction>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328a:	f043 0220 	orr.w	r2, r3, #32
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003296:	2b00      	cmp	r3, #0
 8003298:	d115      	bne.n	80032c6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d107      	bne.n	80032b6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff fd3a 	bl	8002d28 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80032b4:	e00e      	b.n	80032d4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd fd1c 	bl	8000cfc <HAL_SPI_TxRxCpltCallback>
}
 80032c4:	e006      	b.n	80032d4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff fd34 	bl	8002d3c <HAL_SPI_ErrorCallback>
}
 80032d4:	bf00      	nop
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e049      	b.n	8003382 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fd fde6 	bl	8000ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3304      	adds	r3, #4
 8003318:	4619      	mov	r1, r3
 800331a:	4610      	mov	r0, r2
 800331c:	f000 fb3c 	bl	8003998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d001      	beq.n	80033a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e054      	b.n	800344e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a26      	ldr	r2, [pc, #152]	; (800345c <HAL_TIM_Base_Start_IT+0xd0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d022      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d01d      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a22      	ldr	r2, [pc, #136]	; (8003460 <HAL_TIM_Base_Start_IT+0xd4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d018      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a21      	ldr	r2, [pc, #132]	; (8003464 <HAL_TIM_Base_Start_IT+0xd8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d013      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1f      	ldr	r2, [pc, #124]	; (8003468 <HAL_TIM_Base_Start_IT+0xdc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00e      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1e      	ldr	r2, [pc, #120]	; (800346c <HAL_TIM_Base_Start_IT+0xe0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <HAL_TIM_Base_Start_IT+0xe4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x80>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1b      	ldr	r2, [pc, #108]	; (8003474 <HAL_TIM_Base_Start_IT+0xe8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d115      	bne.n	8003438 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_TIM_Base_Start_IT+0xec>)
 8003414:	4013      	ands	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b06      	cmp	r3, #6
 800341c:	d015      	beq.n	800344a <HAL_TIM_Base_Start_IT+0xbe>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003424:	d011      	beq.n	800344a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003436:	e008      	b.n	800344a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	e000      	b.n	800344c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	40000c00 	.word	0x40000c00
 800346c:	40013400 	.word	0x40013400
 8003470:	40014000 	.word	0x40014000
 8003474:	40015000 	.word	0x40015000
 8003478:	00010007 	.word	0x00010007

0800347c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d020      	beq.n	80034e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01b      	beq.n	80034e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0202 	mvn.w	r2, #2
 80034b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fa48 	bl	800395c <HAL_TIM_IC_CaptureCallback>
 80034cc:	e005      	b.n	80034da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fa3a 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fa4b 	bl	8003970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d020      	beq.n	800352c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01b      	beq.n	800352c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0204 	mvn.w	r2, #4
 80034fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa22 	bl	800395c <HAL_TIM_IC_CaptureCallback>
 8003518:	e005      	b.n	8003526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fa14 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fa25 	bl	8003970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d020      	beq.n	8003578 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01b      	beq.n	8003578 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0208 	mvn.w	r2, #8
 8003548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2204      	movs	r2, #4
 800354e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f9fc 	bl	800395c <HAL_TIM_IC_CaptureCallback>
 8003564:	e005      	b.n	8003572 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f9ee 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f9ff 	bl	8003970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	d020      	beq.n	80035c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01b      	beq.n	80035c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0210 	mvn.w	r2, #16
 8003594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2208      	movs	r2, #8
 800359a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f9d6 	bl	800395c <HAL_TIM_IC_CaptureCallback>
 80035b0:	e005      	b.n	80035be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f9c8 	bl	8003948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f9d9 	bl	8003970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00c      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0201 	mvn.w	r2, #1
 80035e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fb68 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d104      	bne.n	80035fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00c      	beq.n	8003616 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800360e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fbb1 	bl	8003d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00c      	beq.n	800363a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fba9 	bl	8003d8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00c      	beq.n	800365e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f993 	bl	8003984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00c      	beq.n	8003682 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f06f 0220 	mvn.w	r2, #32
 800367a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fb71 	bl	8003d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00c      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800369e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fb7d 	bl	8003da0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00c      	beq.n	80036ca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80036c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fb75 	bl	8003db4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00c      	beq.n	80036ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80036e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fb6d 	bl	8003dc8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00c      	beq.n	8003712 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800370a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fb65 	bl	8003ddc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_TIM_ConfigClockSource+0x1c>
 8003734:	2302      	movs	r3, #2
 8003736:	e0f6      	b.n	8003926 <HAL_TIM_ConfigClockSource+0x20a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003756:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800375a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a6f      	ldr	r2, [pc, #444]	; (8003930 <HAL_TIM_ConfigClockSource+0x214>)
 8003772:	4293      	cmp	r3, r2
 8003774:	f000 80c1 	beq.w	80038fa <HAL_TIM_ConfigClockSource+0x1de>
 8003778:	4a6d      	ldr	r2, [pc, #436]	; (8003930 <HAL_TIM_ConfigClockSource+0x214>)
 800377a:	4293      	cmp	r3, r2
 800377c:	f200 80c6 	bhi.w	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 8003780:	4a6c      	ldr	r2, [pc, #432]	; (8003934 <HAL_TIM_ConfigClockSource+0x218>)
 8003782:	4293      	cmp	r3, r2
 8003784:	f000 80b9 	beq.w	80038fa <HAL_TIM_ConfigClockSource+0x1de>
 8003788:	4a6a      	ldr	r2, [pc, #424]	; (8003934 <HAL_TIM_ConfigClockSource+0x218>)
 800378a:	4293      	cmp	r3, r2
 800378c:	f200 80be 	bhi.w	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 8003790:	4a69      	ldr	r2, [pc, #420]	; (8003938 <HAL_TIM_ConfigClockSource+0x21c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	f000 80b1 	beq.w	80038fa <HAL_TIM_ConfigClockSource+0x1de>
 8003798:	4a67      	ldr	r2, [pc, #412]	; (8003938 <HAL_TIM_ConfigClockSource+0x21c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	f200 80b6 	bhi.w	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 80037a0:	4a66      	ldr	r2, [pc, #408]	; (800393c <HAL_TIM_ConfigClockSource+0x220>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	f000 80a9 	beq.w	80038fa <HAL_TIM_ConfigClockSource+0x1de>
 80037a8:	4a64      	ldr	r2, [pc, #400]	; (800393c <HAL_TIM_ConfigClockSource+0x220>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	f200 80ae 	bhi.w	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 80037b0:	4a63      	ldr	r2, [pc, #396]	; (8003940 <HAL_TIM_ConfigClockSource+0x224>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	f000 80a1 	beq.w	80038fa <HAL_TIM_ConfigClockSource+0x1de>
 80037b8:	4a61      	ldr	r2, [pc, #388]	; (8003940 <HAL_TIM_ConfigClockSource+0x224>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	f200 80a6 	bhi.w	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 80037c0:	4a60      	ldr	r2, [pc, #384]	; (8003944 <HAL_TIM_ConfigClockSource+0x228>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	f000 8099 	beq.w	80038fa <HAL_TIM_ConfigClockSource+0x1de>
 80037c8:	4a5e      	ldr	r2, [pc, #376]	; (8003944 <HAL_TIM_ConfigClockSource+0x228>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	f200 809e 	bhi.w	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 80037d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80037d4:	f000 8091 	beq.w	80038fa <HAL_TIM_ConfigClockSource+0x1de>
 80037d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80037dc:	f200 8096 	bhi.w	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 80037e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037e4:	f000 8089 	beq.w	80038fa <HAL_TIM_ConfigClockSource+0x1de>
 80037e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ec:	f200 808e 	bhi.w	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 80037f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f4:	d03e      	beq.n	8003874 <HAL_TIM_ConfigClockSource+0x158>
 80037f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fa:	f200 8087 	bhi.w	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 80037fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003802:	f000 8086 	beq.w	8003912 <HAL_TIM_ConfigClockSource+0x1f6>
 8003806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380a:	d87f      	bhi.n	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 800380c:	2b70      	cmp	r3, #112	; 0x70
 800380e:	d01a      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0x12a>
 8003810:	2b70      	cmp	r3, #112	; 0x70
 8003812:	d87b      	bhi.n	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 8003814:	2b60      	cmp	r3, #96	; 0x60
 8003816:	d050      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0x19e>
 8003818:	2b60      	cmp	r3, #96	; 0x60
 800381a:	d877      	bhi.n	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 800381c:	2b50      	cmp	r3, #80	; 0x50
 800381e:	d03c      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x17e>
 8003820:	2b50      	cmp	r3, #80	; 0x50
 8003822:	d873      	bhi.n	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d058      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x1be>
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	d86f      	bhi.n	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 800382c:	2b30      	cmp	r3, #48	; 0x30
 800382e:	d064      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0x1de>
 8003830:	2b30      	cmp	r3, #48	; 0x30
 8003832:	d86b      	bhi.n	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 8003834:	2b20      	cmp	r3, #32
 8003836:	d060      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0x1de>
 8003838:	2b20      	cmp	r3, #32
 800383a:	d867      	bhi.n	800390c <HAL_TIM_ConfigClockSource+0x1f0>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d05c      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0x1de>
 8003840:	2b10      	cmp	r3, #16
 8003842:	d05a      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0x1de>
 8003844:	e062      	b.n	800390c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003856:	f000 f9cf 	bl	8003bf8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003868:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	609a      	str	r2, [r3, #8]
      break;
 8003872:	e04f      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003884:	f000 f9b8 	bl	8003bf8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003896:	609a      	str	r2, [r3, #8]
      break;
 8003898:	e03c      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a6:	461a      	mov	r2, r3
 80038a8:	f000 f92a 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2150      	movs	r1, #80	; 0x50
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f983 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 80038b8:	e02c      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038c6:	461a      	mov	r2, r3
 80038c8:	f000 f949 	bl	8003b5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2160      	movs	r1, #96	; 0x60
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 f973 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 80038d8:	e01c      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e6:	461a      	mov	r2, r3
 80038e8:	f000 f90a 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2140      	movs	r1, #64	; 0x40
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f963 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 80038f8:	e00c      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4619      	mov	r1, r3
 8003904:	4610      	mov	r0, r2
 8003906:	f000 f95a 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 800390a:	e003      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
      break;
 8003910:	e000      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003912:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	00100070 	.word	0x00100070
 8003934:	00100060 	.word	0x00100060
 8003938:	00100050 	.word	0x00100050
 800393c:	00100040 	.word	0x00100040
 8003940:	00100030 	.word	0x00100030
 8003944:	00100020 	.word	0x00100020

08003948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a4c      	ldr	r2, [pc, #304]	; (8003adc <TIM_Base_SetConfig+0x144>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d017      	beq.n	80039e0 <TIM_Base_SetConfig+0x48>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d013      	beq.n	80039e0 <TIM_Base_SetConfig+0x48>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a49      	ldr	r2, [pc, #292]	; (8003ae0 <TIM_Base_SetConfig+0x148>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00f      	beq.n	80039e0 <TIM_Base_SetConfig+0x48>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a48      	ldr	r2, [pc, #288]	; (8003ae4 <TIM_Base_SetConfig+0x14c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00b      	beq.n	80039e0 <TIM_Base_SetConfig+0x48>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a47      	ldr	r2, [pc, #284]	; (8003ae8 <TIM_Base_SetConfig+0x150>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d007      	beq.n	80039e0 <TIM_Base_SetConfig+0x48>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a46      	ldr	r2, [pc, #280]	; (8003aec <TIM_Base_SetConfig+0x154>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d003      	beq.n	80039e0 <TIM_Base_SetConfig+0x48>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a45      	ldr	r2, [pc, #276]	; (8003af0 <TIM_Base_SetConfig+0x158>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d108      	bne.n	80039f2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a39      	ldr	r2, [pc, #228]	; (8003adc <TIM_Base_SetConfig+0x144>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d023      	beq.n	8003a42 <TIM_Base_SetConfig+0xaa>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a00:	d01f      	beq.n	8003a42 <TIM_Base_SetConfig+0xaa>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a36      	ldr	r2, [pc, #216]	; (8003ae0 <TIM_Base_SetConfig+0x148>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01b      	beq.n	8003a42 <TIM_Base_SetConfig+0xaa>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a35      	ldr	r2, [pc, #212]	; (8003ae4 <TIM_Base_SetConfig+0x14c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d017      	beq.n	8003a42 <TIM_Base_SetConfig+0xaa>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a34      	ldr	r2, [pc, #208]	; (8003ae8 <TIM_Base_SetConfig+0x150>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <TIM_Base_SetConfig+0xaa>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a33      	ldr	r2, [pc, #204]	; (8003aec <TIM_Base_SetConfig+0x154>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00f      	beq.n	8003a42 <TIM_Base_SetConfig+0xaa>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a33      	ldr	r2, [pc, #204]	; (8003af4 <TIM_Base_SetConfig+0x15c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00b      	beq.n	8003a42 <TIM_Base_SetConfig+0xaa>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a32      	ldr	r2, [pc, #200]	; (8003af8 <TIM_Base_SetConfig+0x160>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d007      	beq.n	8003a42 <TIM_Base_SetConfig+0xaa>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a31      	ldr	r2, [pc, #196]	; (8003afc <TIM_Base_SetConfig+0x164>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d003      	beq.n	8003a42 <TIM_Base_SetConfig+0xaa>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a2c      	ldr	r2, [pc, #176]	; (8003af0 <TIM_Base_SetConfig+0x158>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d108      	bne.n	8003a54 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a18      	ldr	r2, [pc, #96]	; (8003adc <TIM_Base_SetConfig+0x144>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <TIM_Base_SetConfig+0x110>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a1a      	ldr	r2, [pc, #104]	; (8003aec <TIM_Base_SetConfig+0x154>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00f      	beq.n	8003aa8 <TIM_Base_SetConfig+0x110>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <TIM_Base_SetConfig+0x15c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <TIM_Base_SetConfig+0x110>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a19      	ldr	r2, [pc, #100]	; (8003af8 <TIM_Base_SetConfig+0x160>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_Base_SetConfig+0x110>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a18      	ldr	r2, [pc, #96]	; (8003afc <TIM_Base_SetConfig+0x164>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_Base_SetConfig+0x110>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <TIM_Base_SetConfig+0x158>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d103      	bne.n	8003ab0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d105      	bne.n	8003ace <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f023 0201 	bic.w	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	611a      	str	r2, [r3, #16]
  }
}
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800
 8003ae8:	40000c00 	.word	0x40000c00
 8003aec:	40013400 	.word	0x40013400
 8003af0:	40015000 	.word	0x40015000
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40014400 	.word	0x40014400
 8003afc:	40014800 	.word	0x40014800

08003b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 0201 	bic.w	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 030a 	bic.w	r3, r3, #10
 8003b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b087      	sub	sp, #28
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f023 0210 	bic.w	r2, r3, #16
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	031b      	lsls	r3, r3, #12
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f043 0307 	orr.w	r3, r3, #7
 8003be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	609a      	str	r2, [r3, #8]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	021a      	lsls	r2, r3, #8
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	609a      	str	r2, [r3, #8]
}
 8003c2c:	bf00      	nop
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e074      	b.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a34      	ldr	r2, [pc, #208]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d009      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a33      	ldr	r2, [pc, #204]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a31      	ldr	r2, [pc, #196]	; (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d108      	bne.n	8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003caa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a21      	ldr	r2, [pc, #132]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d022      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd0:	d01d      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1f      	ldr	r2, [pc, #124]	; (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d018      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d013      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a1c      	ldr	r2, [pc, #112]	; (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00e      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d009      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a18      	ldr	r2, [pc, #96]	; (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a11      	ldr	r2, [pc, #68]	; (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d10c      	bne.n	8003d28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40012c00 	.word	0x40012c00
 8003d4c:	40013400 	.word	0x40013400
 8003d50:	40015000 	.word	0x40015000
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00
 8003d60:	40014000 	.word	0x40014000

08003d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e042      	b.n	8003e88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fc ffb9 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2224      	movs	r2, #36	; 0x24
 8003e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fb24 	bl	8004488 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f825 	bl	8003e90 <UART_SetConfig>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e01b      	b.n	8003e88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fba3 	bl	80045cc <UART_CheckIdleState>
 8003e86:	4603      	mov	r3, r0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e94:	b08c      	sub	sp, #48	; 0x30
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4baa      	ldr	r3, [pc, #680]	; (8004168 <UART_SetConfig+0x2d8>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a9f      	ldr	r2, [pc, #636]	; (800416c <UART_SetConfig+0x2dc>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003f06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f10:	430b      	orrs	r3, r1
 8003f12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	f023 010f 	bic.w	r1, r3, #15
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a90      	ldr	r2, [pc, #576]	; (8004170 <UART_SetConfig+0x2e0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d125      	bne.n	8003f80 <UART_SetConfig+0xf0>
 8003f34:	4b8f      	ldr	r3, [pc, #572]	; (8004174 <UART_SetConfig+0x2e4>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d81a      	bhi.n	8003f78 <UART_SetConfig+0xe8>
 8003f42:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <UART_SetConfig+0xb8>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f69 	.word	0x08003f69
 8003f50:	08003f61 	.word	0x08003f61
 8003f54:	08003f71 	.word	0x08003f71
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f5e:	e116      	b.n	800418e <UART_SetConfig+0x2fe>
 8003f60:	2302      	movs	r3, #2
 8003f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f66:	e112      	b.n	800418e <UART_SetConfig+0x2fe>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f6e:	e10e      	b.n	800418e <UART_SetConfig+0x2fe>
 8003f70:	2308      	movs	r3, #8
 8003f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f76:	e10a      	b.n	800418e <UART_SetConfig+0x2fe>
 8003f78:	2310      	movs	r3, #16
 8003f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f7e:	e106      	b.n	800418e <UART_SetConfig+0x2fe>
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a7c      	ldr	r2, [pc, #496]	; (8004178 <UART_SetConfig+0x2e8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d138      	bne.n	8003ffc <UART_SetConfig+0x16c>
 8003f8a:	4b7a      	ldr	r3, [pc, #488]	; (8004174 <UART_SetConfig+0x2e4>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b0c      	cmp	r3, #12
 8003f96:	d82d      	bhi.n	8003ff4 <UART_SetConfig+0x164>
 8003f98:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <UART_SetConfig+0x110>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fd5 	.word	0x08003fd5
 8003fa4:	08003ff5 	.word	0x08003ff5
 8003fa8:	08003ff5 	.word	0x08003ff5
 8003fac:	08003ff5 	.word	0x08003ff5
 8003fb0:	08003fe5 	.word	0x08003fe5
 8003fb4:	08003ff5 	.word	0x08003ff5
 8003fb8:	08003ff5 	.word	0x08003ff5
 8003fbc:	08003ff5 	.word	0x08003ff5
 8003fc0:	08003fdd 	.word	0x08003fdd
 8003fc4:	08003ff5 	.word	0x08003ff5
 8003fc8:	08003ff5 	.word	0x08003ff5
 8003fcc:	08003ff5 	.word	0x08003ff5
 8003fd0:	08003fed 	.word	0x08003fed
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fda:	e0d8      	b.n	800418e <UART_SetConfig+0x2fe>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fe2:	e0d4      	b.n	800418e <UART_SetConfig+0x2fe>
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fea:	e0d0      	b.n	800418e <UART_SetConfig+0x2fe>
 8003fec:	2308      	movs	r3, #8
 8003fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ff2:	e0cc      	b.n	800418e <UART_SetConfig+0x2fe>
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ffa:	e0c8      	b.n	800418e <UART_SetConfig+0x2fe>
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a5e      	ldr	r2, [pc, #376]	; (800417c <UART_SetConfig+0x2ec>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d125      	bne.n	8004052 <UART_SetConfig+0x1c2>
 8004006:	4b5b      	ldr	r3, [pc, #364]	; (8004174 <UART_SetConfig+0x2e4>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004010:	2b30      	cmp	r3, #48	; 0x30
 8004012:	d016      	beq.n	8004042 <UART_SetConfig+0x1b2>
 8004014:	2b30      	cmp	r3, #48	; 0x30
 8004016:	d818      	bhi.n	800404a <UART_SetConfig+0x1ba>
 8004018:	2b20      	cmp	r3, #32
 800401a:	d00a      	beq.n	8004032 <UART_SetConfig+0x1a2>
 800401c:	2b20      	cmp	r3, #32
 800401e:	d814      	bhi.n	800404a <UART_SetConfig+0x1ba>
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <UART_SetConfig+0x19a>
 8004024:	2b10      	cmp	r3, #16
 8004026:	d008      	beq.n	800403a <UART_SetConfig+0x1aa>
 8004028:	e00f      	b.n	800404a <UART_SetConfig+0x1ba>
 800402a:	2300      	movs	r3, #0
 800402c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004030:	e0ad      	b.n	800418e <UART_SetConfig+0x2fe>
 8004032:	2302      	movs	r3, #2
 8004034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004038:	e0a9      	b.n	800418e <UART_SetConfig+0x2fe>
 800403a:	2304      	movs	r3, #4
 800403c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004040:	e0a5      	b.n	800418e <UART_SetConfig+0x2fe>
 8004042:	2308      	movs	r3, #8
 8004044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004048:	e0a1      	b.n	800418e <UART_SetConfig+0x2fe>
 800404a:	2310      	movs	r3, #16
 800404c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004050:	e09d      	b.n	800418e <UART_SetConfig+0x2fe>
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a4a      	ldr	r2, [pc, #296]	; (8004180 <UART_SetConfig+0x2f0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d125      	bne.n	80040a8 <UART_SetConfig+0x218>
 800405c:	4b45      	ldr	r3, [pc, #276]	; (8004174 <UART_SetConfig+0x2e4>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004066:	2bc0      	cmp	r3, #192	; 0xc0
 8004068:	d016      	beq.n	8004098 <UART_SetConfig+0x208>
 800406a:	2bc0      	cmp	r3, #192	; 0xc0
 800406c:	d818      	bhi.n	80040a0 <UART_SetConfig+0x210>
 800406e:	2b80      	cmp	r3, #128	; 0x80
 8004070:	d00a      	beq.n	8004088 <UART_SetConfig+0x1f8>
 8004072:	2b80      	cmp	r3, #128	; 0x80
 8004074:	d814      	bhi.n	80040a0 <UART_SetConfig+0x210>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <UART_SetConfig+0x1f0>
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d008      	beq.n	8004090 <UART_SetConfig+0x200>
 800407e:	e00f      	b.n	80040a0 <UART_SetConfig+0x210>
 8004080:	2300      	movs	r3, #0
 8004082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004086:	e082      	b.n	800418e <UART_SetConfig+0x2fe>
 8004088:	2302      	movs	r3, #2
 800408a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800408e:	e07e      	b.n	800418e <UART_SetConfig+0x2fe>
 8004090:	2304      	movs	r3, #4
 8004092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004096:	e07a      	b.n	800418e <UART_SetConfig+0x2fe>
 8004098:	2308      	movs	r3, #8
 800409a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800409e:	e076      	b.n	800418e <UART_SetConfig+0x2fe>
 80040a0:	2310      	movs	r3, #16
 80040a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040a6:	e072      	b.n	800418e <UART_SetConfig+0x2fe>
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a35      	ldr	r2, [pc, #212]	; (8004184 <UART_SetConfig+0x2f4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d12a      	bne.n	8004108 <UART_SetConfig+0x278>
 80040b2:	4b30      	ldr	r3, [pc, #192]	; (8004174 <UART_SetConfig+0x2e4>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c0:	d01a      	beq.n	80040f8 <UART_SetConfig+0x268>
 80040c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c6:	d81b      	bhi.n	8004100 <UART_SetConfig+0x270>
 80040c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040cc:	d00c      	beq.n	80040e8 <UART_SetConfig+0x258>
 80040ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d2:	d815      	bhi.n	8004100 <UART_SetConfig+0x270>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <UART_SetConfig+0x250>
 80040d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040dc:	d008      	beq.n	80040f0 <UART_SetConfig+0x260>
 80040de:	e00f      	b.n	8004100 <UART_SetConfig+0x270>
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040e6:	e052      	b.n	800418e <UART_SetConfig+0x2fe>
 80040e8:	2302      	movs	r3, #2
 80040ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ee:	e04e      	b.n	800418e <UART_SetConfig+0x2fe>
 80040f0:	2304      	movs	r3, #4
 80040f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040f6:	e04a      	b.n	800418e <UART_SetConfig+0x2fe>
 80040f8:	2308      	movs	r3, #8
 80040fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040fe:	e046      	b.n	800418e <UART_SetConfig+0x2fe>
 8004100:	2310      	movs	r3, #16
 8004102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004106:	e042      	b.n	800418e <UART_SetConfig+0x2fe>
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a17      	ldr	r2, [pc, #92]	; (800416c <UART_SetConfig+0x2dc>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d13a      	bne.n	8004188 <UART_SetConfig+0x2f8>
 8004112:	4b18      	ldr	r3, [pc, #96]	; (8004174 <UART_SetConfig+0x2e4>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800411c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004120:	d01a      	beq.n	8004158 <UART_SetConfig+0x2c8>
 8004122:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004126:	d81b      	bhi.n	8004160 <UART_SetConfig+0x2d0>
 8004128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800412c:	d00c      	beq.n	8004148 <UART_SetConfig+0x2b8>
 800412e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004132:	d815      	bhi.n	8004160 <UART_SetConfig+0x2d0>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <UART_SetConfig+0x2b0>
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	d008      	beq.n	8004150 <UART_SetConfig+0x2c0>
 800413e:	e00f      	b.n	8004160 <UART_SetConfig+0x2d0>
 8004140:	2300      	movs	r3, #0
 8004142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004146:	e022      	b.n	800418e <UART_SetConfig+0x2fe>
 8004148:	2302      	movs	r3, #2
 800414a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800414e:	e01e      	b.n	800418e <UART_SetConfig+0x2fe>
 8004150:	2304      	movs	r3, #4
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004156:	e01a      	b.n	800418e <UART_SetConfig+0x2fe>
 8004158:	2308      	movs	r3, #8
 800415a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800415e:	e016      	b.n	800418e <UART_SetConfig+0x2fe>
 8004160:	2310      	movs	r3, #16
 8004162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004166:	e012      	b.n	800418e <UART_SetConfig+0x2fe>
 8004168:	cfff69f3 	.word	0xcfff69f3
 800416c:	40008000 	.word	0x40008000
 8004170:	40013800 	.word	0x40013800
 8004174:	40021000 	.word	0x40021000
 8004178:	40004400 	.word	0x40004400
 800417c:	40004800 	.word	0x40004800
 8004180:	40004c00 	.word	0x40004c00
 8004184:	40005000 	.word	0x40005000
 8004188:	2310      	movs	r3, #16
 800418a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4aae      	ldr	r2, [pc, #696]	; (800444c <UART_SetConfig+0x5bc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	f040 8097 	bne.w	80042c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800419a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d823      	bhi.n	80041ea <UART_SetConfig+0x35a>
 80041a2:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <UART_SetConfig+0x318>)
 80041a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	080041eb 	.word	0x080041eb
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	080041eb 	.word	0x080041eb
 80041b8:	080041db 	.word	0x080041db
 80041bc:	080041eb 	.word	0x080041eb
 80041c0:	080041eb 	.word	0x080041eb
 80041c4:	080041eb 	.word	0x080041eb
 80041c8:	080041e3 	.word	0x080041e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041cc:	f7fe f89e 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 80041d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041d2:	e010      	b.n	80041f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d4:	4b9e      	ldr	r3, [pc, #632]	; (8004450 <UART_SetConfig+0x5c0>)
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80041d8:	e00d      	b.n	80041f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041da:	f7fe f829 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80041de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041e0:	e009      	b.n	80041f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80041e8:	e005      	b.n	80041f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80041f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 8130 	beq.w	800445e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	4a94      	ldr	r2, [pc, #592]	; (8004454 <UART_SetConfig+0x5c4>)
 8004204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004208:	461a      	mov	r2, r3
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004210:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4413      	add	r3, r2
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	429a      	cmp	r2, r3
 8004220:	d305      	bcc.n	800422e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	429a      	cmp	r2, r3
 800422c:	d903      	bls.n	8004236 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004234:	e113      	b.n	800445e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	2200      	movs	r2, #0
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	60fa      	str	r2, [r7, #12]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	4a84      	ldr	r2, [pc, #528]	; (8004454 <UART_SetConfig+0x5c4>)
 8004244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004248:	b29b      	uxth	r3, r3
 800424a:	2200      	movs	r2, #0
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004254:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004258:	f7fb ffde 	bl	8000218 <__aeabi_uldivmod>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	020b      	lsls	r3, r1, #8
 800426e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004272:	0202      	lsls	r2, r0, #8
 8004274:	6979      	ldr	r1, [r7, #20]
 8004276:	6849      	ldr	r1, [r1, #4]
 8004278:	0849      	lsrs	r1, r1, #1
 800427a:	2000      	movs	r0, #0
 800427c:	460c      	mov	r4, r1
 800427e:	4605      	mov	r5, r0
 8004280:	eb12 0804 	adds.w	r8, r2, r4
 8004284:	eb43 0905 	adc.w	r9, r3, r5
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	469a      	mov	sl, r3
 8004290:	4693      	mov	fp, r2
 8004292:	4652      	mov	r2, sl
 8004294:	465b      	mov	r3, fp
 8004296:	4640      	mov	r0, r8
 8004298:	4649      	mov	r1, r9
 800429a:	f7fb ffbd 	bl	8000218 <__aeabi_uldivmod>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4613      	mov	r3, r2
 80042a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ac:	d308      	bcc.n	80042c0 <UART_SetConfig+0x430>
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b4:	d204      	bcs.n	80042c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6a3a      	ldr	r2, [r7, #32]
 80042bc:	60da      	str	r2, [r3, #12]
 80042be:	e0ce      	b.n	800445e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80042c6:	e0ca      	b.n	800445e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d0:	d166      	bne.n	80043a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80042d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d827      	bhi.n	800432a <UART_SetConfig+0x49a>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <UART_SetConfig+0x450>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	08004305 	.word	0x08004305
 80042e4:	0800430d 	.word	0x0800430d
 80042e8:	08004315 	.word	0x08004315
 80042ec:	0800432b 	.word	0x0800432b
 80042f0:	0800431b 	.word	0x0800431b
 80042f4:	0800432b 	.word	0x0800432b
 80042f8:	0800432b 	.word	0x0800432b
 80042fc:	0800432b 	.word	0x0800432b
 8004300:	08004323 	.word	0x08004323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004304:	f7fe f802 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 8004308:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800430a:	e014      	b.n	8004336 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800430c:	f7fe f814 	bl	8002338 <HAL_RCC_GetPCLK2Freq>
 8004310:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004312:	e010      	b.n	8004336 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004314:	4b4e      	ldr	r3, [pc, #312]	; (8004450 <UART_SetConfig+0x5c0>)
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004318:	e00d      	b.n	8004336 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800431a:	f7fd ff89 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 800431e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004320:	e009      	b.n	8004336 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004328:	e005      	b.n	8004336 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004334:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8090 	beq.w	800445e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	4a44      	ldr	r2, [pc, #272]	; (8004454 <UART_SetConfig+0x5c4>)
 8004344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004348:	461a      	mov	r2, r3
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004350:	005a      	lsls	r2, r3, #1
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	085b      	lsrs	r3, r3, #1
 8004358:	441a      	add	r2, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004362:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	2b0f      	cmp	r3, #15
 8004368:	d916      	bls.n	8004398 <UART_SetConfig+0x508>
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004370:	d212      	bcs.n	8004398 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	b29b      	uxth	r3, r3
 8004376:	f023 030f 	bic.w	r3, r3, #15
 800437a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	085b      	lsrs	r3, r3, #1
 8004380:	b29b      	uxth	r3, r3
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	b29a      	uxth	r2, r3
 8004388:	8bfb      	ldrh	r3, [r7, #30]
 800438a:	4313      	orrs	r3, r2
 800438c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	8bfa      	ldrh	r2, [r7, #30]
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	e062      	b.n	800445e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800439e:	e05e      	b.n	800445e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d828      	bhi.n	80043fa <UART_SetConfig+0x56a>
 80043a8:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <UART_SetConfig+0x520>)
 80043aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ae:	bf00      	nop
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043dd 	.word	0x080043dd
 80043b8:	080043e5 	.word	0x080043e5
 80043bc:	080043fb 	.word	0x080043fb
 80043c0:	080043eb 	.word	0x080043eb
 80043c4:	080043fb 	.word	0x080043fb
 80043c8:	080043fb 	.word	0x080043fb
 80043cc:	080043fb 	.word	0x080043fb
 80043d0:	080043f3 	.word	0x080043f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d4:	f7fd ff9a 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 80043d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043da:	e014      	b.n	8004406 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043dc:	f7fd ffac 	bl	8002338 <HAL_RCC_GetPCLK2Freq>
 80043e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043e2:	e010      	b.n	8004406 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e4:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <UART_SetConfig+0x5c0>)
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043e8:	e00d      	b.n	8004406 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ea:	f7fd ff21 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80043ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043f0:	e009      	b.n	8004406 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043f8:	e005      	b.n	8004406 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004404:	bf00      	nop
    }

    if (pclk != 0U)
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	2b00      	cmp	r3, #0
 800440a:	d028      	beq.n	800445e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	4a10      	ldr	r2, [pc, #64]	; (8004454 <UART_SetConfig+0x5c4>)
 8004412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004416:	461a      	mov	r2, r3
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	fbb3 f2f2 	udiv	r2, r3, r2
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	085b      	lsrs	r3, r3, #1
 8004424:	441a      	add	r2, r3
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	fbb2 f3f3 	udiv	r3, r2, r3
 800442e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	2b0f      	cmp	r3, #15
 8004434:	d910      	bls.n	8004458 <UART_SetConfig+0x5c8>
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443c:	d20c      	bcs.n	8004458 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	b29a      	uxth	r2, r3
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60da      	str	r2, [r3, #12]
 8004448:	e009      	b.n	800445e <UART_SetConfig+0x5ce>
 800444a:	bf00      	nop
 800444c:	40008000 	.word	0x40008000
 8004450:	00f42400 	.word	0x00f42400
 8004454:	08004b54 	.word	0x08004b54
      }
      else
      {
        ret = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2201      	movs	r2, #1
 8004462:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2201      	movs	r2, #1
 800446a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2200      	movs	r2, #0
 8004472:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2200      	movs	r2, #0
 8004478:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800447a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800447e:	4618      	mov	r0, r3
 8004480:	3730      	adds	r7, #48	; 0x30
 8004482:	46bd      	mov	sp, r7
 8004484:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01a      	beq.n	800459e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004586:	d10a      	bne.n	800459e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
  }
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b098      	sub	sp, #96	; 0x60
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045dc:	f7fc fdac 	bl	8001138 <HAL_GetTick>
 80045e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d12f      	bne.n	8004650 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f8:	2200      	movs	r2, #0
 80045fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f88e 	bl	8004720 <UART_WaitOnFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d022      	beq.n	8004650 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800461e:	653b      	str	r3, [r7, #80]	; 0x50
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004628:	647b      	str	r3, [r7, #68]	; 0x44
 800462a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800462e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e6      	bne.n	800460a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e063      	b.n	8004718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b04      	cmp	r3, #4
 800465c:	d149      	bne.n	80046f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800465e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004666:	2200      	movs	r2, #0
 8004668:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f857 	bl	8004720 <UART_WaitOnFlagUntilTimeout>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d03c      	beq.n	80046f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	623b      	str	r3, [r7, #32]
   return(result);
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800468c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004696:	633b      	str	r3, [r7, #48]	; 0x30
 8004698:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800469c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e6      	bne.n	8004678 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3308      	adds	r3, #8
 80046b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3308      	adds	r3, #8
 80046c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046ca:	61fa      	str	r2, [r7, #28]
 80046cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	69b9      	ldr	r1, [r7, #24]
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	617b      	str	r3, [r7, #20]
   return(result);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e5      	bne.n	80046aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e012      	b.n	8004718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3758      	adds	r7, #88	; 0x58
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4613      	mov	r3, r2
 800472e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004730:	e04f      	b.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004738:	d04b      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473a:	f7fc fcfd 	bl	8001138 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	429a      	cmp	r2, r3
 8004748:	d302      	bcc.n	8004750 <UART_WaitOnFlagUntilTimeout+0x30>
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e04e      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	d037      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b80      	cmp	r3, #128	; 0x80
 8004766:	d034      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b40      	cmp	r3, #64	; 0x40
 800476c:	d031      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b08      	cmp	r3, #8
 800477a:	d110      	bne.n	800479e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2208      	movs	r2, #8
 8004782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f838 	bl	80047fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2208      	movs	r2, #8
 800478e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e029      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ac:	d111      	bne.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f81e 	bl	80047fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e00f      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4013      	ands	r3, r2
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	429a      	cmp	r2, r3
 80047e0:	bf0c      	ite	eq
 80047e2:	2301      	moveq	r3, #1
 80047e4:	2300      	movne	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d0a0      	beq.n	8004732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b095      	sub	sp, #84	; 0x54
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004820:	643b      	str	r3, [r7, #64]	; 0x40
 8004822:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004826:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e6      	bne.n	8004802 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3308      	adds	r3, #8
 800483a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	61fb      	str	r3, [r7, #28]
   return(result);
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800484a:	f023 0301 	bic.w	r3, r3, #1
 800484e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3308      	adds	r3, #8
 8004856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004858:	62fa      	str	r2, [r7, #44]	; 0x2c
 800485a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800485e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004860:	e841 2300 	strex	r3, r2, [r1]
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e3      	bne.n	8004834 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d118      	bne.n	80048a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	60bb      	str	r3, [r7, #8]
   return(result);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f023 0310 	bic.w	r3, r3, #16
 8004888:	647b      	str	r3, [r7, #68]	; 0x44
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	6979      	ldr	r1, [r7, #20]
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	613b      	str	r3, [r7, #16]
   return(result);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e6      	bne.n	8004874 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80048ba:	bf00      	nop
 80048bc:	3754      	adds	r7, #84	; 0x54
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_UARTEx_DisableFifoMode+0x16>
 80048d8:	2302      	movs	r3, #2
 80048da:	e027      	b.n	800492c <HAL_UARTEx_DisableFifoMode+0x66>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2224      	movs	r2, #36	; 0x24
 80048e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800490a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800494c:	2302      	movs	r3, #2
 800494e:	e02d      	b.n	80049ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2224      	movs	r2, #36	; 0x24
 800495c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0201 	bic.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f84f 	bl	8004a30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2220      	movs	r2, #32
 800499e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e02d      	b.n	8004a28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2224      	movs	r2, #36	; 0x24
 80049d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0201 	bic.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f811 	bl	8004a30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d108      	bne.n	8004a52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a50:	e031      	b.n	8004ab6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a52:	2308      	movs	r3, #8
 8004a54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a56:	2308      	movs	r3, #8
 8004a58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	0e5b      	lsrs	r3, r3, #25
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	0f5b      	lsrs	r3, r3, #29
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a7a:	7bbb      	ldrb	r3, [r7, #14]
 8004a7c:	7b3a      	ldrb	r2, [r7, #12]
 8004a7e:	4911      	ldr	r1, [pc, #68]	; (8004ac4 <UARTEx_SetNbDataToProcess+0x94>)
 8004a80:	5c8a      	ldrb	r2, [r1, r2]
 8004a82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a86:	7b3a      	ldrb	r2, [r7, #12]
 8004a88:	490f      	ldr	r1, [pc, #60]	; (8004ac8 <UARTEx_SetNbDataToProcess+0x98>)
 8004a8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	7b7a      	ldrb	r2, [r7, #13]
 8004a9c:	4909      	ldr	r1, [pc, #36]	; (8004ac4 <UARTEx_SetNbDataToProcess+0x94>)
 8004a9e:	5c8a      	ldrb	r2, [r1, r2]
 8004aa0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004aa4:	7b7a      	ldrb	r2, [r7, #13]
 8004aa6:	4908      	ldr	r1, [pc, #32]	; (8004ac8 <UARTEx_SetNbDataToProcess+0x98>)
 8004aa8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004aaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	08004b6c 	.word	0x08004b6c
 8004ac8:	08004b74 	.word	0x08004b74

08004acc <memset>:
 8004acc:	4402      	add	r2, r0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d100      	bne.n	8004ad6 <memset+0xa>
 8004ad4:	4770      	bx	lr
 8004ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8004ada:	e7f9      	b.n	8004ad0 <memset+0x4>

08004adc <__libc_init_array>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	4d0d      	ldr	r5, [pc, #52]	; (8004b14 <__libc_init_array+0x38>)
 8004ae0:	4c0d      	ldr	r4, [pc, #52]	; (8004b18 <__libc_init_array+0x3c>)
 8004ae2:	1b64      	subs	r4, r4, r5
 8004ae4:	10a4      	asrs	r4, r4, #2
 8004ae6:	2600      	movs	r6, #0
 8004ae8:	42a6      	cmp	r6, r4
 8004aea:	d109      	bne.n	8004b00 <__libc_init_array+0x24>
 8004aec:	4d0b      	ldr	r5, [pc, #44]	; (8004b1c <__libc_init_array+0x40>)
 8004aee:	4c0c      	ldr	r4, [pc, #48]	; (8004b20 <__libc_init_array+0x44>)
 8004af0:	f000 f818 	bl	8004b24 <_init>
 8004af4:	1b64      	subs	r4, r4, r5
 8004af6:	10a4      	asrs	r4, r4, #2
 8004af8:	2600      	movs	r6, #0
 8004afa:	42a6      	cmp	r6, r4
 8004afc:	d105      	bne.n	8004b0a <__libc_init_array+0x2e>
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b04:	4798      	blx	r3
 8004b06:	3601      	adds	r6, #1
 8004b08:	e7ee      	b.n	8004ae8 <__libc_init_array+0xc>
 8004b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0e:	4798      	blx	r3
 8004b10:	3601      	adds	r6, #1
 8004b12:	e7f2      	b.n	8004afa <__libc_init_array+0x1e>
 8004b14:	08004b84 	.word	0x08004b84
 8004b18:	08004b84 	.word	0x08004b84
 8004b1c:	08004b84 	.word	0x08004b84
 8004b20:	08004b88 	.word	0x08004b88

08004b24 <_init>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	bf00      	nop
 8004b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2a:	bc08      	pop	{r3}
 8004b2c:	469e      	mov	lr, r3
 8004b2e:	4770      	bx	lr

08004b30 <_fini>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	bf00      	nop
 8004b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b36:	bc08      	pop	{r3}
 8004b38:	469e      	mov	lr, r3
 8004b3a:	4770      	bx	lr
